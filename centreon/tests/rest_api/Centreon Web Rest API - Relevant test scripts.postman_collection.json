{
	"info": {
		"_postman_id": "03148344-675f-4d45-95bd-4ceea8efabd8",
		"name": "Centreon Web Rest API - Relevant test scripts",
		"description": "# New features\n+ Added real-time monitoring for hosts and services\n+ Added acknowledgement for hosts and services\n+ Added downtimes for hosts and services\n+ Added the list of monitoring server configurations\n+ Added the proxy configuration\n# Information\nAll dates are in **ISO 8601** format\n# Authentication\nThere are two modes of authentication:\n* By token: after identification with your login credentials\n* By cookie: by reusing a valid session ID\n\n\nContact Support:\n Name: Centreon",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "22770334"
	},
	"item": [
		{
			"name": "01 - Authentication",
			"item": [
				{
					"name": "Critical Path",
					"item": [
						{
							"name": "Login",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Login successful\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Account displayed in response corresponds to credentials\", function (){\r",
											"    pm.expect(responseJson.contact.alias).to.eql(pm.collectionVariables.get('api_login'));\r",
											"});\r",
											"\r",
											"pm.collectionVariables.set(\"token\", responseJson.security.token);\r",
											"pm.collectionVariables.set(\"user\", responseJson.contact.alias);\r",
											"pm.collectionVariables.set(\"current_user_id\", responseJson.contact.id);\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login}}\",\r\n      \"password\": \"{{api_password}}\"\r\n    }\r\n  }\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Edge cases",
					"item": [
						{
							"name": "Update user's password with incorrect password format",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Update request was unsuccessful.\", function () {\r",
											"    pm.response.to.have.status(500);\r",
											"});\r",
											"\r",
											"pm.test(\"Displayed error message is the one that is expected\", function() {\r",
											"    pm.expect(responseJson.message).to.eql(\"[UserPassword::passwordValue] The value ({{currentPassword}}) doesn't match the regex '/[0-9]/'\");\r",
											"});\r",
											"\r",
											"const incorrect_passwords = pm.collectionVariables.get(\"incorrect_passwords_list\");\r",
											"\r",
											"if(incorrect_passwords && incorrect_passwords.length > 0) {\r",
											"    postman.setNextRequest(\"Update user's password with incorrect password format\");\r",
											"} else {\r",
											"    postman.setNextRequest(\"Update user's with correct password format\");\r",
											"    pm.collectionVariables.unset(\"current_password\");\r",
											"    pm.collectionVariables.unset(\"incorrect_passwords_list\");\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let incorrect_passwords = pm.collectionVariables.get(\"incorrect_passwords_list\");\r",
											"if (!incorrect_passwords || incorrect_passwords.length == 0){\r",
											"    incorrect_passwords = [\"Centreon2021\", \"centreon!2021\", \"2021010203\", \"\", \"CentreonTwoThousandTwentyOne\", \"centreon\"];\r",
											"}\r",
											"\r",
											"let current_password = incorrect_passwords.shift();\r",
											"pm.collectionVariables.set(\"current_password\", current_password);\r",
											"pm.collectionVariables.set(\"incorrect_passwords_list\", incorrect_passwords);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n \"old_password\": \"Centreon!2021\",\n  \"new_password\": \"{{currentPassword}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/authentication/users/:alias/password",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"authentication",
										"users",
										":alias",
										"password"
									],
									"variable": [
										{
											"key": "alias",
											"value": "{{user}}"
										}
									]
								}
							},
							"response": [
								{
									"name": "Password changed",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"old_password\": \"Centreon!2021\",\n  \"new_password\": \"Centreon!2022\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/authentication/users/:alias/password",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"authentication",
												"users",
												":alias",
												"password"
											],
											"variable": [
												{
													"key": "alias",
													"value": "{{user}}"
												}
											]
										}
									},
									"status": "No Content",
									"code": 204,
									"_postman_previewlanguage": null,
									"header": null,
									"cookie": [],
									"body": null
								}
							]
						},
						{
							"name": "Update user's with correct password format",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Update request was successful.\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"old_password\": \"{{api_password}}\",\n  \"new_password\": \"Centreon!2022\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/authentication/users/:alias/password",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"authentication",
										"users",
										":alias",
										"password"
									],
									"variable": [
										{
											"key": "alias",
											"value": "{{user}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Attempt to revert back to old password directly",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Update request was unsuccesful. (Old password usage is disabled.)\", function () {\r",
											"    pm.response.to.have.status(500);\r",
											"});\r",
											"\r",
											"pm.test(\"Displayed error message is the one that's expected\", function() {\r",
											"    pm.expect(responseJson.message).to.eql(\"Old password usage is disable\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"old_password\": \"Centreon!2022\",\n  \"new_password\": \"{{api_password}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/authentication/users/:alias/password",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"authentication",
										"users",
										":alias",
										"password"
									],
									"variable": [
										{
											"key": "alias",
											"value": "{{user}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Revert to old password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const buffer_passwords = pm.collectionVariables.get(\"buffer_passwords\");\r",
											"\r",
											"pm.test(\"Password replacement occurred successfully.\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											"\r",
											"if(buffer_passwords && buffer_passwords.length > 0) {\r",
											"    postman.setNextRequest(\"Revert to old password\");\r",
											"} else {\r",
											"    pm.collectionVariables.unset(\"current_password\");\r",
											"    pm.collectionVariables.unset(\"buffer_passwords\");\r",
											"    pm.collectionVariables.unset(\"old_password\");\r",
											"    postman.setNextRequest(\"Logout\");\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let buffer_passwords = pm.collectionVariables.get(\"buffer_passwords\");\r",
											"if (!buffer_passwords || buffer_passwords.length == 0){\r",
											"    buffer_passwords = [\"Centreon!2022\", \"Centreon!2023\", \"Centreon!2024\", pm.collectionVariables.get(\"api_password\")];\r",
											"}\r",
											"let old_password = pm.collectionVariables.get(\"current_password\");\r",
											"if(!old_password) {old_password = buffer_passwords.shift();}\r",
											"current_password = buffer_passwords.shift();\r",
											"pm.collectionVariables.set(\"old_password\", old_password);\r",
											"pm.collectionVariables.set(\"current_password\", current_password);\r",
											"pm.collectionVariables.set(\"buffer_passwords\", buffer_passwords);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"old_password\": \"{{old_password}}\",\n  \"new_password\": \"{{current_password}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/authentication/users/:alias/password",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"authentication",
										"users",
										":alias",
										"password"
									],
									"variable": [
										{
											"key": "alias",
											"value": "{{user}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Logout",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Logout successful.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Displayed message is the one that is expected\", function() {\r",
											"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "X-AUTH-TOKEN",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"logout"
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								},
								"description": "Entry point to delete an existing authentication token."
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logout"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Successful logout\"\n}"
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logout"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 403,\n  \"message\": \"You are not authorized to access this resource\"\n}"
								},
								{
									"name": "Internal Server Error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logout"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 500,\n  \"message\": \"Internal Server Error\"\n}"
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "10 - Time period management",
			"item": [
				{
					"name": "Critical Path",
					"item": [
						{
							"name": "Login",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Login successful\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Account displayed in response corresponds to credentials\", function (){\r",
											"    pm.expect(responseJson.contact.alias).to.eql(pm.collectionVariables.get('api_login'));\r",
											"});\r",
											"\r",
											"pm.collectionVariables.set(\"token\", responseJson.security.token);\r",
											"pm.collectionVariables.set(\"user\", responseJson.contact.alias);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"security\": {\n    \"credentials\": {\n      \"login\": \"{{api_login}}\",\n      \"password\": \"{{api_password}}\"\n    }\n  }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								},
								"description": "Entry point to retrieve an authentication token."
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"security\": {\n    \"credentials\": {\n      \"login\": \"admin\",\n      \"password\": \"centreon\"\n    }\n  }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"login"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"contact\": {\n    \"id\": 3,\n    \"name\": \"Admin\",\n    \"alias\": \"admin\",\n    \"email\": \"01A@CrLEnzWrYdgVBaUzldbG.wutx\",\n    \"is_admin\": true\n  },\n  \"security\": {\n    \"token\": \"9ed937d3911d212eae59300ac6977352\"\n  }\n}"
								},
								{
									"name": "Indicates that the server cannot or will not process the request due to something that is perceived to be\na client error (e.g., malformed request syntax, invalid request message framing)\n",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"security\": {\n    \"credentials\": {\n      \"login\": \"admin\",\n      \"password\": \"centreon\"\n    }\n  }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"login"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 400,\n  \"message\": \"Property 'name' not found\"\n}"
								},
								{
									"name": "Unauthorized",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"security\": {\n    \"credentials\": {\n      \"login\": \"admin\",\n      \"password\": \"centreon\"\n    }\n  }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"login"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 401,\n  \"message\": \"exercitation sit\"\n}"
								},
								{
									"name": "Internal Server Error",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"security\": {\n    \"credentials\": {\n      \"login\": \"admin\",\n      \"password\": \"centreon\"\n    }\n  }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"login"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 500,\n  \"message\": \"Internal Server Error\"\n}"
								}
							]
						},
						{
							"name": "Add time period",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Time period created successfully.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"time_period_name\", \"TP-Test-API\");\r",
											"pm.collectionVariables.set(\"time_period_alias\", \"Time period used for API tests\");\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"add\",\n  \"object\": \"tp\",\n  \"values\": \"{{time_period_name}};{{time_period_alias}};\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Show available time periods after time period creation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Request successful.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"try {\r",
											"    var i = 0;\r",
											"        while (i < responseJson.result.length) {\r",
											"        if (pm.collectionVariables.get(\"time_period_name\") == responseJson.result[i].name)\r",
											"        {\r",
											"            pm.test(\"Time period name was found.\", function() {\r",
											"                pm.expect(pm.collectionVariables.get(\"time_period_name\")).to.eql(responseJson.result[i].name);\r",
											"            });\r",
											"            pm.test(\"Time period alias was found.\", function() {\r",
											"                pm.expect(pm.collectionVariables.get(\"time_period_alias\")).to.eql(responseJson.result[i].alias);\r",
											"            });\r",
											"            break;\r",
											"        }\r",
											"        i++;\r",
											"    }\r",
											"    if (i == responseJson.result.length)\r",
											"        pm.test(\"Added time period was found\", function() {\r",
											"            pm.expect(true).to.eql(false);\r",
											"        });\r",
											"} \r",
											"catch (e) {}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "centreon-auth-token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"action\": \"show\",\r\n  \"object\": \"tp\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Set parameters for newly created time period",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Parameter \" + pm.collectionVariables.get(\"current_parameter\") + \" was updated with \" + pm.collectionVariables.get(\"current_value\"), function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"if (pm.collectionVariables.get(\"name\") && pm.collectionVariables.get(\"name\") != pm.collectionVariables.get(\"time_period_name\")) {\r",
											"    pm.collectionVariables.set(\"time_period_name\", pm.collectionVariables.get(\"name\"));\r",
											"}\r",
											"\r",
											"if (pm.collectionVariables.get(\"alias\") && pm.collectionVariables.get(\"alias\") != pm.collectionVariables.get(\"time_period_alias\")) {\r",
											"    pm.collectionVariables.set(\"time_period_alias\", pm.collectionVariables.get(\"alias\"));\r",
											"}\r",
											"\r",
											"const parameters = pm.collectionVariables.get(\"list_of_parameters\");\r",
											"if (parameters && parameters.length > 0) {\r",
											"    postman.setNextRequest(\"Set parameters for newly created time period\");\r",
											"} else {\r",
											"    pm.collectionVariables.unset(\"current_parameter\");\r",
											"    pm.collectionVariables.unset(\"current_value\");\r",
											"    pm.collectionVariables.unset(\"list_of_parameters\");\r",
											"    pm.collectionVariables.unset(\"list_of_values\");\r",
											"    postman.setNextRequest(\"Show available time periods after time period update\");\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let parameters = pm.collectionVariables.get(\"list_of_parameters\");\r",
											"let parameters_to_check = pm.collectionVariables.get(\"parameters_to_check\");\r",
											"let values = pm.collectionVariables.get(\"list_of_values\");\r",
											"\r",
											"if (!parameters || parameters.length == 0) {\r",
											"    parameters = [\"alias\", \"sunday\", \"monday\", \"tuesday\", \"wednesday\", \"thursday\", \"friday\", \"saturday\"];\r",
											"    values = [\"my_new_tp_alias\", \"00:00-24:00\", \"09:00-17:00\", \"09:00-17:00\", \"09:00-17:00\", \"09:17-24:00\", \"09:00-17:00\", \"09:00-13:30\"];\r",
											"    parameters_to_check = [];\r",
											"}\r",
											"\r",
											"let current_parameter = parameters.shift();\r",
											"pm.collectionVariables.set(\"current_parameter\", current_parameter);\r",
											"pm.collectionVariables.set(\"list_of_parameters\", parameters);\r",
											"let current_value = values.shift();\r",
											"pm.collectionVariables.set(\"current_value\", current_value);\r",
											"pm.collectionVariables.set(\"list_of_values\", values);\r",
											"\r",
											"pm.collectionVariables.set(current_parameter, current_value);\r",
											"\r",
											"parameters_to_check.push(current_parameter);\r",
											"pm.collectionVariables.set(\"parameters_to_check\", parameters_to_check);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\":\"setparam\",\n  \"object\":\"tp\",\n  \"values\": \"{{time_period_name}};{{current_parameter}};{{current_value}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Show available time periods after time period update",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"A list of configured time periods has been successfully fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"var parameters_to_check = pm.collectionVariables.get(\"parameters_to_check\");\r",
											"const number_of_parameters = parameters_to_check.length;\r",
											"\r",
											"for(let l = 0; l < responseJson.result.length; l++) {\r",
											"    if(responseJson.result[l].name == pm.collectionVariables.get(\"time_period_name\")) {\r",
											"        const keys = Object.keys(responseJson.result[l]);\r",
											"        const values = Object.values(responseJson.result[l]);\r",
											"        for (var i = 0; i < number_of_parameters; i++) {\r",
											"            var j = keys.indexOf(parameters_to_check[i]);\r",
											"            if(j != -1) {\r",
											"                pm.test(\"The value \" + pm.collectionVariables.get(parameters_to_check[i])  + \" was found for \" + pm.collectionVariables.get(\"time_period_name\") + \"'s parameter \" + parameters_to_check[i], function() {\r",
											"                pm.expect(pm.collectionVariables.get(parameters_to_check[i])).to.eql(values[j]);\r",
											"                pm.collectionVariables.unset(parameters_to_check[i]);\r",
											"                }) \r",
											"            } else {\r",
											"                pm.test(\"The parameter \" + parameters_to_check[i] + \" does not exist or cannot be found.\", function() {\r",
											"                    pm.expect(true).to.eql(false);\r",
											"                })\r",
											"            }\r",
											"        }\r",
											"        pm.collectionVariables.unset(\"parameters_to_check\");\r",
											"        break;\r",
											"    }\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "centreon-auth-token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"action\": \"show\",\r\n  \"object\": \"tp\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Set exceptions on newly created time period",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const exception_dates = pm.collectionVariables.get(\"list_of_exception_dates\");\r",
											"\r",
											"pm.test(\"An exception has been set on \" + pm.collectionVariables.get(\"current_exception_date\") + \" (Timerange: \" + pm.collectionVariables.get(\"current_exception_timerange\") + \")\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"if (exception_dates && exception_dates.length > 0) {\r",
											"    postman.setNextRequest(\"Set exceptions on newly created time period\");\r",
											"} else {\r",
											"    pm.collectionVariables.unset(\"current_exception_date\");\r",
											"    pm.collectionVariables.unset(\"current_exception_timerange\");\r",
											"    pm.collectionVariables.unset(\"list_of_exception_dates\");\r",
											"    pm.collectionVariables.unset(\"list_of_exception_timeranges\");\r",
											"    pm.collectionVariables.unset(\"count\");\r",
											"    postman.setNextRequest(\"Get exceptions on newly created time period\");\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let exception_dates = pm.collectionVariables.get(\"list_of_exception_dates\");\r",
											"let exception_timeranges = pm.collectionVariables.get(\"list_of_exception_timeranges\");\r",
											"let count = pm.collectionVariables.get(\"count\");\r",
											"\r",
											"if (!exception_dates || exception_dates.length == 0) {\r",
											"    exception_dates = [\"January 1\", \"December 25\", \"August 15\"];\r",
											"    exception_timeranges = [\"00:00-24:00\", \"00:00-24:00\", \"07:00-19:00\"];\r",
											"    pm.collectionVariables.set(\"total_number_of_exceptions\", exception_dates.length);\r",
											"    count = 0;\r",
											"}\r",
											"\r",
											"let current_date = exception_dates.shift();\r",
											"pm.collectionVariables.set(\"current_exception_date\", current_date);\r",
											"pm.collectionVariables.set(\"list_of_exception_dates\", exception_dates);\r",
											"\r",
											"let current_timerange = exception_timeranges.shift();\r",
											"pm.collectionVariables.set(\"current_exception_timerange\", current_timerange);\r",
											"pm.collectionVariables.set(\"list_of_exception_timeranges\", exception_timeranges);\r",
											"\r",
											"pm.collectionVariables.set(\"exception_date_\" + count, current_date);\r",
											"pm.collectionVariables.set(\"exception_timerange_\" + count, current_timerange);\r",
											"count++;\r",
											"pm.collectionVariables.set(\"count\", count);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"setexception\",\n  \"object\": \"tp\",\n  \"values\": \"{{time_period_name}};{{current_exception_date}};{{current_exception_timerange}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get exceptions on newly created time period",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();",
											"var exceptions_found = 0;",
											"",
											"pm.test(\"A list of exceptions has been returned.\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"try {",
											"    for (var i = 0; i < responseJson.result.length; i++) {",
											"        for(var j = 0; j < pm.collectionVariables.get(\"total_number_of_exceptions\"); j++) {",
											"            var current_date_string = \"exception_date_\" + j;",
											"            var current_exception_date = pm.collectionVariables.get(current_date_string);",
											"            var current_timerange_string = \"exception_timerange_\" + j;",
											"            var current_exception_timerange = pm.collectionVariables.get(current_timerange_string);",
											"            if(responseJson.result[i].days == current_exception_date) {",
											"                pm.test(\"Exception date \" + current_exception_date + \" has been found.\", function() {true;})",
											"                pm.test(\"Exception timerange for \" + current_exception_date + \" (\" + current_exception_timerange + \") has been found.\", function() {",
											"                    pm.expect(current_exception_timerange).to.eql(responseJson.result[i].timerange);",
											"                    exceptions_found++;",
											"                    pm.collectionVariables.unset(current_date_string);",
											"                    pm.collectionVariables.unset(current_timerange_string);",
											"                })",
											"            }",
											"        }",
											"    }",
											"    pm.test(\"All exceptions have been found.\", function() {",
											"        pm.expect(pm.collectionVariables.get(\"total_number_of_exceptions\")).to.eql(exceptions_found);",
											"        pm.collectionVariables.unset(\"count\");",
											"        pm.collectionVariables.unset(\"total_number_of_exceptions\");",
											"    })",
											"} catch (e) {}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\":\"getexception\",\n  \"object\":\"tp\",\n  \"values\": \"{{time_period_name}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "20 - Contact template management",
			"item": [
				{
					"name": "Critical Path",
					"item": [
						{
							"name": "List contact templates",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"A list of contact templates has been fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/configuration/contacts/templates",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configuration",
										"contacts",
										"templates"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create a new contact template",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Contact template \" + pm.collectionVariables.get(\"contactTemplateName\") + \" has been created.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"contactTemplateName\", \"CTPL-Test-API\");\r",
											"pm.collectionVariables.set(\"contactTemplateAlias\", \"Contact_Template_for_API_Testing\");\r",
											"pm.collectionVariables.set(\"contactTemplateMail\", \"dummymail@centreon\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"add\",\n  \"object\": \"contacttpl\",\n  \"values\": \"{{contactTemplateName}};{{contactTemplateAlias}};{{contactTemplateMail}};0;1;en_US;local\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "List contact templates after contact template creation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"A list of contact templates has been fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"The contact template that was just created is registered.\", function() {\r",
											"    pm.expect(responseJson.meta.total).to.eql(1);\r",
											"    pm.expect(responseJson.result[0].name).to.eql(pm.collectionVariables.get(\"contactTemplateName\"));\r",
											"    pm.collectionVariables.set(\"contactTemplateId\", responseJson.result[0].id);\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/configuration/contacts/templates",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configuration",
										"contacts",
										"templates"
									]
								}
							},
							"response": []
						},
						{
							"name": "Set parameters for the newly created contact template",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const parameters = pm.collectionVariables.get(\"list_of_parameters\");\r",
											"\r",
											"pm.test(\"Parameter \" + pm.collectionVariables.get(\"current_parameter\") + \" was updated with \" + pm.collectionVariables.get(\"current_value\"), function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"if (pm.collectionVariables.get(\"name\") && pm.collectionVariables.get(\"name\") != pm.collectionVariables.get(\"contactTemplateName\")) {\r",
											"    pm.collectionVariables.set(\"contactTemplateName\", pm.collectionVariables.get(\"name\"));\r",
											"}\r",
											"\r",
											"if (parameters && parameters.length > 0) {\r",
											"    postman.setNextRequest(\"Set parameters for the newly created contact template\");\r",
											"} else {\r",
											"    pm.collectionVariables.unset(\"current_parameter\");\r",
											"    pm.collectionVariables.unset(\"current_value\");\r",
											"    pm.collectionVariables.unset(\"list_of_parameters\");\r",
											"    pm.collectionVariables.unset(\"list_of_values\");\r",
											"    postman.setNextRequest(\"Export configuration after contact template update\");\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let parameters = pm.collectionVariables.get(\"list_of_parameters\");\r",
											"let values = pm.collectionVariables.get(\"list_of_values\");\r",
											"\r",
											"if (!parameters || parameters.length == 0) {\r",
											"    parameters = [\"language\", \"enable_notifications\", \"hostnotifopt\", \"servicenotifopt\", \"hostnotifperiod\", \"svcnotifperiod\", \"hostnotifcmd\", \"svcnotifcmd\", \"timezone\", \"reach_api\", \"reach_api_rt\"];\r",
											"    values = [\"fr_FR\", 1, [\"d\", \"u\", \"r\", \"f\"], [\"w\", \"u\", \"c\", \"r\", \"f\"], pm.collectionVariables.get(\"time_period_name\"), pm.collectionVariables.get(\"time_period_name\"), \"host-notify-by-email\", \"service-notify-by-email\", \"Europe/Paris\", 1, 1];\r",
											"}\r",
											"\r",
											"let current_parameter = parameters.shift();\r",
											"pm.collectionVariables.set(\"current_parameter\", current_parameter);\r",
											"pm.collectionVariables.set(\"list_of_parameters\", parameters);\r",
											"let current_value = values.shift();\r",
											"pm.collectionVariables.set(\"current_value\", current_value);\r",
											"pm.collectionVariables.set(\"list_of_values\", values);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\":\"setparam\",\n  \"object\":\"CONTACTTPL\",\n  \"values\": \"Contact_Template_for_API_Testing;{{current_parameter}};{{current_value}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Export configuration after contact template update",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"setTimeout(function(){}, [2000]);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"APPLYCFG\",\n  \"values\": \"Central\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Add new user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Request successful.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"testuser_name\", \"User Test\");\r",
											"pm.collectionVariables.set(\"testuser_login\", \"testuser\");\r",
											"pm.collectionVariables.set(\"testuser_email\", \"testuser@localhost\");\r",
											"pm.collectionVariables.set(\"testuser_password\", \"Centreon!2021\");\r",
											"pm.collectionVariables.set(\"testuser_admin\", 0);\r",
											"pm.collectionVariables.set(\"testuser_GUI_access\", 1);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"add\",\n  \"object\": \"contact\",\n  \"values\": \"userTestTemplate;userTestTemplate;userTestTemplate@centreon;Centreon!2021;0;1;en_US;local\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Set template to new user",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Template was assigned to the newly created user.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "centreon-auth-token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"action\":\"setParam\",\r\n  \"object\":\"contact\",\r\n  \"values\": \"userTestTemplate;template;{{contactTemplateAlias}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "21 - Contact management",
			"item": [
				{
					"name": "Critical Path",
					"item": [
						{
							"name": "Login on admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Login successful\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Account displayed in response corresponds to credentials\", function (){\r",
											"    pm.expect(responseJson.contact.alias).to.eql(pm.collectionVariables.get('api_login'));\r",
											"});\r",
											"\r",
											"pm.collectionVariables.set(\"token\", responseJson.security.token);\r",
											"pm.collectionVariables.set(\"user\", responseJson.contact.alias);\r",
											"pm.collectionVariables.set(\"current_user_email\", responseJson.contact.email);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"security\": {\n    \"credentials\": {\n      \"login\": \"{{api_login}}\",\n      \"password\": \"{{api_password}}\"\n    }\n  }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								},
								"description": "Entry point to retrieve an authentication token."
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"security\": {\n    \"credentials\": {\n      \"login\": \"admin\",\n      \"password\": \"centreon\"\n    }\n  }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"login"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"contact\": {\n    \"id\": 3,\n    \"name\": \"Admin\",\n    \"alias\": \"admin\",\n    \"email\": \"01A@CrLEnzWrYdgVBaUzldbG.wutx\",\n    \"is_admin\": true\n  },\n  \"security\": {\n    \"token\": \"9ed937d3911d212eae59300ac6977352\"\n  }\n}"
								},
								{
									"name": "Indicates that the server cannot or will not process the request due to something that is perceived to be\na client error (e.g., malformed request syntax, invalid request message framing)\n",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"security\": {\n    \"credentials\": {\n      \"login\": \"admin\",\n      \"password\": \"centreon\"\n    }\n  }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"login"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 400,\n  \"message\": \"Property 'name' not found\"\n}"
								},
								{
									"name": "Unauthorized",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"security\": {\n    \"credentials\": {\n      \"login\": \"admin\",\n      \"password\": \"centreon\"\n    }\n  }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"login"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 401,\n  \"message\": \"exercitation sit\"\n}"
								},
								{
									"name": "Internal Server Error",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"security\": {\n    \"credentials\": {\n      \"login\": \"admin\",\n      \"password\": \"centreon\"\n    }\n  }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"login"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 500,\n  \"message\": \"Internal Server Error\"\n}"
								}
							]
						},
						{
							"name": "Check admin's actions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Actions on admin user successfully fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"responseJson = pm.response.json();\r",
											"const valuesHosts = Object.values(responseJson.host);\r",
											"const valuesServices = Object.values(responseJson.service);\r",
											"const valuesMetaservices = Object.values(responseJson.metaservice);\r",
											"\r",
											"pm.test(\"Admin user has access to all available actions.\", function() {\r",
											"    pm.expect(valuesHosts).to.not.include(false);\r",
											"    pm.expect(valuesServices).to.not.include(false);\r",
											"    pm.expect(valuesMetaservices).to.not.include(false);\r",
											"})\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/acl/actions",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"acl",
										"actions"
									]
								}
							},
							"response": []
						},
						{
							"name": "List all users",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"List of users succesfully fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"responseJson = pm.response.json();\r",
											"pm.collectionVariables.set(\"number_of_users\", responseJson.result.length);\r",
											"for (var i = 0; i < pm.collectionVariables.get(\"number_of_users\"); i++) {\r",
											"    if(responseJson.result[i].id == pm.collectionVariables.get(\"current_user_id\")) {\r",
											"        pm.test(\"Current admin user is registered in the list.\", function() {\r",
											"            pm.expect(pm.collectionVariables.get(\"current_user_id\")).to.eql(responseJson.result[i].id);\r",
											"            pm.expect(pm.collectionVariables.get(\"api_login\")).to.eql(responseJson.result[i].alias);\r",
											"            pm.expect(pm.collectionVariables.get(\"current_user_email\")).to.eql(responseJson.result[i].email);\r",
											"            pm.expect(responseJson.result[i].is_admin).to.eql(true);\r",
											"            pm.collectionVariables.unset(\"current_user_email\");\r",
											"        });\r",
											"    }\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/configuration/users",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configuration",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add new non-admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Request successful.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"testuser_name\", \"User Test\");\r",
											"pm.collectionVariables.set(\"testuser_login\", \"testuser\");\r",
											"pm.collectionVariables.set(\"testuser_email\", \"testuser@localhost\");\r",
											"pm.collectionVariables.set(\"testuser_password\", \"Centreon!2021\");\r",
											"pm.collectionVariables.set(\"testuser_admin\", 0);\r",
											"pm.collectionVariables.set(\"testuser_GUI_access\", 1);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"add\",\n  \"object\": \"contact\",\n  \"values\": \"{{testuser_name}};{{testuser_login}};{{testuser_email}};{{testuser_password}};{{testuser_admin}};{{testuser_GUI_access}};en_US;local\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "List all users after user creation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"List of users succesfully fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"responseJson = pm.response.json();\r",
											"\r",
											"pm.test(\"One user has been added since the last list request.\", function() {\r",
											"    pm.expect(responseJson.result.length).to.eql(pm.collectionVariables.get(\"number_of_users\") + 1);\r",
											"})\r",
											"\r",
											"var i = 0;\r",
											"while (i < responseJson.result.length) {\r",
											"    if(responseJson.result[i].name == pm.collectionVariables.get(\"testuser_name\")) {\r",
											"        pm.test(\"Newly created user is registered in the list.\", function() {\r",
											"            pm.expect(responseJson.result[i].alias).to.eql(pm.collectionVariables.get(\"testuser_login\"));\r",
											"            pm.expect(responseJson.result[i].email).to.eql(pm.collectionVariables.get(\"testuser_email\"));\r",
											"            pm.expect(responseJson.result[i].is_admin).to.eql(false);\r",
											"        });\r",
											"    }\r",
											"    i++;\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/configuration/users",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configuration",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add access to API configuration & realtime to the new user",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let parameters = pm.collectionVariables.get(\"list_of_parameters\");\r",
											"let values = pm.collectionVariables.get(\"list_of_values\");\r",
											"let parameters_to_check = pm.collectionVariables.get(\"parameters_to_check\");\r",
											"\r",
											"if (!parameters || parameters.length == 0) {\r",
											"    parameters = [\"timezone\", \"reach_api\", \"reach_api_rt\"];\r",
											"    values = [\"Europe/Paris\", 1, 1];\r",
											"}\r",
											"\r",
											"let current_parameter = parameters.shift();\r",
											"pm.collectionVariables.set(\"current_parameter\", current_parameter);\r",
											"pm.collectionVariables.set(\"list_of_parameters\", parameters);\r",
											"let current_value = values.shift();\r",
											"pm.collectionVariables.set(\"current_value\", current_value);\r",
											"pm.collectionVariables.set(\"list_of_values\", values);\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const parameters = pm.collectionVariables.get(\"list_of_parameters\");\r",
											"\r",
											"pm.test(\"Parameter \" + pm.collectionVariables.get(\"current_parameter\") + \" was updated with \" + pm.collectionVariables.get(\"current_value\"), function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"if (parameters && parameters.length > 0) {\r",
											"    postman.setNextRequest(\"Add access to API configuration & realtime to the new user\");\r",
											"} else {\r",
											"    pm.collectionVariables.unset(\"current_parameter\");\r",
											"    pm.collectionVariables.unset(\"current_value\");\r",
											"    pm.collectionVariables.unset(\"list_of_parameters\");\r",
											"    pm.collectionVariables.unset(\"list_of_values\");\r",
											"    postman.setNextRequest(\"Log out from admin user after non-admin user update\");\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "centreon-auth-token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"action\":\"setparam\",\r\n  \"object\":\"contact\",\r\n  \"values\": \"{{testuser_login}};{{current_parameter}};{{current_value}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Log out from admin user after non-admin user update",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Logout successful.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Displayed message is the one that is expected\", function() {\r",
											"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
											"});\r",
											"postman.setNextRequest(\"Login on newly created user\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "X-AUTH-TOKEN",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"logout"
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								},
								"description": "Entry point to delete an existing authentication token."
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logout"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Successful logout\"\n}"
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logout"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 403,\n  \"message\": \"You are not authorized to access this resource\"\n}"
								},
								{
									"name": "Internal Server Error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logout"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 500,\n  \"message\": \"Internal Server Error\"\n}"
								}
							]
						},
						{
							"name": "Login on newly created user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Login successful\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Account displayed in response corresponds to credentials\", function (){\r",
											"    pm.expect(responseJson.contact.alias).to.eql(pm.collectionVariables.get('testuser_login'));\r",
											"});\r",
											"\r",
											"pm.collectionVariables.set(\"token\", responseJson.security.token);\r",
											"pm.collectionVariables.set(\"user\", responseJson.contact.alias);\r",
											"pm.collectionVariables.set(\"current_user_id\", responseJson.contact.id);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"security\": {\n    \"credentials\": {\n      \"login\": \"{{testuser_login}}\",\n      \"password\": \"{{testuser_password}}\"\n    }\n  }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								},
								"description": "Entry point to retrieve an authentication token."
							},
							"response": []
						},
						{
							"name": "Check actions on non-admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Actions on non-admin user successfully fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"responseJson = pm.response.json();\r",
											"const valuesHosts = Object.values(responseJson.host);\r",
											"const valuesServices = Object.values(responseJson.service);\r",
											"const valuesMetaservices = Object.values(responseJson.metaservice);\r",
											"\r",
											"pm.test(\"Newly created user has access to no available actions.\", function() {\r",
											"    pm.expect(valuesHosts).to.not.include(true);\r",
											"    pm.expect(valuesServices).to.not.include(true);\r",
											"    pm.expect(valuesMetaservices).to.not.include(true);\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "centreon-auth-token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users/acl/actions",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"acl",
										"actions"
									]
								}
							},
							"response": []
						},
						{
							"name": "Log out from non-admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Logout successful.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Displayed message is the one that is expected\", function() {\r",
											"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
											"});\r",
											"postman.setNextRequest(\"Login on admin user after non-admin user check\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "X-AUTH-TOKEN",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"logout"
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								},
								"description": "Entry point to delete an existing authentication token."
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logout"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Successful logout\"\n}"
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logout"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 403,\n  \"message\": \"You are not authorized to access this resource\"\n}"
								},
								{
									"name": "Internal Server Error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logout"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 500,\n  \"message\": \"Internal Server Error\"\n}"
								}
							]
						},
						{
							"name": "Login on admin user after non-admin user check",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Login successful\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Account displayed in response corresponds to credentials\", function (){\r",
											"    pm.expect(responseJson.contact.alias).to.eql(pm.collectionVariables.get('api_login'));\r",
											"});\r",
											"\r",
											"pm.collectionVariables.set(\"token\", responseJson.security.token);\r",
											"pm.collectionVariables.set(\"user\", responseJson.contact.alias);\r",
											"pm.collectionVariables.set(\"current_user_email\", responseJson.contact.email);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"security\": {\n    \"credentials\": {\n      \"login\": \"{{api_login}}\",\n      \"password\": \"{{api_password}}\"\n    }\n  }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								},
								"description": "Entry point to retrieve an authentication token."
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"security\": {\n    \"credentials\": {\n      \"login\": \"admin\",\n      \"password\": \"centreon\"\n    }\n  }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"login"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"contact\": {\n    \"id\": 3,\n    \"name\": \"Admin\",\n    \"alias\": \"admin\",\n    \"email\": \"01A@CrLEnzWrYdgVBaUzldbG.wutx\",\n    \"is_admin\": true\n  },\n  \"security\": {\n    \"token\": \"9ed937d3911d212eae59300ac6977352\"\n  }\n}"
								},
								{
									"name": "Indicates that the server cannot or will not process the request due to something that is perceived to be\na client error (e.g., malformed request syntax, invalid request message framing)\n",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"security\": {\n    \"credentials\": {\n      \"login\": \"admin\",\n      \"password\": \"centreon\"\n    }\n  }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"login"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 400,\n  \"message\": \"Property 'name' not found\"\n}"
								},
								{
									"name": "Unauthorized",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"security\": {\n    \"credentials\": {\n      \"login\": \"admin\",\n      \"password\": \"centreon\"\n    }\n  }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"login"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 401,\n  \"message\": \"exercitation sit\"\n}"
								},
								{
									"name": "Internal Server Error",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"security\": {\n    \"credentials\": {\n      \"login\": \"admin\",\n      \"password\": \"centreon\"\n    }\n  }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"login"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 500,\n  \"message\": \"Internal Server Error\"\n}"
								}
							]
						}
					]
				},
				{
					"name": "Edge cases",
					"item": [
						{
							"name": "Add new admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Request successful.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"add\",\n  \"object\": \"contact\",\n  \"values\": \"testadmin;testadmin;testadmin@centreon;Centreon!2021;1;1;en_US;local\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Add access to API configuration & realtime to the new admin user",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let parameters = pm.collectionVariables.get(\"list_of_parameters\");\r",
											"let values = pm.collectionVariables.get(\"list_of_values\");\r",
											"let parameters_to_check = pm.collectionVariables.get(\"parameters_to_check\");\r",
											"\r",
											"if (!parameters || parameters.length == 0) {\r",
											"    parameters = [\"timezone\", \"reach_api\", \"reach_api_rt\"];\r",
											"    values = [\"Europe/Paris\", 1, 1];\r",
											"}\r",
											"\r",
											"let current_parameter = parameters.shift();\r",
											"pm.collectionVariables.set(\"current_parameter\", current_parameter);\r",
											"pm.collectionVariables.set(\"list_of_parameters\", parameters);\r",
											"let current_value = values.shift();\r",
											"pm.collectionVariables.set(\"current_value\", current_value);\r",
											"pm.collectionVariables.set(\"list_of_values\", values);\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const parameters = pm.collectionVariables.get(\"list_of_parameters\");\r",
											"\r",
											"pm.test(\"Parameter \" + pm.collectionVariables.get(\"current_parameter\") + \" was updated with \" + pm.collectionVariables.get(\"current_value\"), function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"if (parameters && parameters.length > 0) {\r",
											"    postman.setNextRequest(\"Add access to API configuration & realtime to the new admin user\");\r",
											"} else {\r",
											"    pm.collectionVariables.unset(\"current_parameter\");\r",
											"    pm.collectionVariables.unset(\"current_value\");\r",
											"    pm.collectionVariables.unset(\"list_of_parameters\");\r",
											"    pm.collectionVariables.unset(\"list_of_values\");\r",
											"    postman.setNextRequest(\"Log out from admin user after admin user update\");\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "centreon-auth-token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"action\":\"setparam\",\r\n  \"object\":\"contact\",\r\n  \"values\": \"testadmin;{{current_parameter}};{{current_value}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Log out from admin user after admin user update",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Logout successful.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Displayed message is the one that is expected\", function() {\r",
											"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "X-AUTH-TOKEN",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"logout"
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								},
								"description": "Entry point to delete an existing authentication token."
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logout"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Successful logout\"\n}"
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logout"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 403,\n  \"message\": \"You are not authorized to access this resource\"\n}"
								},
								{
									"name": "Internal Server Error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logout"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 500,\n  \"message\": \"Internal Server Error\"\n}"
								}
							]
						},
						{
							"name": "Login on new admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Login successful\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Account displayed in response corresponds to credentials\", function (){\r",
											"    pm.expect(responseJson.contact.alias).to.eql(\"testadmin\");\r",
											"});\r",
											"\r",
											"pm.collectionVariables.set(\"token\", responseJson.security.token);\r",
											"pm.collectionVariables.set(\"user\", responseJson.contact.alias);\r",
											"pm.collectionVariables.set(\"current_user_email\", responseJson.contact.email);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"security\": {\n    \"credentials\": {\n      \"login\": \"testadmin\",\n      \"password\": \"Centreon!2021\"\n    }\n  }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								},
								"description": "Entry point to retrieve an authentication token."
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"security\": {\n    \"credentials\": {\n      \"login\": \"admin\",\n      \"password\": \"centreon\"\n    }\n  }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"login"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"contact\": {\n    \"id\": 3,\n    \"name\": \"Admin\",\n    \"alias\": \"admin\",\n    \"email\": \"01A@CrLEnzWrYdgVBaUzldbG.wutx\",\n    \"is_admin\": true\n  },\n  \"security\": {\n    \"token\": \"9ed937d3911d212eae59300ac6977352\"\n  }\n}"
								},
								{
									"name": "Indicates that the server cannot or will not process the request due to something that is perceived to be\na client error (e.g., malformed request syntax, invalid request message framing)\n",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"security\": {\n    \"credentials\": {\n      \"login\": \"admin\",\n      \"password\": \"centreon\"\n    }\n  }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"login"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 400,\n  \"message\": \"Property 'name' not found\"\n}"
								},
								{
									"name": "Unauthorized",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"security\": {\n    \"credentials\": {\n      \"login\": \"admin\",\n      \"password\": \"centreon\"\n    }\n  }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"login"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 401,\n  \"message\": \"exercitation sit\"\n}"
								},
								{
									"name": "Internal Server Error",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"security\": {\n    \"credentials\": {\n      \"login\": \"admin\",\n      \"password\": \"centreon\"\n    }\n  }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"login"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 500,\n  \"message\": \"Internal Server Error\"\n}"
								}
							]
						},
						{
							"name": "Check actions on admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Actions on admin user successfully fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"responseJson = pm.response.json();\r",
											"const valuesHosts = Object.values(responseJson.host);\r",
											"const valuesServices = Object.values(responseJson.service);\r",
											"const valuesMetaservices = Object.values(responseJson.metaservice);\r",
											"\r",
											"pm.test(\"Newly created user has access to all available actions.\", function() {\r",
											"    pm.expect(valuesHosts).to.not.include(false);\r",
											"    pm.expect(valuesServices).to.not.include(false);\r",
											"    pm.expect(valuesMetaservices).to.not.include(false);\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "centreon-auth-token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users/acl/actions",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"acl",
										"actions"
									]
								}
							},
							"response": []
						},
						{
							"name": "Log out from new admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Logout successful.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Displayed message is the one that is expected\", function() {\r",
											"    pm.expect(responseJson.message).to.eql(\"Successful logout\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "X-AUTH-TOKEN",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"logout"
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								},
								"description": "Entry point to delete an existing authentication token."
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logout"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Successful logout\"\n}"
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logout"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 403,\n  \"message\": \"You are not authorized to access this resource\"\n}"
								},
								{
									"name": "Internal Server Error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logout"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 500,\n  \"message\": \"Internal Server Error\"\n}"
								}
							]
						},
						{
							"name": "Login on original admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Login successful\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Account displayed in response corresponds to credentials\", function (){\r",
											"    pm.expect(responseJson.contact.alias).to.eql(pm.collectionVariables.get('api_login'));\r",
											"});\r",
											"\r",
											"pm.collectionVariables.set(\"token\", responseJson.security.token);\r",
											"pm.collectionVariables.set(\"user\", responseJson.contact.alias);\r",
											"pm.collectionVariables.set(\"current_user_email\", responseJson.contact.email);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"security\": {\n    \"credentials\": {\n      \"login\": \"{{api_login}}\",\n      \"password\": \"{{api_password}}\"\n    }\n  }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								},
								"description": "Entry point to retrieve an authentication token."
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"security\": {\n    \"credentials\": {\n      \"login\": \"admin\",\n      \"password\": \"centreon\"\n    }\n  }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"login"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"contact\": {\n    \"id\": 3,\n    \"name\": \"Admin\",\n    \"alias\": \"admin\",\n    \"email\": \"01A@CrLEnzWrYdgVBaUzldbG.wutx\",\n    \"is_admin\": true\n  },\n  \"security\": {\n    \"token\": \"9ed937d3911d212eae59300ac6977352\"\n  }\n}"
								},
								{
									"name": "Indicates that the server cannot or will not process the request due to something that is perceived to be\na client error (e.g., malformed request syntax, invalid request message framing)\n",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"security\": {\n    \"credentials\": {\n      \"login\": \"admin\",\n      \"password\": \"centreon\"\n    }\n  }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"login"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 400,\n  \"message\": \"Property 'name' not found\"\n}"
								},
								{
									"name": "Unauthorized",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"security\": {\n    \"credentials\": {\n      \"login\": \"admin\",\n      \"password\": \"centreon\"\n    }\n  }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"login"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 401,\n  \"message\": \"exercitation sit\"\n}"
								},
								{
									"name": "Internal Server Error",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"security\": {\n    \"credentials\": {\n      \"login\": \"admin\",\n      \"password\": \"centreon\"\n    }\n  }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"login"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 500,\n  \"message\": \"Internal Server Error\"\n}"
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "22 - Contact group management",
			"item": [
				{
					"name": "List all contact groups",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"List of contact groups succesfully fetched.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"responseJson = pm.response.json();\r",
									"pm.test(\"Only the default templates are listed: Guest and Supervisors.\", function() {\r",
									"    pm.expect(responseJson.meta.total).to.eql(2);\r",
									"    pm.expect(responseJson.result[0].name).to.eql(\"Guest\");\r",
									"    pm.expect(responseJson.result[1].name).to.eql(\"Supervisors\");\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/configuration/contacts/groups",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"contacts",
								"groups"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add new non-admin dummy users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const users = pm.collectionVariables.get(\"dummy_user_names\");\r",
									"\r",
									"pm.test(\"User \" + pm.collectionVariables.get(\"currentUser\") + \" has successfully been created.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"if (users && users.length > 0) {\r",
									"    postman.setNextRequest(\"Add new non-admin dummy users\");\r",
									"} else {\r",
									"    pm.collectionVariables.unset(\"currentUser\");\r",
									"    pm.collectionVariables.unset(\"dummy_user_names\");\r",
									"    pm.collectionVariables.unset(\"currentLogin\");\r",
									"    pm.collectionVariables.unset(\"dummy_user_logins\");\r",
									"    postman.setNextRequest(\"List all users after dummy users creation\");\r",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let dummy_user_names = pm.collectionVariables.get(\"dummy_user_names\");\r",
									"let dummy_user_logins = pm.collectionVariables.get(\"dummy_user_logins\");\r",
									"\r",
									"if(!dummy_user_names || dummy_user_names.length == 0) {\r",
									"    dummy_user_names = [\"user01\", \"user02\", \"user03\", \"user04\", \"user05\"];\r",
									"    users_created = [];\r",
									"    dummy_user_logins = [\"user01\", \"user02\", \"user03\", \"user04\", \"user05\"];\r",
									"}\r",
									"\r",
									"let currentUser = dummy_user_names.shift();\r",
									"pm.collectionVariables.set(\"currentUser\", currentUser);\r",
									"pm.collectionVariables.set(\"dummy_user_names\", dummy_user_names);\r",
									"users_created.push(currentUser);\r",
									"pm.collectionVariables.set(\"users_created\", users_created);\r",
									"\r",
									"let currentLogin = dummy_user_logins.shift();\r",
									"pm.collectionVariables.set(\"currentLogin\", currentLogin);\r",
									"pm.collectionVariables.set(\"dummy_user_logins\", dummy_user_logins);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "centreon-auth-token",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"action\": \"add\",\n  \"object\": \"contact\",\n  \"values\": \"{{currentUser}};{{currentLogin}};dummymail@centreon.com;Centreon!2021;0;0;en_US;local\"\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
							"protocol": "{{protocol}}",
							"host": [
								"{{server}}"
							],
							"path": [
								"centreon",
								"api",
								"index.php"
							],
							"query": [
								{
									"key": "action",
									"value": "action"
								},
								{
									"key": "object",
									"value": "centreon_clapi"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List all users after dummy users creation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"List of users successfully fetched.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var users_found = pm.collectionVariables.get(\"users_found\");\r",
									"if (!users_found) {users_found = 0};\r",
									"\r",
									"const responseJson = pm.response.json();\r",
									"var page_number = pm.collectionVariables.get(\"page_number\");\r",
									"var users_created = pm.collectionVariables.get(\"users_created\");\r",
									"\r",
									"for (var i = 0; i < responseJson.result.length; i++) {\r",
									"    for (var j = 0; j < users_created.length; j++) {\r",
									"        if(responseJson.result[i].name == users_created[j]) {\r",
									"            users_found++;\r",
									"        }\r",
									"    }\r",
									"}\r",
									"\r",
									"pm.collectionVariables.set(\"users_found\", users_found);\r",
									"if (users_found == users_created.length) {\r",
									"    pm.test(\"All \" + pm.collectionVariables.get(\"users_found\") + \" dummy users were found\", function() {\r",
									"        pm.expect(users_found).to.eql(users_created.length);\r",
									"        pm.collectionVariables.unset(\"page_number\");\r",
									"        pm.collectionVariables.unset(\"users_found\");\r",
									"        postman.setNextRequest(\"Add a new contact group\");\r",
									"    })\r",
									"} else {\r",
									"    if (page_number == Math.floor(responseJson.meta.total/responseJson.meta.limit) + 1) {\r",
									"        pm.test(\"Only \" + pm.collectionVariables.get(\"users_found\") + \" dummy users have been found.\", function() {\r",
									"            postman.setNextRequest(null);\r",
									"            pm.expect(true).to.eql(false);\r",
									"        })\r",
									"    } else {\r",
									"        page_number++;\r",
									"        pm.collectionVariables.set(\"page_number\", page_number);\r",
									"        postman.setNextRequest(\"List all users after dummy users creation\");\r",
									"    }\r",
									"}\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"if(!pm.collectionVariables.get(\"page_number\")) {\r",
									"    pm.collectionVariables.set(\"page_number\", 1);\r",
									"}\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/configuration/users?page={{page_number}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"users"
							],
							"query": [
								{
									"key": "page",
									"value": "{{page_number}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Add a new contact group",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Contact group \" + pm.collectionVariables.get(\"contactGroupName\") + \" has successfully been created.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"contactGroupName\", \"CG-Test-API\");\r",
									"pm.collectionVariables.set(\"contactGroupAlias\", \"Contact Group Test API\")"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "centreon-auth-token",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"action\": \"add\",\n  \"object\": \"cg\",\n  \"values\": \"{{contactGroupName}};{{contactGroupAlias}}\"\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
							"protocol": "{{protocol}}",
							"host": [
								"{{server}}"
							],
							"path": [
								"centreon",
								"api",
								"index.php"
							],
							"query": [
								{
									"key": "action",
									"value": "action"
								},
								{
									"key": "object",
									"value": "centreon_clapi"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Add dummy users to contact group",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.collectionVariables.unset(\"list_of_users_to_add\");\r",
									"\r",
									"pm.test(\"Users successfully added to the contact group.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let users_created = pm.collectionVariables.get(\"users_created\");\r",
									"if (users_created || users_created.length != 0) {\r",
									"    var final_parameter = \"\";\r",
									"    for(var i = 0; i < users_created.length; i++) {\r",
									"        final_parameter = final_parameter.concat('|', users_created[i]);\r",
									"    }\r",
									"    final_parameter = final_parameter.concat('|', pm.collectionVariables.get(\"testuser_login\"));\r",
									"}\r",
									"\r",
									"pm.collectionVariables.set(\"list_of_users_to_add\", final_parameter.substring(1));\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "centreon-auth-token",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"action\": \"setcontact\",\n  \"object\": \"cg\",\n  \"values\": \"{{contactGroupName}};{{list_of_users_to_add}}\"\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
							"protocol": "{{protocol}}",
							"host": [
								"{{server}}"
							],
							"path": [
								"centreon",
								"api",
								"index.php"
							],
							"query": [
								{
									"key": "action",
									"value": "action"
								},
								{
									"key": "object",
									"value": "centreon_clapi"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get list of users in contact group",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"A list of users in the contact group has been fetched.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const responseJson = pm.response.json();\r",
									"const list_of_users = pm.collectionVariables.get(\"users_created\");\r",
									"list_of_users.push(pm.collectionVariables.get(\"testuser_login\"));\r",
									"pm.test(\"It is composed of \" + list_of_users.length + \" users, plus the testuser created in the contact management section.\", function() {\r",
									"    pm.expect(responseJson.result.length).to.eql(list_of_users.length);\r",
									"})\r",
									"\r",
									"for (var i = 0; i < responseJson.result.length; i++) {\r",
									"    for (var j = 0; j < list_of_users.length; j++) {\r",
									"        if(responseJson.result[i].name == list_of_users[j]) {\r",
									"            pm.test(\"User \" + responseJson.result[i].name + \" has been found.\"), function(){\r",
									"                pm.expect(true).to.eql(true);\r",
									"            }\r",
									"        }\r",
									"    }\r",
									"}\r",
									"\r",
									"pm.collectionVariables.set(\"userToDisableName\", responseJson.result[4].name);\r",
									"pm.collectionVariables.set(\"userToDisableId\", parseInt(responseJson.result[4].id));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "centreon-auth-token",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"action\": \"getcontact\",\n  \"object\": \"cg\",\n  \"values\": \"{{contactGroupName}}\"\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
							"protocol": "{{protocol}}",
							"host": [
								"{{server}}"
							],
							"path": [
								"centreon",
								"api",
								"index.php"
							],
							"query": [
								{
									"key": "action",
									"value": "action"
								},
								{
									"key": "object",
									"value": "centreon_clapi"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Disable user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request successful.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "CENTREON-AUTH-TOKEN",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"action\": \"disable\",\n  \"object\": \"contact\",\n  \"values\": \"{{userToDisableName}}\"\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
							"protocol": "{{protocol}}",
							"host": [
								"{{server}}"
							],
							"path": [
								"centreon",
								"api",
								"index.php"
							],
							"query": [
								{
									"key": "action",
									"value": "action"
								},
								{
									"key": "object",
									"value": "centreon_clapi"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Show contacts",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"A list of hosts has been fetched.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const responseJson = pm.response.json();\r",
									"for (var i = 0; i < responseJson.result.length; i++) {\r",
									"    if(responseJson.result[i].name == pm.collectionVariables.get(\"userToDisableName\") && parseInt(responseJson.result[i].id) == pm.collectionVariables.get(\"userToDisableId\")) {\r",
									"        pm.test(\"The selected user can be found, but has been disabled.\", function() {\r",
									"            pm.expect(parseInt(responseJson.result[i].activate)).to.eql(0);\r",
									"        })\r",
									"    }\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "CENTREON-AUTH-TOKEN",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"action\": \"show\",\n  \"object\": \"contact\"\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
							"protocol": "{{protocol}}",
							"host": [
								"{{server}}"
							],
							"path": [
								"centreon",
								"api",
								"index.php"
							],
							"query": [
								{
									"key": "action",
									"value": "action"
								},
								{
									"key": "object",
									"value": "centreon_clapi"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Enable previously disabled user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request successful.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "CENTREON-AUTH-TOKEN",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"action\": \"enable\",\n  \"object\": \"contact\",\n  \"values\": \"{{userToDisableName}}\"\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
							"protocol": "{{protocol}}",
							"host": [
								"{{server}}"
							],
							"path": [
								"centreon",
								"api",
								"index.php"
							],
							"query": [
								{
									"key": "action",
									"value": "action"
								},
								{
									"key": "object",
									"value": "centreon_clapi"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Disable contact group",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request successful.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "CENTREON-AUTH-TOKEN",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"action\": \"disable\",\n  \"object\": \"CG\",\n  \"values\": \"{{contactGroupName}}\"\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
							"protocol": "{{protocol}}",
							"host": [
								"{{server}}"
							],
							"path": [
								"centreon",
								"api",
								"index.php"
							],
							"query": [
								{
									"key": "action",
									"value": "action"
								},
								{
									"key": "object",
									"value": "centreon_clapi"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get list of users in contact group",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"A list of users in the contact group has been fetched.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const responseJson = pm.response.json();\r",
									"const list_of_users = pm.collectionVariables.get(\"users_created\");\r",
									"list_of_users.push(pm.collectionVariables.get(\"testuser_login\"));\r",
									"pm.test(\"It is composed of \" + list_of_users.length + \" users, plus the testuser created in the contact management section.\", function() {\r",
									"    pm.expect(responseJson.result.length).to.eql(list_of_users.length);\r",
									"})\r",
									"\r",
									"for (var i = 0; i < responseJson.result.length; i++) {\r",
									"    for (var j = 0; j < list_of_users.length; j++) {\r",
									"        if(responseJson.result[i].name == list_of_users[j]) {\r",
									"            pm.test(\"User \" + responseJson.result[i].name + \" has been found.\"), function(){\r",
									"                pm.expect(true).to.eql(true);\r",
									"            }\r",
									"        }\r",
									"    }\r",
									"}\r",
									"\r",
									"pm.collectionVariables.set(\"userToDisableName\", responseJson.result[4].name);\r",
									"pm.collectionVariables.set(\"userToDisableId\", parseInt(responseJson.result[4].id));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "centreon-auth-token",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"action\": \"getcontact\",\n  \"object\": \"cg\",\n  \"values\": \"{{contactGroupName}}\"\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
							"protocol": "{{protocol}}",
							"host": [
								"{{server}}"
							],
							"path": [
								"centreon",
								"api",
								"index.php"
							],
							"query": [
								{
									"key": "action",
									"value": "action"
								},
								{
									"key": "object",
									"value": "centreon_clapi"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Show contact groups",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "CENTREON-AUTH-TOKEN",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"action\": \"show\",\n  \"object\": \"cg\"\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
							"protocol": "{{protocol}}",
							"host": [
								"{{server}}"
							],
							"path": [
								"centreon",
								"api",
								"index.php"
							],
							"query": [
								{
									"key": "action",
									"value": "action"
								},
								{
									"key": "object",
									"value": "centreon_clapi"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "30 - Host group management",
			"item": [
				{
					"name": "Critical Path",
					"item": [
						{
							"name": "Login with admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Login successful\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Account displayed in response corresponds to credentials\", function (){\r",
											"    pm.expect(responseJson.contact.alias).to.eql(pm.collectionVariables.get('api_login'));\r",
											"});\r",
											"\r",
											"pm.collectionVariables.set(\"token\", responseJson.security.token);\r",
											"pm.collectionVariables.set(\"user\", responseJson.contact.alias);\r",
											"pm.collectionVariables.set(\"current_user_id\", responseJson.contact.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login}}\",\r\n      \"password\": \"{{api_password}}\"\r\n    }\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "List all host groups before host group creation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"List of host groups successfully fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"\r",
											"pm.collectionVariables.set(\"host_groups_before_creation\", responseJson.meta.total);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/configuration/hosts/groups",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configuration",
										"hosts",
										"groups"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add host group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Request successful.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"let value = pm.collectionVariables.get(\"count_host_group\");\r",
											"if (!value) {value = 0;}\r",
											"value++;\r",
											"pm.collectionVariables.set(\"count_host_group\", value);\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"host_group_name\", \"Host Group 01\");\r",
											"pm.collectionVariables.set(\"host_group_alias\", \"Host Group 01 Alias\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"add\",\n  \"object\": \"hg\",\n  \"values\": \"{{host_group_name}};{{host_group_alias}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "List all host groups after host group creation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"List of host groups successfully fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"The correct number of host groups has been added.\", function() {\r",
											"    pm.expect(responseJson.meta.total).to.eql(pm.collectionVariables.get(\"host_groups_before_creation\") + pm.collectionVariables.get(\"count_host_group\"));\r",
											"    pm.collectionVariables.set(\"count_host_group\", responseJson.meta.total);\r",
											"    pm.collectionVariables.unset(\"host_groups_before_creation\");\r",
											"}) \r",
											"\r",
											"try {\r",
											"        for (var i = 0; i < responseJson.meta.total; i++) {\r",
											"        if (pm.collectionVariables.get(\"host_group_name\") == responseJson.result[i].name)\r",
											"        {\r",
											"            pm.test(\"Newly created host group is registered in the list.\", function() {\r",
											"                pm.expect(pm.collectionVariables.get(\"host_group_name\")).to.eql(responseJson.result[i].name);\r",
											"                pm.expect(pm.collectionVariables.get(\"host_group_alias\")).to.eql(responseJson.result[i].alias);\r",
											"            });\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"    if (i == responseJson.meta.total)\r",
											"        pm.test(\"Added host group was found\", function() {\r",
											"            pm.expect(true).to.eql(false);\r",
											"        });\r",
											"}\r",
											"catch (e) {}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/configuration/hosts/groups",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configuration",
										"hosts",
										"groups"
									]
								},
								"description": "Return all host group configurations.\n\nThe available parameters to **search** / **sort_by** are:\n\n* id\n* name\n* alias\n* is_activated\n"
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/configuration/hosts/groups",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"configuration",
												"hosts",
												"groups"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"result\": [\n    {\n      \"id\": 1,\n      \"name\": \"MySQL-Servers\",\n      \"alias\": \"All MySQL Servers\",\n      \"notes\": \"my notes\",\n      \"notes_url\": \"notes url\",\n      \"action_url\": \"action url\",\n      \"icon\": {\n        \"id\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"name\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"path\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"comment\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"icon_map\": {\n        \"id\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"name\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"path\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"comment\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"geo_coords\": \"48.51,2.20\",\n      \"rrd\": 2,\n      \"comment\": \"incididunt sint quis\",\n      \"is_activated\": false\n    },\n    {\n      \"id\": 1,\n      \"name\": \"MySQL-Servers\",\n      \"alias\": \"All MySQL Servers\",\n      \"notes\": \"my notes\",\n      \"notes_url\": \"notes url\",\n      \"action_url\": \"action url\",\n      \"icon\": {\n        \"id\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"name\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"path\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"comment\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"icon_map\": {\n        \"id\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"name\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"path\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"comment\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"geo_coords\": \"48.51,2.20\",\n      \"rrd\": 2,\n      \"comment\": \"voluptate eu\",\n      \"is_activated\": true\n    }\n  ],\n  \"meta\": {\n    \"page\": 1,\n    \"limit\": 10,\n    \"search\": {},\n    \"sort_by\": {},\n    \"total\": 1\n  }\n}"
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/configuration/hosts/groups",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"configuration",
												"hosts",
												"groups"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 403,\n  \"message\": \"You are not authorized to access this resource\"\n}"
								},
								{
									"name": "Internal Server Error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/configuration/hosts/groups",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"configuration",
												"hosts",
												"groups"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 500,\n  \"message\": \"Internal Server Error\"\n}"
								}
							]
						},
						{
							"name": "Set parameters for newly created host group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const parameters = pm.collectionVariables.get(\"list_of_parameters\");\r",
											"\r",
											"pm.test(\"Parameter \" + pm.collectionVariables.get(\"current_parameter\") + \" was updated with \" + pm.collectionVariables.get(\"current_value\"), function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"if (pm.collectionVariables.get(\"name\") && pm.collectionVariables.get(\"name\") != pm.collectionVariables.get(\"host_group_name\")) {\r",
											"    pm.collectionVariables.set(\"host_group_name\", pm.collectionVariables.get(\"name\"));\r",
											"}\r",
											"\r",
											"if (pm.collectionVariables.get(\"alias\") && pm.collectionVariables.get(\"alias\") != pm.collectionVariables.get(\"host_group_alias\")) {\r",
											"    pm.collectionVariables.set(\"host_group_alias\", pm.collectionVariables.get(\"alias\"));\r",
											"}\r",
											"\r",
											"if (parameters && parameters.length > 0) {\r",
											"    postman.setNextRequest(\"Set parameters for newly created host group\");\r",
											"} else {\r",
											"    pm.collectionVariables.unset(\"current_parameter\");\r",
											"    pm.collectionVariables.unset(\"current_value\");\r",
											"    pm.collectionVariables.unset(\"list_of_parameters\");\r",
											"    pm.collectionVariables.unset(\"list_of_values\");\r",
											"    postman.setNextRequest(\"List all host groups with updated parameters\");\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let parameters = pm.collectionVariables.get(\"list_of_parameters\");\r",
											"let values = pm.collectionVariables.get(\"list_of_values\");\r",
											"let parameters_to_check = pm.collectionVariables.get(\"parameters_to_check\");\r",
											"\r",
											"if (!parameters || parameters.length == 0) {\r",
											"    parameters = [\"alias\", \"activate\", \"notes\", \"notes_url\", \"action_url\", \"icon_image\", \"map_icon_image\", \"comment\"];\r",
											"    values = [\"Host Group 01 Alias v2\", 1, \"my_notes\",\"my_note_url\",\"my_action_url\",\"ppm/applications-monitoring-centreon-poller-centreon-128-2.png\",\"ppm/applications-monitoring-centreon-poller-centreon-128-2.png\", \"my_comment\"];\r",
											"    parameters_to_check = [];\r",
											"}\r",
											"\r",
											"let current_parameter = parameters.shift();\r",
											"pm.collectionVariables.set(\"current_parameter\", current_parameter);\r",
											"pm.collectionVariables.set(\"list_of_parameters\", parameters);\r",
											"let current_value = values.shift();\r",
											"pm.collectionVariables.set(\"current_value\", current_value);\r",
											"pm.collectionVariables.set(\"list_of_values\", values);\r",
											"\r",
											"pm.collectionVariables.set(current_parameter, current_value);\r",
											"\r",
											"parameters_to_check.push(current_parameter);\r",
											"pm.collectionVariables.set(\"parameters_to_check\", parameters_to_check);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"setparam\",\n  \"object\": \"hg\",\n  \"values\": \"{{host_group_name}};{{current_parameter}};{{current_value}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "List all host groups with updated parameters",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"List of host groups successfully fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"var parameters_to_check = pm.collectionVariables.get(\"parameters_to_check\");\r",
											"\r",
											"if(parameters_to_check) {\r",
											"    for(let l = 0; l < responseJson.result.length; l++) {\r",
											"        if(responseJson.result[l].name == pm.collectionVariables.get(\"host_group_name\")) {\r",
											"            const keys = Object.keys(responseJson.result[l]);\r",
											"            const values = Object.values(responseJson.result[l]);\r",
											"            for(let i = 0; i < parameters_to_check.length; i++) {\r",
											"                var j = keys.indexOf(parameters_to_check[i]);\r",
											"                if(j != -1) {\r",
											"                    pm.test(\"The value \" + pm.collectionVariables.get(parameters_to_check[i])  + \" was found for \" + pm.collectionVariables.get(\"host_group_name\") + \"'s parameter \" + parameters_to_check[i], function() {pm.expect(pm.collectionVariables.get(parameters_to_check[i])).to.eql(values[j]);}) \r",
											"                } else {\r",
											"                    switch (parameters_to_check[i]) {\r",
											"                        case 'icon_image':\r",
											"                            pm.test(\"The value \" + pm.collectionVariables.get(parameters_to_check[i]) + \" was found for \" + pm.collectionVariables.get(\"host_group_name\") + \"'s parameter \" + parameters_to_check[i], function() {pm.expect(responseJson.result[l].icon.path).to.contain(pm.collectionVariables.get(parameters_to_check[i]))})\r",
											"                            break;\r",
											"                        case 'map_icon_image':\r",
											"                            pm.test(\"The value \" + pm.collectionVariables.get(parameters_to_check[i]) + \" was found for \" + pm.collectionVariables.get(\"host_group_name\") + \"'s parameter \" + parameters_to_check[i], function() {pm.expect(responseJson.result[l].icon_map.path).to.contain(pm.collectionVariables.get(parameters_to_check[i]))})\r",
											"                            break;                       \r",
											"                    }\r",
											"                }\r",
											"            pm.collectionVariables.unset(parameters_to_check[i]);\r",
											"            }\r",
											"        pm.collectionVariables.unset(\"parameters_to_check\");           \r",
											"        }\r",
											"    }\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let parameters_to_check = pm.collectionVariables.get(\"parameters_to_check\");\r",
											"\r",
											"if(parameters_to_check) {\r",
											"    for (let i = 0; i < parameters_to_check.length; i++) {\r",
											"        switch (parameters_to_check[i]) {\r",
											"            case 'activate': \r",
											"                pm.collectionVariables.set(\"is_activated\", pm.collectionVariables.get(\"activate\"));\r",
											"                pm.collectionVariables.unset(\"activate\");\r",
											"                parameters_to_check[i] = \"is_activated\";\r",
											"                break;\r",
											"        }\r",
											"    }\r",
											"}\r",
											"\r",
											"\r",
											"pm.collectionVariables.set(\"parameters_to_check\", parameters_to_check);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/configuration/hosts/groups",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configuration",
										"hosts",
										"groups"
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								},
								"description": "Return all host group configurations.\n\nThe available parameters to **search** / **sort_by** are:\n\n* id\n* name\n* alias\n* is_activated\n"
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/configuration/hosts/groups",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"configuration",
												"hosts",
												"groups"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"result\": [\n    {\n      \"id\": 1,\n      \"name\": \"MySQL-Servers\",\n      \"alias\": \"All MySQL Servers\",\n      \"notes\": \"my notes\",\n      \"notes_url\": \"notes url\",\n      \"action_url\": \"action url\",\n      \"icon\": {\n        \"id\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"name\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"path\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"comment\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"icon_map\": {\n        \"id\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"name\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"path\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"comment\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"geo_coords\": \"48.51,2.20\",\n      \"rrd\": 2,\n      \"comment\": \"incididunt sint quis\",\n      \"is_activated\": false\n    },\n    {\n      \"id\": 1,\n      \"name\": \"MySQL-Servers\",\n      \"alias\": \"All MySQL Servers\",\n      \"notes\": \"my notes\",\n      \"notes_url\": \"notes url\",\n      \"action_url\": \"action url\",\n      \"icon\": {\n        \"id\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"name\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"path\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"comment\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"icon_map\": {\n        \"id\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"name\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"path\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"comment\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"geo_coords\": \"48.51,2.20\",\n      \"rrd\": 2,\n      \"comment\": \"voluptate eu\",\n      \"is_activated\": true\n    }\n  ],\n  \"meta\": {\n    \"page\": 1,\n    \"limit\": 10,\n    \"search\": {},\n    \"sort_by\": {},\n    \"total\": 1\n  }\n}"
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/configuration/hosts/groups",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"configuration",
												"hosts",
												"groups"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 403,\n  \"message\": \"You are not authorized to access this resource\"\n}"
								},
								{
									"name": "Internal Server Error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/configuration/hosts/groups",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"configuration",
												"hosts",
												"groups"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 500,\n  \"message\": \"Internal Server Error\"\n}"
								}
							]
						}
					]
				},
				{
					"name": "Edge cases",
					"item": [
						{
							"name": "Add duplicate host group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 409\", function () {\r",
											"    pm.response.to.have.status(409);\r",
											"});\r",
											"\r",
											"pm.test(\"Displayed error message is the one that's expected\", function() {\r",
											"    pm.expect(pm.response.text()).to.include(\"Object already exists\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"add\",\n  \"object\": \"hg\",\n  \"values\": \"{{host_group_name}};{{host_group_alias}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "List all host groups after duplicate host group creation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"if(!pm.test(\"A duplicate host group has not been added.\", function() {\r",
											"    pm.expect(pm.collectionVariables.get(\"count_host_group\")).to.eql(responseJson.meta.total)\r",
											"})) {\r",
											"    postman.setNextRequest(\"Delete duplicate host group\");\r",
											"} else {\r",
											"    postman.setNextRequest(\"Add nameless host group\");\r",
											"}\r",
											"\r",
											"try {\r",
											"    var i = 0;\r",
											"        while (i < responseJson.meta.total) {\r",
											"        if (pm.collectionVariables.get(\"host_group_name\") == responseJson.result[i].name)\r",
											"        {\r",
											"            pm.test(\"Body contains added host group's name\", function() {\r",
											"                pm.expect(pm.collectionVariables.get(\"host_group_name\")).to.eql(responseJson.result[i].name);\r",
											"            });\r",
											"            pm.test(\"Body contains added host group's alias\", function() {\r",
											"                pm.expect(pm.collectionVariables.get(\"host_group_alias\")).to.eql(responseJson.result[i].alias);\r",
											"            });\r",
											"            break;\r",
											"        }\r",
											"        i++;\r",
											"    }\r",
											"    if (i == responseJson.meta.total)\r",
											"        pm.test(\"host_group_name was found\", function() {\r",
											"            false;\r",
											"        });\r",
											"}\r",
											"catch (e) {}\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/configuration/hosts/groups",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configuration",
										"hosts",
										"groups"
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								},
								"description": "Return all host group configurations.\n\nThe available parameters to **search** / **sort_by** are:\n\n* id\n* name\n* alias\n* is_activated\n"
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/configuration/hosts/groups",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"configuration",
												"hosts",
												"groups"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"result\": [\n    {\n      \"id\": 1,\n      \"name\": \"MySQL-Servers\",\n      \"alias\": \"All MySQL Servers\",\n      \"notes\": \"my notes\",\n      \"notes_url\": \"notes url\",\n      \"action_url\": \"action url\",\n      \"icon\": {\n        \"id\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"name\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"path\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"comment\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"icon_map\": {\n        \"id\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"name\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"path\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"comment\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"geo_coords\": \"48.51,2.20\",\n      \"rrd\": 2,\n      \"comment\": \"incididunt sint quis\",\n      \"is_activated\": false\n    },\n    {\n      \"id\": 1,\n      \"name\": \"MySQL-Servers\",\n      \"alias\": \"All MySQL Servers\",\n      \"notes\": \"my notes\",\n      \"notes_url\": \"notes url\",\n      \"action_url\": \"action url\",\n      \"icon\": {\n        \"id\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"name\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"path\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"comment\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"icon_map\": {\n        \"id\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"name\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"path\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"comment\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"geo_coords\": \"48.51,2.20\",\n      \"rrd\": 2,\n      \"comment\": \"voluptate eu\",\n      \"is_activated\": true\n    }\n  ],\n  \"meta\": {\n    \"page\": 1,\n    \"limit\": 10,\n    \"search\": {},\n    \"sort_by\": {},\n    \"total\": 1\n  }\n}"
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/configuration/hosts/groups",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"configuration",
												"hosts",
												"groups"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 403,\n  \"message\": \"You are not authorized to access this resource\"\n}"
								},
								{
									"name": "Internal Server Error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/configuration/hosts/groups",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"configuration",
												"hosts",
												"groups"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 500,\n  \"message\": \"Internal Server Error\"\n}"
								}
							]
						},
						{
							"name": "Delete duplicate host group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"del\",\n  \"object\": \"hg\",\n  \"values\": \"{{host_group_name}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Add nameless host group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Nameless host has not been created.\", function() {\r",
											"    pm.response.to.have.status(500);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"add\",\n  \"object\": \"hg\",\n  \"values\": \";nameless_host\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "List all host groups after nameless host group creation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"try {\r",
											"    var flag = 0;\r",
											"    var j = 0;\r",
											"    while (j < responseJson.result.length) {\r",
											"        if(responseJson.result[j].name == \"\") {\r",
											"            pm.test(\"A nameless host group has not been added.\", function() {false;});\r",
											"            flag = 1;\r",
											"        }\r",
											"    j++;\r",
											"    }\r",
											"\r",
											"    if (flag == 1) {\r",
											"        postman.setNextRequest(\"Delete nameless host group\");\r",
											"    } else {\r",
											"        postman.setNextRequest(null);\r",
											"    }\r",
											"}\r",
											"catch (e) {}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/configuration/hosts/groups",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configuration",
										"hosts",
										"groups"
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								},
								"description": "Return all host group configurations.\n\nThe available parameters to **search** / **sort_by** are:\n\n* id\n* name\n* alias\n* is_activated\n"
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/configuration/hosts/groups",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"configuration",
												"hosts",
												"groups"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"result\": [\n    {\n      \"id\": 1,\n      \"name\": \"MySQL-Servers\",\n      \"alias\": \"All MySQL Servers\",\n      \"notes\": \"my notes\",\n      \"notes_url\": \"notes url\",\n      \"action_url\": \"action url\",\n      \"icon\": {\n        \"id\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"name\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"path\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"comment\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"icon_map\": {\n        \"id\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"name\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"path\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"comment\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"geo_coords\": \"48.51,2.20\",\n      \"rrd\": 2,\n      \"comment\": \"incididunt sint quis\",\n      \"is_activated\": false\n    },\n    {\n      \"id\": 1,\n      \"name\": \"MySQL-Servers\",\n      \"alias\": \"All MySQL Servers\",\n      \"notes\": \"my notes\",\n      \"notes_url\": \"notes url\",\n      \"action_url\": \"action url\",\n      \"icon\": {\n        \"id\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"name\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"path\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"comment\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"icon_map\": {\n        \"id\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"name\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"path\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"comment\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"geo_coords\": \"48.51,2.20\",\n      \"rrd\": 2,\n      \"comment\": \"voluptate eu\",\n      \"is_activated\": true\n    }\n  ],\n  \"meta\": {\n    \"page\": 1,\n    \"limit\": 10,\n    \"search\": {},\n    \"sort_by\": {},\n    \"total\": 1\n  }\n}"
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/configuration/hosts/groups",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"configuration",
												"hosts",
												"groups"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 403,\n  \"message\": \"You are not authorized to access this resource\"\n}"
								},
								{
									"name": "Internal Server Error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/configuration/hosts/groups",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"configuration",
												"hosts",
												"groups"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 500,\n  \"message\": \"Internal Server Error\"\n}"
								}
							]
						},
						{
							"name": "Delete nameless host group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"postman.setNextRequest(\"List all host groups after nameless host group deletion\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"del\",\n  \"object\": \"hg\",\n  \"values\": \"\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "List all host groups after nameless host group deletion",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"The nameless host group has been deleted.\", function() {\r",
											"    pm.expect(pm.collectionVariables.get(\"count_host_group\")).to.eql(responseJson.meta.total);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/configuration/hosts/groups",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configuration",
										"hosts",
										"groups"
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								},
								"description": "Return all host group configurations.\n\nThe available parameters to **search** / **sort_by** are:\n\n* id\n* name\n* alias\n* is_activated\n"
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/configuration/hosts/groups",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"configuration",
												"hosts",
												"groups"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"result\": [\n    {\n      \"id\": 1,\n      \"name\": \"MySQL-Servers\",\n      \"alias\": \"All MySQL Servers\",\n      \"notes\": \"my notes\",\n      \"notes_url\": \"notes url\",\n      \"action_url\": \"action url\",\n      \"icon\": {\n        \"id\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"name\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"path\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"comment\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"icon_map\": {\n        \"id\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"name\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"path\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"comment\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"geo_coords\": \"48.51,2.20\",\n      \"rrd\": 2,\n      \"comment\": \"incididunt sint quis\",\n      \"is_activated\": false\n    },\n    {\n      \"id\": 1,\n      \"name\": \"MySQL-Servers\",\n      \"alias\": \"All MySQL Servers\",\n      \"notes\": \"my notes\",\n      \"notes_url\": \"notes url\",\n      \"action_url\": \"action url\",\n      \"icon\": {\n        \"id\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"name\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"path\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"comment\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"icon_map\": {\n        \"id\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"name\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"path\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"comment\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"geo_coords\": \"48.51,2.20\",\n      \"rrd\": 2,\n      \"comment\": \"voluptate eu\",\n      \"is_activated\": true\n    }\n  ],\n  \"meta\": {\n    \"page\": 1,\n    \"limit\": 10,\n    \"search\": {},\n    \"sort_by\": {},\n    \"total\": 1\n  }\n}"
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/configuration/hosts/groups",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"configuration",
												"hosts",
												"groups"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 403,\n  \"message\": \"You are not authorized to access this resource\"\n}"
								},
								{
									"name": "Internal Server Error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/configuration/hosts/groups",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"configuration",
												"hosts",
												"groups"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 500,\n  \"message\": \"Internal Server Error\"\n}"
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "31 - Host template management",
			"item": [
				{
					"name": "List all host templates",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"List of host templates successfully fetched.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const responseJson = pm.response.json();"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/configuration/hosts/templates",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"configuration",
								"hosts",
								"templates"
							]
						}
					},
					"response": []
				},
				{
					"name": "[CLAPI] List host templates",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"List of service groups successfully fetched.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "centreon-auth-token",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"action\": \"show\",\n  \"object\": \"htpl\"\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
							"protocol": "{{protocol}}",
							"host": [
								"{{server}}"
							],
							"path": [
								"centreon",
								"api",
								"index.php"
							],
							"query": [
								{
									"key": "action",
									"value": "action"
								},
								{
									"key": "object",
									"value": "centreon_clapi"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create a new host template",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "centreon-auth-token",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"action\": \"add\",\n  \"object\": \"htpl\",\n  \"values\": \"test-api-active-host;\"\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
							"protocol": "{{protocol}}",
							"host": [
								"{{server}}"
							],
							"path": [
								"centreon",
								"api",
								"index.php"
							],
							"query": [
								{
									"key": "action",
									"value": "action"
								},
								{
									"key": "object",
									"value": "centreon_clapi"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "32 - Host management",
			"item": [
				{
					"name": "Critical Path",
					"item": [
						{
							"name": "Login on admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Login successful\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Account displayed in response corresponds to credentials\", function (){\r",
											"    pm.expect(responseJson.contact.alias).to.eql(pm.collectionVariables.get('api_login'));\r",
											"});\r",
											"\r",
											"pm.collectionVariables.set(\"token\", responseJson.security.token);\r",
											"pm.collectionVariables.set(\"user\", responseJson.contact.alias);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"security\": {\n    \"credentials\": {\n      \"login\": \"{{api_login}}\",\n      \"password\": \"{{api_password}}\"\n    }\n  }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								},
								"description": "Entry point to retrieve an authentication token."
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"security\": {\n    \"credentials\": {\n      \"login\": \"admin\",\n      \"password\": \"centreon\"\n    }\n  }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"login"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"contact\": {\n    \"id\": 3,\n    \"name\": \"Admin\",\n    \"alias\": \"admin\",\n    \"email\": \"01A@CrLEnzWrYdgVBaUzldbG.wutx\",\n    \"is_admin\": true\n  },\n  \"security\": {\n    \"token\": \"9ed937d3911d212eae59300ac6977352\"\n  }\n}"
								},
								{
									"name": "Indicates that the server cannot or will not process the request due to something that is perceived to be\na client error (e.g., malformed request syntax, invalid request message framing)\n",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"security\": {\n    \"credentials\": {\n      \"login\": \"admin\",\n      \"password\": \"centreon\"\n    }\n  }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"login"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 400,\n  \"message\": \"Property 'name' not found\"\n}"
								},
								{
									"name": "Unauthorized",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"security\": {\n    \"credentials\": {\n      \"login\": \"admin\",\n      \"password\": \"centreon\"\n    }\n  }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"login"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 401,\n  \"message\": \"exercitation sit\"\n}"
								},
								{
									"name": "Internal Server Error",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"security\": {\n    \"credentials\": {\n      \"login\": \"admin\",\n      \"password\": \"centreon\"\n    }\n  }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"login"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 500,\n  \"message\": \"Internal Server Error\"\n}"
								}
							]
						},
						{
							"name": "List all hosts before host creation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"List of hosts successfully fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.collectionVariables.set(\"number_of_hosts_before_creation\", responseJson.meta.total);\r",
											"pm.collectionVariables.set(\"number_of_hosts_created\", 0);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/monitoring/hosts",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"monitoring",
										"hosts"
									],
									"query": [
										{
											"key": "search",
											"value": "",
											"description": "Retrieve only data matching the defined search value.\nSimple search can be done like the following example: ``` search={\"host.name\":\"Central\"} ```\nComplex search can be done with aggregators and operators.\nAvailable search aggregators are:\n  * `$or`\n  * `$and`\n\nAvailable search operators are:\n  * `$eq` → equal\n  * `$neq` → not equal\n  * `$lt` → less than\n  * `$le` → less or equal than\n  * `$gt` → greater than\n  * `$ge` → greater or equal than\n  * `$lk` → like\n  * `$nk` → not like\n  * `$in` → in\n  * `$ni` → not in\n\nExamples without nested aggregators:\n  ```\n  search={\n    \"$or\":[\n      {\"host.name\":{\"$eq\":\"name_1\"}},\n      {\"host.name\":{\"$eq\":\"name_2\"}}\n    ]\n  }\n  ```\n  ```\n  search={\n    \"$and\":[\n      {\"host.address\":{\"$rg\":\"^10\\.0\\.0\\.\\d+$\"}},\n      {\"host.name\":{\"$lk\":\"fr%\"}}\n    ]\n  }\n  ```\n\nExample with nested aggregators:\n  ```\n  search={\n    \"$or\":[\n      {\n        \"$and\":[\n          {\"host.address\":{\"$rg\":\"^10\\.0\\.0\\.\\d+$\"}},\n          {\"host.name\":{\"$lk\":\"fr%\"}}\n        ]\n      },\n      {\n        \"$and\":[\n          {\"host.address\":{\"$rg\":\"^192\\.168\\.0\\.\\d+$\"}},\n          {\"host.name\":{\"$lk\":\"us%\"}}\n        ]\n      }\n    ]\n  }\n  ```\n",
											"disabled": true
										}
									]
								},
								"description": "List all the hosts in real-time monitoring.\n\nThe available parameters to **search** / **sort_by** are:\n\n* host.id\n* host.name\n* host.alias\n* host.address\n* host.state\n* poller.id\n* service.display_name\n* host_group.id\n* host.is_acknowledged\n* host.downtime\n* host.criticality\n"
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/monitoring/hosts?show_service=true&search=cillum quis commodo&limit=20&page=4",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"monitoring",
												"hosts"
											],
											"query": [
												{
													"key": "show_service",
													"value": "true"
												},
												{
													"key": "search",
													"value": "cillum quis commodo"
												},
												{
													"key": "limit",
													"value": "20"
												},
												{
													"key": "page",
													"value": "4"
												}
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"result\": [\n    {\n      \"id\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"alias\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"display_name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"state\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"services\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"poller_id\": 1,\n      \"acknowledged\": false,\n      \"address_ip\": \"127.0.0.1\",\n      \"check_attempt\": 1,\n      \"checked\": true,\n      \"execution_time\": 0.070906,\n      \"icon_image\": \"ppm/operatingsystems-linux-snmp-linux-128.png\",\n      \"icon_image_alt\": \"\",\n      \"last_check\": \"1980-02-02T05:43:34.625Z\",\n      \"last_hard_state_change\": \"2022-08-05T10:43:02.077Z\",\n      \"last_state_change\": \"1948-11-25T13:12:41.089Z\",\n      \"last_time_down\": \"1945-06-23T19:43:00.867Z\",\n      \"last_time_unreachable\": \"2022-07-05T17:47:46.217Z\",\n      \"last_time_up\": \"1952-11-26T09:19:35.799Z\",\n      \"last_update\": \"2002-02-11T22:28:18.621Z\",\n      \"max_check_attempts\": 3,\n      \"output\": \"OK - 127.0.0.1 rta 0.100ms lost 0%\\n\",\n      \"passive_checks\": false,\n      \"state_type\": 0,\n      \"timezone\": \":Europe/Paris\",\n      \"scheduled_downtime_depth\": 0,\n      \"criticality\": 10\n    },\n    {\n      \"id\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"alias\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"display_name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"state\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"services\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"poller_id\": 1,\n      \"acknowledged\": false,\n      \"address_ip\": \"127.0.0.1\",\n      \"check_attempt\": 1,\n      \"checked\": true,\n      \"execution_time\": 0.070906,\n      \"icon_image\": \"ppm/operatingsystems-linux-snmp-linux-128.png\",\n      \"icon_image_alt\": \"\",\n      \"last_check\": \"2014-11-11T02:07:25.915Z\",\n      \"last_hard_state_change\": \"1966-04-15T04:04:02.849Z\",\n      \"last_state_change\": \"1962-12-26T10:26:12.593Z\",\n      \"last_time_down\": \"2004-09-19T21:36:42.944Z\",\n      \"last_time_unreachable\": \"1951-05-24T08:52:34.057Z\",\n      \"last_time_up\": \"1990-04-26T07:43:26.231Z\",\n      \"last_update\": \"1971-01-30T15:22:21.380Z\",\n      \"max_check_attempts\": 3,\n      \"output\": \"OK - 127.0.0.1 rta 0.100ms lost 0%\\n\",\n      \"passive_checks\": false,\n      \"state_type\": 0,\n      \"timezone\": \":Europe/Paris\",\n      \"scheduled_downtime_depth\": 0,\n      \"criticality\": 10\n    }\n  ],\n  \"meta\": {\n    \"page\": 1,\n    \"limit\": 10,\n    \"search\": {},\n    \"sort_by\": {},\n    \"total\": 1\n  }\n}"
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/monitoring/hosts?show_service=true&search=cillum quis commodo&limit=20&page=4",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"monitoring",
												"hosts"
											],
											"query": [
												{
													"key": "show_service",
													"value": "true"
												},
												{
													"key": "search",
													"value": "cillum quis commodo"
												},
												{
													"key": "limit",
													"value": "20"
												},
												{
													"key": "page",
													"value": "4"
												}
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 403,\n  \"message\": \"You are not authorized to access this resource\"\n}"
								},
								{
									"name": "Internal Server Error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/monitoring/hosts?show_service=true&search=cillum quis commodo&limit=20&page=4",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"monitoring",
												"hosts"
											],
											"query": [
												{
													"key": "show_service",
													"value": "true"
												},
												{
													"key": "search",
													"value": "cillum quis commodo"
												},
												{
													"key": "limit",
													"value": "20"
												},
												{
													"key": "page",
													"value": "4"
												}
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 500,\n  \"message\": \"Internal Server Error\"\n}"
								}
							]
						},
						{
							"name": "Create a new host",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const hosts = pm.collectionVariables.get(\"host_list\");\r",
											"\r",
											"pm.test(\"Host \" + pm.collectionVariables.get(\"currentHost\") + \" has successfully been created.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"if (hosts && hosts.length > 0) {\r",
											"    postman.setNextRequest(\"Create a new host\");\r",
											"} else {\r",
											"    pm.collectionVariables.unset(\"host_list\");\r",
											"    pm.collectionVariables.unset(\"currentHost\");\r",
											"    pm.collectionVariables.unset(\"host_group_list\");\r",
											"    pm.collectionVariables.unset(\"currentHostGroup\");\r",
											"    pm.collectionVariables.unset(\"ip_addr_list\");\r",
											"    pm.collectionVariables.unset(\"currentIpAddr\");\r",
											"    pm.collectionVariables.unset(\"host_templates\");\r",
											"    pm.collectionVariables.unset(\"currentHostTemplate\");\r",
											"    postman.setNextRequest(\"Export configuration\");\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let hosts = pm.collectionVariables.get(\"host_list\");\r",
											"let ip_addresses = pm.collectionVariables.get(\"ip_addr_list\");\r",
											"let host_groups = pm.collectionVariables.get(\"host_group_list\");\r",
											"let host_templates = pm.collectionVariables.get(\"host_templates\");\r",
											"let hosts_created = pm.collectionVariables.get(\"hosts_created\");\r",
											"\r",
											"pm.collectionVariables.set(\"host_template\", \"generic-active-host-custom\");\r",
											"if(!hosts || hosts.length == 0) {\r",
											"    hosts = [\"central\", \"host_name_1\", \"host_name_2\", \"host_name_3\", \"host_name_4\", \"host_name_5\", \"host_name_6\", \"host_name_7\", \"host_name_8\", \"host_name_9\"];\r",
											"    hosts_created = [];\r",
											"    host_groups = [pm.collectionVariables.get(\"host_group_name\"), pm.collectionVariables.get(\"host_group_name\"), pm.collectionVariables.get(\"host_group_name\"), pm.collectionVariables.get(\"host_group_name\"), \"\", pm.collectionVariables.get(\"host_group_name\"), pm.collectionVariables.get(\"host_group_name\"), pm.collectionVariables.get(\"host_group_name\"), pm.collectionVariables.get(\"host_group_name\"), pm.collectionVariables.get(\"host_group_name\")];\r",
											"    ip_addresses = [pm.collectionVariables.get(\"server\"), \"127.0.0.0\", \"127.0.0.1\", \"127.0.0.2\", \"127.0.0.3\", \"127.0.0.4\", \"127.0.0.5\", \"127.0.0.6\", \"127.0.0.7\", \"127.0.0.8\"];\r",
											"    host_templates = [\"App-Monitoring-Centreon-Central-custom\", pm.collectionVariables.get(\"host_template\"), pm.collectionVariables.get(\"host_template\"), pm.collectionVariables.get(\"host_template\"), pm.collectionVariables.get(\"host_template\"), pm.collectionVariables.get(\"host_template\"), pm.collectionVariables.get(\"host_template\"), pm.collectionVariables.get(\"host_template\"), pm.collectionVariables.get(\"host_template\"), pm.collectionVariables.get(\"host_template\")];\r",
											"}\r",
											"\r",
											"let currentHost = hosts.shift();\r",
											"pm.collectionVariables.set(\"currentHost\", currentHost);\r",
											"pm.collectionVariables.set(\"host_list\", hosts);\r",
											"hosts_created.push(currentHost);\r",
											"pm.collectionVariables.set(\"hosts_created\", hosts_created);\r",
											"\r",
											"let currentIpAddr = ip_addresses.shift();\r",
											"pm.collectionVariables.set(\"currentIpAddr\", currentIpAddr);\r",
											"pm.collectionVariables.set(\"ip_addr_list\", ip_addresses);\r",
											"\r",
											"let currentHostGroup = host_groups.shift();\r",
											"pm.collectionVariables.set(\"currentHostGroup\", currentHostGroup);\r",
											"pm.collectionVariables.set(\"host_group_list\", host_groups);\r",
											"\r",
											"let currentTemplate = host_templates.shift();\r",
											"pm.collectionVariables.set(\"currentHostTemplate\", currentTemplate);\r",
											"pm.collectionVariables.set(\"host_templates\", host_templates);\r",
											"\r",
											"let number_of_hosts_created = pm.collectionVariables.get(\"number_of_hosts_created\");\r",
											"number_of_hosts_created++;\r",
											"pm.collectionVariables.set(\"number_of_hosts_created\", number_of_hosts_created);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"add\",\n  \"object\": \"host\",\n  \"values\": \"{{currentHost}};{{currentHost}};{{currentIpAddr}};{{currentHostTemplate}};central;{{currentHostGroup}};\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Export configuration",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"setTimeout(function(){}, [2000]);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"APPLYCFG\",\n  \"values\": \"Central\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "List all hosts after batch host creation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"List of hosts successfully fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"The correct number of hosts has been added.\", function() {\r",
											"    pm.expect(responseJson.meta.total).to.eql(pm.collectionVariables.get(\"number_of_hosts_before_creation\") + pm.collectionVariables.get(\"hosts_created\"));\r",
											"});\r",
											"\r",
											"var hosts_created = pm.collectionVariables.get(\"hosts_created\");\r",
											"var number_of_hosts_created = pm.collectionVariables.get(\"number_of_hosts_created\");\r",
											"var hosts_found = 0;\r",
											"\r",
											"for (var i = 0; i < responseJson.meta.total; i++) {\r",
											"    for (var j = 0; j < hosts_created.length; j++) {\r",
											"        if(responseJson.result[i].name == hosts_created[j]) {\r",
											"            hosts_found++;\r",
											"            switch (responseJson.result[i].name) {\r",
											"                case (hosts_created[0]):\r",
											"                    pm.collectionVariables.set(\"host_severity_name\", responseJson.result[i].name);\r",
											"                    pm.collectionVariables.set(\"host_severity_id\", responseJson.result[i].id);\r",
											"                    console.log(responseJson.result[i].name);\r",
											"                break;\r",
											"                case (hosts_created[2]):\r",
											"                    pm.collectionVariables.set(\"host_to_update_name\", responseJson.result[i].name);\r",
											"                    pm.collectionVariables.set(\"host_to_update_id\", responseJson.result[i].id);\r",
											"                break;\r",
											"                case (hosts_created[3]):\r",
											"                    pm.collectionVariables.set(\"child_host_name\", responseJson.result[i].name);\r",
											"                    pm.collectionVariables.set(\"child_host_id\", responseJson.result[i].id);\r",
											"                break;\r",
											"                case (hosts_created[4]):\r",
											"                    pm.collectionVariables.set(\"parent_host_name\", responseJson.result[i].name);\r",
											"                    pm.collectionVariables.set(\"parent_host_id\", responseJson.result[i].id);\r",
											"                    pm.collectionVariables.set(\"parent_host_address_ip\", responseJson.result[i].address_ip);\r",
											"                break;\r",
											"                case (hosts_created[5]):\r",
											"                    pm.collectionVariables.set(\"host_acl_downtimes_name\", responseJson.result[i].name);\r",
											"                    pm.collectionVariables.set(\"host_acl_downtimes_id\", responseJson.result[i].id);\r",
											"                    pm.collectionVariables.set(\"host_acl_downtimes_address_ip\", responseJson.result[i].address_ip);\r",
											"                break;\r",
											"                case (hosts_created[7]):\r",
											"                    pm.collectionVariables.set(\"host_disable_name\", responseJson.result[i].name);\r",
											"                    pm.collectionVariables.set(\"host_disable_id\", responseJson.result[i].id);\r",
											"                    pm.collectionVariables.set(\"host_disable_address_ip\", responseJson.result[i].address_ip);\r",
											"                break;\r",
											"            }\r",
											"        }\r",
											"    }\r",
											"}\r",
											"\r",
											"pm.test(\"All newly created hosts' names have been found.\", function() {\r",
											"    pm.expect(hosts_created.length).to.eql(hosts_found);\r",
											"    pm.collectionVariables.unset(\"number_of_hosts_before_creation\");\r",
											"    pm.collectionVariables.unset(\"number_of_hosts_created\");\r",
											"}); \r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/monitoring/hosts",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"monitoring",
										"hosts"
									],
									"query": [
										{
											"key": "page",
											"value": "",
											"description": "Number of the requested page",
											"disabled": true
										},
										{
											"key": "search",
											"value": "",
											"description": "Retrieve only data matching the defined search value.\nSimple search can be done like the following example: ``` search={\"host.name\":\"Central\"} ```\nComplex search can be done with aggregators and operators.\nAvailable search aggregators are:\n  * `$or`\n  * `$and`\n\nAvailable search operators are:\n  * `$eq` → equal\n  * `$neq` → not equal\n  * `$lt` → less than\n  * `$le` → less or equal than\n  * `$gt` → greater than\n  * `$ge` → greater or equal than\n  * `$lk` → like\n  * `$nk` → not like\n  * `$in` → in\n  * `$ni` → not in\n\nExamples without nested aggregators:\n  ```\n  search={\n    \"$or\":[\n      {\"host.name\":{\"$eq\":\"name_1\"}},\n      {\"host.name\":{\"$eq\":\"name_2\"}}\n    ]\n  }\n  ```\n  ```\n  search={\n    \"$and\":[\n      {\"host.address\":{\"$rg\":\"^10\\.0\\.0\\.\\d+$\"}},\n      {\"host.name\":{\"$lk\":\"fr%\"}}\n    ]\n  }\n  ```\n\nExample with nested aggregators:\n  ```\n  search={\n    \"$or\":[\n      {\n        \"$and\":[\n          {\"host.address\":{\"$rg\":\"^10\\.0\\.0\\.\\d+$\"}},\n          {\"host.name\":{\"$lk\":\"fr%\"}}\n        ]\n      },\n      {\n        \"$and\":[\n          {\"host.address\":{\"$rg\":\"^192\\.168\\.0\\.\\d+$\"}},\n          {\"host.name\":{\"$lk\":\"us%\"}}\n        ]\n      }\n    ]\n  }\n  ```\n",
											"disabled": true
										}
									]
								},
								"description": "List all the hosts in real-time monitoring.\n\nThe available parameters to **search** / **sort_by** are:\n\n* host.id\n* host.name\n* host.alias\n* host.address\n* host.state\n* poller.id\n* service.display_name\n* host_group.id\n* host.is_acknowledged\n* host.downtime\n* host.criticality\n"
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/monitoring/hosts?show_service=true&search=cillum quis commodo&limit=20&page=4",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"monitoring",
												"hosts"
											],
											"query": [
												{
													"key": "show_service",
													"value": "true"
												},
												{
													"key": "search",
													"value": "cillum quis commodo"
												},
												{
													"key": "limit",
													"value": "20"
												},
												{
													"key": "page",
													"value": "4"
												}
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"result\": [\n    {\n      \"id\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"alias\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"display_name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"state\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"services\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"poller_id\": 1,\n      \"acknowledged\": false,\n      \"address_ip\": \"127.0.0.1\",\n      \"check_attempt\": 1,\n      \"checked\": true,\n      \"execution_time\": 0.070906,\n      \"icon_image\": \"ppm/operatingsystems-linux-snmp-linux-128.png\",\n      \"icon_image_alt\": \"\",\n      \"last_check\": \"1980-02-02T05:43:34.625Z\",\n      \"last_hard_state_change\": \"2022-08-05T10:43:02.077Z\",\n      \"last_state_change\": \"1948-11-25T13:12:41.089Z\",\n      \"last_time_down\": \"1945-06-23T19:43:00.867Z\",\n      \"last_time_unreachable\": \"2022-07-05T17:47:46.217Z\",\n      \"last_time_up\": \"1952-11-26T09:19:35.799Z\",\n      \"last_update\": \"2002-02-11T22:28:18.621Z\",\n      \"max_check_attempts\": 3,\n      \"output\": \"OK - 127.0.0.1 rta 0.100ms lost 0%\\n\",\n      \"passive_checks\": false,\n      \"state_type\": 0,\n      \"timezone\": \":Europe/Paris\",\n      \"scheduled_downtime_depth\": 0,\n      \"criticality\": 10\n    },\n    {\n      \"id\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"alias\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"display_name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"state\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"services\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"poller_id\": 1,\n      \"acknowledged\": false,\n      \"address_ip\": \"127.0.0.1\",\n      \"check_attempt\": 1,\n      \"checked\": true,\n      \"execution_time\": 0.070906,\n      \"icon_image\": \"ppm/operatingsystems-linux-snmp-linux-128.png\",\n      \"icon_image_alt\": \"\",\n      \"last_check\": \"2014-11-11T02:07:25.915Z\",\n      \"last_hard_state_change\": \"1966-04-15T04:04:02.849Z\",\n      \"last_state_change\": \"1962-12-26T10:26:12.593Z\",\n      \"last_time_down\": \"2004-09-19T21:36:42.944Z\",\n      \"last_time_unreachable\": \"1951-05-24T08:52:34.057Z\",\n      \"last_time_up\": \"1990-04-26T07:43:26.231Z\",\n      \"last_update\": \"1971-01-30T15:22:21.380Z\",\n      \"max_check_attempts\": 3,\n      \"output\": \"OK - 127.0.0.1 rta 0.100ms lost 0%\\n\",\n      \"passive_checks\": false,\n      \"state_type\": 0,\n      \"timezone\": \":Europe/Paris\",\n      \"scheduled_downtime_depth\": 0,\n      \"criticality\": 10\n    }\n  ],\n  \"meta\": {\n    \"page\": 1,\n    \"limit\": 10,\n    \"search\": {},\n    \"sort_by\": {},\n    \"total\": 1\n  }\n}"
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/monitoring/hosts?show_service=true&search=cillum quis commodo&limit=20&page=4",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"monitoring",
												"hosts"
											],
											"query": [
												{
													"key": "show_service",
													"value": "true"
												},
												{
													"key": "search",
													"value": "cillum quis commodo"
												},
												{
													"key": "limit",
													"value": "20"
												},
												{
													"key": "page",
													"value": "4"
												}
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 403,\n  \"message\": \"You are not authorized to access this resource\"\n}"
								},
								{
									"name": "Internal Server Error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/monitoring/hosts?show_service=true&search=cillum quis commodo&limit=20&page=4",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"monitoring",
												"hosts"
											],
											"query": [
												{
													"key": "show_service",
													"value": "true"
												},
												{
													"key": "search",
													"value": "cillum quis commodo"
												},
												{
													"key": "limit",
													"value": "20"
												},
												{
													"key": "page",
													"value": "4"
												}
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 500,\n  \"message\": \"Internal Server Error\"\n}"
								}
							]
						},
						{
							"name": "Set parameters for a specific newly created host",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const parameters = pm.collectionVariables.get(\"list_of_parameters\");\r",
											"\r",
											"pm.test(\"Parameter \" + pm.collectionVariables.get(\"current_parameter\") + \" was updated with \" + pm.collectionVariables.get(\"current_value\"), function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"if (pm.collectionVariables.get(\"name\") && pm.collectionVariables.get(\"name\") != pm.collectionVariables.get(\"host_to_update_name\")) {\r",
											"    pm.collectionVariables.set(\"host_to_update_name\", pm.collectionVariables.get(\"name\"));\r",
											"}\r",
											"\r",
											"if (parameters && parameters.length > 0) {\r",
											"    postman.setNextRequest(\"Set parameters for a specific newly created host\");\r",
											"} else {\r",
											"    pm.collectionVariables.unset(\"current_parameter\");\r",
											"    pm.collectionVariables.unset(\"current_value\");\r",
											"    pm.collectionVariables.unset(\"list_of_parameters\");\r",
											"    pm.collectionVariables.unset(\"list_of_values\");\r",
											"    postman.setNextRequest(\"Export configuration after host update\");\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let parameters = pm.collectionVariables.get(\"list_of_parameters\");\r",
											"let values = pm.collectionVariables.get(\"list_of_values\");\r",
											"let parameters_to_check = pm.collectionVariables.get(\"parameters_to_check\");\r",
											"\r",
											"if (!parameters || parameters.length == 0) {\r",
											"    parameters = [\"name\", \"alias\", \"timezone\", \"active_checks_enabled\", \"check_period\", \"check_interval\", \"max_check_attempts\", \"retry_check_interval\", \"notifications_enabled\", \"host_notification_options\", \"notification_interval\", \"notification_period\", \"first_notification_delay\", \"recovery_notification_delay\"];\r",
											"    parameters_to_check = [];\r",
											"    pm.collectionVariables.set(\"parameters_to_check\", parameters_to_check);\r",
											"    values = [\"host_to_modify\", \"host_to_modify\", \"Europe/Paris\", 1, pm.collectionVariables.get(\"time_period_name\"), 5, 3, 1, 1, [\"d\",\"u\",\"r\",\"f\"], 5, pm.collectionVariables.get(\"time_period_name\"), 5, 5];\r",
											"}\r",
											"\r",
											"let current_parameter = parameters.shift();\r",
											"pm.collectionVariables.set(\"current_parameter\", current_parameter);\r",
											"pm.collectionVariables.set(\"list_of_parameters\", parameters);\r",
											"let current_value = values.shift();\r",
											"pm.collectionVariables.set(\"current_value\", current_value);\r",
											"pm.collectionVariables.set(\"list_of_values\", values);\r",
											"\r",
											"pm.collectionVariables.set(current_parameter, current_value);\r",
											"\r",
											"parameters_to_check.push(current_parameter);\r",
											"pm.collectionVariables.set(\"parameters_to_check\", parameters_to_check);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\":\"setparam\",\n  \"object\":\"host\",\n  \"values\": \"{{host_to_update_name}};{{current_parameter}};{{current_value}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Export configuration after host update",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"setTimeout(function(){}, [2000]);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"APPLYCFG\",\n  \"values\": \"Central\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Check the updated host",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let parameters_to_check = pm.collectionVariables.get(\"parameters_to_check\");\r",
											"\r",
											"console.log(parameters_to_check);\r",
											"if(parameters_to_check) {\r",
											"    for (let i = 0; i < parameters_to_check.length; i++) {\r",
											"        switch (parameters_to_check[i]) {\r",
											"            case 'active_checks_enabled': \r",
											"                pm.collectionVariables.set(\"active_checks\", pm.collectionVariables.get(\"active_checks_enabled\"));\r",
											"                pm.collectionVariables.unset(\"active_checks_enabled\");\r",
											"                parameters_to_check[i] = \"active_checks\";\r",
											"                if(pm.collectionVariables.get(\"active_checks\") == 1){pm.collectionVariables.set(\"active_checks\", true)} else {pm.collectionVariables.set(\"active_checks\", false)}\r",
											"                break;\r",
											"            case 'passive_checks_enabled': \r",
											"                pm.collectionVariables.set(\"passive_checks\", pm.collectionVariables.get(\"passive_checks_enabled\"));\r",
											"                pm.collectionVariables.unset(\"passive_checks_enabled\");\r",
											"                parameters_to_check[i] = \"passive_checks\";\r",
											"                if(pm.collectionVariables.get(\"passive_checks\") == 1){pm.collectionVariables.set(\"passive_checks\", true)} else {pm.collectionVariables.set(\"passive_checks\", false)}\r",
											"                break;\r",
											"            case 'notifications_enabled':\r",
											"                pm.collectionVariables.set(\"notify\", pm.collectionVariables.get(\"notifications_enabled\"));\r",
											"                pm.collectionVariables.unset(\"notifications_enabled\");\r",
											"                parameters_to_check[i] = \"notify\";\r",
											"                if(pm.collectionVariables.get(\"notify\") == 1){pm.collectionVariables.set(\"notify\", true)} else {pm.collectionVariables.set(\"notify\", false)}\r",
											"                break;\r",
											"            case 'host_notification_options':\r",
											"                host_notification_options = pm.collectionVariables.get(\"host_notification_options\");\r",
											"                for(let j = 0; j < host_notification_options.length; j++) {\r",
											"                    switch (host_notification_options[j]) {\r",
											"                        case 'd':\r",
											"                            pm.collectionVariables.set(\"notify_on_down\", true);\r",
											"                            parameters_to_check.push(\"notify_on_down\");\r",
											"                            break;\r",
											"                        case 'u':\r",
											"                            pm.collectionVariables.set(\"notify_on_unreachable\", true);\r",
											"                            parameters_to_check.push(\"notify_on_unreachable\");\r",
											"                            break;\r",
											"                        case 'r':\r",
											"                            pm.collectionVariables.set(\"notify_on_recovery\", true);\r",
											"                            parameters_to_check.push(\"notify_on_recovery\");\r",
											"                            break;\r",
											"                        case 'f':\r",
											"                            pm.collectionVariables.set(\"notify_on_flapping\", true);\r",
											"                            parameters_to_check.push(\"notify_on_flapping\");\r",
											"                            break;                                                                            \r",
											"                    }          \r",
											"                }\r",
											"                pm.collectionVariables.unset(\"host_notification_options\");\r",
											"                parameters_to_check.splice(parameters_to_check.indexOf(\"host_notification_options\"), 1);\r",
											"                break;\r",
											"        }\r",
											"    }\r",
											"}\r",
											"\r",
											"pm.collectionVariables.set(\"parameters_to_check\", parameters_to_check);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Information on selected host successfully fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"const keys = Object.keys(responseJson);\r",
											"const values = Object.values(responseJson);\r",
											"var parameters_to_check = pm.collectionVariables.get(\"parameters_to_check\");\r",
											"\r",
											"for (let i = 0; i < parameters_to_check.length; i++) {\r",
											"    var j = keys.indexOf(parameters_to_check[i]);\r",
											"    if(j != -1) {\r",
											"        pm.test(\"Parameter \" + parameters_to_check[i] + \" now has value \" + pm.collectionVariables.get(parameters_to_check[i]), function() {pm.expect(pm.collectionVariables.get(parameters_to_check[i])).to.eql(values[j]);}) \r",
											"        pm.collectionVariables.unset(parameters_to_check[i]);\r",
											"    }\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/monitoring/hosts/{{host_to_update_id}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"monitoring",
										"hosts",
										"{{host_to_update_id}}"
									],
									"query": [
										{
											"key": "page",
											"value": "",
											"description": "Number of the requested page",
											"disabled": true
										},
										{
											"key": "search",
											"value": "",
											"description": "Retrieve only data matching the defined search value.\nSimple search can be done like the following example: ``` search={\"host.name\":\"Central\"} ```\nComplex search can be done with aggregators and operators.\nAvailable search aggregators are:\n  * `$or`\n  * `$and`\n\nAvailable search operators are:\n  * `$eq` → equal\n  * `$neq` → not equal\n  * `$lt` → less than\n  * `$le` → less or equal than\n  * `$gt` → greater than\n  * `$ge` → greater or equal than\n  * `$lk` → like\n  * `$nk` → not like\n  * `$in` → in\n  * `$ni` → not in\n\nExamples without nested aggregators:\n  ```\n  search={\n    \"$or\":[\n      {\"host.name\":{\"$eq\":\"name_1\"}},\n      {\"host.name\":{\"$eq\":\"name_2\"}}\n    ]\n  }\n  ```\n  ```\n  search={\n    \"$and\":[\n      {\"host.address\":{\"$rg\":\"^10\\.0\\.0\\.\\d+$\"}},\n      {\"host.name\":{\"$lk\":\"fr%\"}}\n    ]\n  }\n  ```\n\nExample with nested aggregators:\n  ```\n  search={\n    \"$or\":[\n      {\n        \"$and\":[\n          {\"host.address\":{\"$rg\":\"^10\\.0\\.0\\.\\d+$\"}},\n          {\"host.name\":{\"$lk\":\"fr%\"}}\n        ]\n      },\n      {\n        \"$and\":[\n          {\"host.address\":{\"$rg\":\"^192\\.168\\.0\\.\\d+$\"}},\n          {\"host.name\":{\"$lk\":\"us%\"}}\n        ]\n      }\n    ]\n  }\n  ```\n",
											"disabled": true
										}
									]
								},
								"description": "List all the hosts in real-time monitoring.\n\nThe available parameters to **search** / **sort_by** are:\n\n* host.id\n* host.name\n* host.alias\n* host.address\n* host.state\n* poller.id\n* service.display_name\n* host_group.id\n* host.is_acknowledged\n* host.downtime\n* host.criticality\n"
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/monitoring/hosts?show_service=true&search=cillum quis commodo&limit=20&page=4",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"monitoring",
												"hosts"
											],
											"query": [
												{
													"key": "show_service",
													"value": "true"
												},
												{
													"key": "search",
													"value": "cillum quis commodo"
												},
												{
													"key": "limit",
													"value": "20"
												},
												{
													"key": "page",
													"value": "4"
												}
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"result\": [\n    {\n      \"id\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"alias\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"display_name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"state\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"services\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"poller_id\": 1,\n      \"acknowledged\": false,\n      \"address_ip\": \"127.0.0.1\",\n      \"check_attempt\": 1,\n      \"checked\": true,\n      \"execution_time\": 0.070906,\n      \"icon_image\": \"ppm/operatingsystems-linux-snmp-linux-128.png\",\n      \"icon_image_alt\": \"\",\n      \"last_check\": \"1980-02-02T05:43:34.625Z\",\n      \"last_hard_state_change\": \"2022-08-05T10:43:02.077Z\",\n      \"last_state_change\": \"1948-11-25T13:12:41.089Z\",\n      \"last_time_down\": \"1945-06-23T19:43:00.867Z\",\n      \"last_time_unreachable\": \"2022-07-05T17:47:46.217Z\",\n      \"last_time_up\": \"1952-11-26T09:19:35.799Z\",\n      \"last_update\": \"2002-02-11T22:28:18.621Z\",\n      \"max_check_attempts\": 3,\n      \"output\": \"OK - 127.0.0.1 rta 0.100ms lost 0%\\n\",\n      \"passive_checks\": false,\n      \"state_type\": 0,\n      \"timezone\": \":Europe/Paris\",\n      \"scheduled_downtime_depth\": 0,\n      \"criticality\": 10\n    },\n    {\n      \"id\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"alias\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"display_name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"state\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"services\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"poller_id\": 1,\n      \"acknowledged\": false,\n      \"address_ip\": \"127.0.0.1\",\n      \"check_attempt\": 1,\n      \"checked\": true,\n      \"execution_time\": 0.070906,\n      \"icon_image\": \"ppm/operatingsystems-linux-snmp-linux-128.png\",\n      \"icon_image_alt\": \"\",\n      \"last_check\": \"2014-11-11T02:07:25.915Z\",\n      \"last_hard_state_change\": \"1966-04-15T04:04:02.849Z\",\n      \"last_state_change\": \"1962-12-26T10:26:12.593Z\",\n      \"last_time_down\": \"2004-09-19T21:36:42.944Z\",\n      \"last_time_unreachable\": \"1951-05-24T08:52:34.057Z\",\n      \"last_time_up\": \"1990-04-26T07:43:26.231Z\",\n      \"last_update\": \"1971-01-30T15:22:21.380Z\",\n      \"max_check_attempts\": 3,\n      \"output\": \"OK - 127.0.0.1 rta 0.100ms lost 0%\\n\",\n      \"passive_checks\": false,\n      \"state_type\": 0,\n      \"timezone\": \":Europe/Paris\",\n      \"scheduled_downtime_depth\": 0,\n      \"criticality\": 10\n    }\n  ],\n  \"meta\": {\n    \"page\": 1,\n    \"limit\": 10,\n    \"search\": {},\n    \"sort_by\": {},\n    \"total\": 1\n  }\n}"
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/monitoring/hosts?show_service=true&search=cillum quis commodo&limit=20&page=4",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"monitoring",
												"hosts"
											],
											"query": [
												{
													"key": "show_service",
													"value": "true"
												},
												{
													"key": "search",
													"value": "cillum quis commodo"
												},
												{
													"key": "limit",
													"value": "20"
												},
												{
													"key": "page",
													"value": "4"
												}
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 403,\n  \"message\": \"You are not authorized to access this resource\"\n}"
								},
								{
									"name": "Internal Server Error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/monitoring/hosts?show_service=true&search=cillum quis commodo&limit=20&page=4",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"monitoring",
												"hosts"
											],
											"query": [
												{
													"key": "show_service",
													"value": "true"
												},
												{
													"key": "search",
													"value": "cillum quis commodo"
												},
												{
													"key": "limit",
													"value": "20"
												},
												{
													"key": "page",
													"value": "4"
												}
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 500,\n  \"message\": \"Internal Server Error\"\n}"
								}
							]
						},
						{
							"name": "Check host group belonging to updated host",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"List of host group's updated host successfully fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Host belongs to only one host group.\", function() {\r",
											"    pm.expect(responseJson.result.length).to.eql(1);\r",
											"})\r",
											"\r",
											"pm.test(\"This host group is the one we have configured for it.\", function() {\r",
											"    pm.expect(responseJson.result[0].name).to.eql(pm.collectionVariables.get(\"host_group_name\"));\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/monitoring/hosts/{{host_to_update_id}}/hostgroups",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"monitoring",
										"hosts",
										"{{host_to_update_id}}",
										"hostgroups"
									]
								}
							},
							"response": []
						},
						{
							"name": "Check templates for updated host",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Request successful.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Host only has one template.\", function() {\r",
											"    pm.expect(responseJson.result.length).to.eql(1);\r",
											"})\r",
											"\r",
											"pm.test(\"This template is the one that was expected for this host.\", function() {\r",
											"    pm.expect(responseJson.result[0].name).to.eql(pm.collectionVariables.get(\"host_template\"));\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"gettemplate\",\n  \"object\": \"HOST\",\n  \"values\": \"{{host_to_update_name}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Set parent hosts to chosen host",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Request successful.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Centreon-Auth-Token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"setparent\",\n  \"object\": \"htpl\",\n  \"values\": \"{{child_host_name}};{{parent_host_name}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get parent hosts of dedicated host",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"A list of parents for this chosen host has been successfully fetched.\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const responseJson = pm.response.json();",
											"try {",
											"    var i = 0;",
											"    while (i < responseJson.result.length) {",
											"        if (pm.collectionVariables.get(\"parent_host_name\") == responseJson.result[i].name) {",
											"            pm.test(\"Parent host has been found for this child host.\", function() {",
											"                pm.expect(Number(responseJson.result[i].id)).to.eql(pm.collectionVariables.get(\"parent_host_id\"));",
											"                pm.expect(responseJson.result[i].name).to.eql(pm.collectionVariables.get(\"parent_host_name\"));",
											"            })",
											"            break;",
											"        }",
											"        i++;",
											"    }",
											"    if (i == responseJson.result.length) {",
											"        pm.test(\"Parent host has been found for this child host.\", function () {",
											"            pm.expect(true).to.eql(false);",
											"        });",
											"    }",
											"} catch (e) {}",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\":\"getparent\",\n  \"object\":\"host\",\n  \"values\":\"{{child_host_name}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get host macros",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Request successful.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "CENTREON-AUTH-TOKEN",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"getmacro\",\n  \"object\": \"host\",\n  \"values\": \"{{host_severity_name}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Disable host",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Request successful.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "CENTREON-AUTH-TOKEN",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"disable\",\n  \"object\": \"host\",\n  \"values\": \"{{host_disable_name}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Export configuration after host deactivation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"setTimeout(function(){}, [2000]);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"APPLYCFG\",\n  \"values\": \"Central\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "List all hosts after host deactivation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"List of hosts successfully fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"The host has been disabled and is not listed anymore.\", function() {\r",
											"    pm.expect(responseJson.meta.total).to.eql(pm.collectionVariables.get(\"number_of_listed_hosts\") - 1);\r",
											"    var table = [];\r",
											"    for(var i = 0; i < responseJson.result.length; i++) {\r",
											"        table.push(responseJson.result[i].name);\r",
											"    }\r",
											"    pm.expect(table).to.not.contain(pm.collectionVariables.get(\"host_disable_name\"));\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/monitoring/hosts",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"monitoring",
										"hosts"
									],
									"query": [
										{
											"key": "page",
											"value": "",
											"description": "Number of the requested page",
											"disabled": true
										},
										{
											"key": "search",
											"value": "",
											"description": "Retrieve only data matching the defined search value.\nSimple search can be done like the following example: ``` search={\"host.name\":\"Central\"} ```\nComplex search can be done with aggregators and operators.\nAvailable search aggregators are:\n  * `$or`\n  * `$and`\n\nAvailable search operators are:\n  * `$eq` → equal\n  * `$neq` → not equal\n  * `$lt` → less than\n  * `$le` → less or equal than\n  * `$gt` → greater than\n  * `$ge` → greater or equal than\n  * `$lk` → like\n  * `$nk` → not like\n  * `$in` → in\n  * `$ni` → not in\n\nExamples without nested aggregators:\n  ```\n  search={\n    \"$or\":[\n      {\"host.name\":{\"$eq\":\"name_1\"}},\n      {\"host.name\":{\"$eq\":\"name_2\"}}\n    ]\n  }\n  ```\n  ```\n  search={\n    \"$and\":[\n      {\"host.address\":{\"$rg\":\"^10\\.0\\.0\\.\\d+$\"}},\n      {\"host.name\":{\"$lk\":\"fr%\"}}\n    ]\n  }\n  ```\n\nExample with nested aggregators:\n  ```\n  search={\n    \"$or\":[\n      {\n        \"$and\":[\n          {\"host.address\":{\"$rg\":\"^10\\.0\\.0\\.\\d+$\"}},\n          {\"host.name\":{\"$lk\":\"fr%\"}}\n        ]\n      },\n      {\n        \"$and\":[\n          {\"host.address\":{\"$rg\":\"^192\\.168\\.0\\.\\d+$\"}},\n          {\"host.name\":{\"$lk\":\"us%\"}}\n        ]\n      }\n    ]\n  }\n  ```\n",
											"disabled": true
										}
									]
								},
								"description": "List all the hosts in real-time monitoring.\n\nThe available parameters to **search** / **sort_by** are:\n\n* host.id\n* host.name\n* host.alias\n* host.address\n* host.state\n* poller.id\n* service.display_name\n* host_group.id\n* host.is_acknowledged\n* host.downtime\n* host.criticality\n"
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/monitoring/hosts?show_service=true&search=cillum quis commodo&limit=20&page=4",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"monitoring",
												"hosts"
											],
											"query": [
												{
													"key": "show_service",
													"value": "true"
												},
												{
													"key": "search",
													"value": "cillum quis commodo"
												},
												{
													"key": "limit",
													"value": "20"
												},
												{
													"key": "page",
													"value": "4"
												}
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"result\": [\n    {\n      \"id\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"alias\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"display_name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"state\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"services\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"poller_id\": 1,\n      \"acknowledged\": false,\n      \"address_ip\": \"127.0.0.1\",\n      \"check_attempt\": 1,\n      \"checked\": true,\n      \"execution_time\": 0.070906,\n      \"icon_image\": \"ppm/operatingsystems-linux-snmp-linux-128.png\",\n      \"icon_image_alt\": \"\",\n      \"last_check\": \"1980-02-02T05:43:34.625Z\",\n      \"last_hard_state_change\": \"2022-08-05T10:43:02.077Z\",\n      \"last_state_change\": \"1948-11-25T13:12:41.089Z\",\n      \"last_time_down\": \"1945-06-23T19:43:00.867Z\",\n      \"last_time_unreachable\": \"2022-07-05T17:47:46.217Z\",\n      \"last_time_up\": \"1952-11-26T09:19:35.799Z\",\n      \"last_update\": \"2002-02-11T22:28:18.621Z\",\n      \"max_check_attempts\": 3,\n      \"output\": \"OK - 127.0.0.1 rta 0.100ms lost 0%\\n\",\n      \"passive_checks\": false,\n      \"state_type\": 0,\n      \"timezone\": \":Europe/Paris\",\n      \"scheduled_downtime_depth\": 0,\n      \"criticality\": 10\n    },\n    {\n      \"id\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"alias\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"display_name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"state\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"services\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"poller_id\": 1,\n      \"acknowledged\": false,\n      \"address_ip\": \"127.0.0.1\",\n      \"check_attempt\": 1,\n      \"checked\": true,\n      \"execution_time\": 0.070906,\n      \"icon_image\": \"ppm/operatingsystems-linux-snmp-linux-128.png\",\n      \"icon_image_alt\": \"\",\n      \"last_check\": \"2014-11-11T02:07:25.915Z\",\n      \"last_hard_state_change\": \"1966-04-15T04:04:02.849Z\",\n      \"last_state_change\": \"1962-12-26T10:26:12.593Z\",\n      \"last_time_down\": \"2004-09-19T21:36:42.944Z\",\n      \"last_time_unreachable\": \"1951-05-24T08:52:34.057Z\",\n      \"last_time_up\": \"1990-04-26T07:43:26.231Z\",\n      \"last_update\": \"1971-01-30T15:22:21.380Z\",\n      \"max_check_attempts\": 3,\n      \"output\": \"OK - 127.0.0.1 rta 0.100ms lost 0%\\n\",\n      \"passive_checks\": false,\n      \"state_type\": 0,\n      \"timezone\": \":Europe/Paris\",\n      \"scheduled_downtime_depth\": 0,\n      \"criticality\": 10\n    }\n  ],\n  \"meta\": {\n    \"page\": 1,\n    \"limit\": 10,\n    \"search\": {},\n    \"sort_by\": {},\n    \"total\": 1\n  }\n}"
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/monitoring/hosts?show_service=true&search=cillum quis commodo&limit=20&page=4",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"monitoring",
												"hosts"
											],
											"query": [
												{
													"key": "show_service",
													"value": "true"
												},
												{
													"key": "search",
													"value": "cillum quis commodo"
												},
												{
													"key": "limit",
													"value": "20"
												},
												{
													"key": "page",
													"value": "4"
												}
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 403,\n  \"message\": \"You are not authorized to access this resource\"\n}"
								},
								{
									"name": "Internal Server Error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/monitoring/hosts?show_service=true&search=cillum quis commodo&limit=20&page=4",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"monitoring",
												"hosts"
											],
											"query": [
												{
													"key": "show_service",
													"value": "true"
												},
												{
													"key": "search",
													"value": "cillum quis commodo"
												},
												{
													"key": "limit",
													"value": "20"
												},
												{
													"key": "page",
													"value": "4"
												}
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 500,\n  \"message\": \"Internal Server Error\"\n}"
								}
							]
						},
						{
							"name": "Check the disabled host",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"The host that has been disabled cannot be accessed.\", function() {\r",
											"    pm.response.to.have.status(404);\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/monitoring/hosts/{{host_disable_id}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"monitoring",
										"hosts",
										"{{host_disable_id}}"
									],
									"query": [
										{
											"key": "page",
											"value": "",
											"description": "Number of the requested page",
											"disabled": true
										},
										{
											"key": "search",
											"value": "",
											"description": "Retrieve only data matching the defined search value.\nSimple search can be done like the following example: ``` search={\"host.name\":\"Central\"} ```\nComplex search can be done with aggregators and operators.\nAvailable search aggregators are:\n  * `$or`\n  * `$and`\n\nAvailable search operators are:\n  * `$eq` → equal\n  * `$neq` → not equal\n  * `$lt` → less than\n  * `$le` → less or equal than\n  * `$gt` → greater than\n  * `$ge` → greater or equal than\n  * `$lk` → like\n  * `$nk` → not like\n  * `$in` → in\n  * `$ni` → not in\n\nExamples without nested aggregators:\n  ```\n  search={\n    \"$or\":[\n      {\"host.name\":{\"$eq\":\"name_1\"}},\n      {\"host.name\":{\"$eq\":\"name_2\"}}\n    ]\n  }\n  ```\n  ```\n  search={\n    \"$and\":[\n      {\"host.address\":{\"$rg\":\"^10\\.0\\.0\\.\\d+$\"}},\n      {\"host.name\":{\"$lk\":\"fr%\"}}\n    ]\n  }\n  ```\n\nExample with nested aggregators:\n  ```\n  search={\n    \"$or\":[\n      {\n        \"$and\":[\n          {\"host.address\":{\"$rg\":\"^10\\.0\\.0\\.\\d+$\"}},\n          {\"host.name\":{\"$lk\":\"fr%\"}}\n        ]\n      },\n      {\n        \"$and\":[\n          {\"host.address\":{\"$rg\":\"^192\\.168\\.0\\.\\d+$\"}},\n          {\"host.name\":{\"$lk\":\"us%\"}}\n        ]\n      }\n    ]\n  }\n  ```\n",
											"disabled": true
										}
									]
								},
								"description": "List all the hosts in real-time monitoring.\n\nThe available parameters to **search** / **sort_by** are:\n\n* host.id\n* host.name\n* host.alias\n* host.address\n* host.state\n* poller.id\n* service.display_name\n* host_group.id\n* host.is_acknowledged\n* host.downtime\n* host.criticality\n"
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/monitoring/hosts?show_service=true&search=cillum quis commodo&limit=20&page=4",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"monitoring",
												"hosts"
											],
											"query": [
												{
													"key": "show_service",
													"value": "true"
												},
												{
													"key": "search",
													"value": "cillum quis commodo"
												},
												{
													"key": "limit",
													"value": "20"
												},
												{
													"key": "page",
													"value": "4"
												}
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"result\": [\n    {\n      \"id\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"alias\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"display_name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"state\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"services\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"poller_id\": 1,\n      \"acknowledged\": false,\n      \"address_ip\": \"127.0.0.1\",\n      \"check_attempt\": 1,\n      \"checked\": true,\n      \"execution_time\": 0.070906,\n      \"icon_image\": \"ppm/operatingsystems-linux-snmp-linux-128.png\",\n      \"icon_image_alt\": \"\",\n      \"last_check\": \"1980-02-02T05:43:34.625Z\",\n      \"last_hard_state_change\": \"2022-08-05T10:43:02.077Z\",\n      \"last_state_change\": \"1948-11-25T13:12:41.089Z\",\n      \"last_time_down\": \"1945-06-23T19:43:00.867Z\",\n      \"last_time_unreachable\": \"2022-07-05T17:47:46.217Z\",\n      \"last_time_up\": \"1952-11-26T09:19:35.799Z\",\n      \"last_update\": \"2002-02-11T22:28:18.621Z\",\n      \"max_check_attempts\": 3,\n      \"output\": \"OK - 127.0.0.1 rta 0.100ms lost 0%\\n\",\n      \"passive_checks\": false,\n      \"state_type\": 0,\n      \"timezone\": \":Europe/Paris\",\n      \"scheduled_downtime_depth\": 0,\n      \"criticality\": 10\n    },\n    {\n      \"id\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"alias\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"display_name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"state\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"services\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"poller_id\": 1,\n      \"acknowledged\": false,\n      \"address_ip\": \"127.0.0.1\",\n      \"check_attempt\": 1,\n      \"checked\": true,\n      \"execution_time\": 0.070906,\n      \"icon_image\": \"ppm/operatingsystems-linux-snmp-linux-128.png\",\n      \"icon_image_alt\": \"\",\n      \"last_check\": \"2014-11-11T02:07:25.915Z\",\n      \"last_hard_state_change\": \"1966-04-15T04:04:02.849Z\",\n      \"last_state_change\": \"1962-12-26T10:26:12.593Z\",\n      \"last_time_down\": \"2004-09-19T21:36:42.944Z\",\n      \"last_time_unreachable\": \"1951-05-24T08:52:34.057Z\",\n      \"last_time_up\": \"1990-04-26T07:43:26.231Z\",\n      \"last_update\": \"1971-01-30T15:22:21.380Z\",\n      \"max_check_attempts\": 3,\n      \"output\": \"OK - 127.0.0.1 rta 0.100ms lost 0%\\n\",\n      \"passive_checks\": false,\n      \"state_type\": 0,\n      \"timezone\": \":Europe/Paris\",\n      \"scheduled_downtime_depth\": 0,\n      \"criticality\": 10\n    }\n  ],\n  \"meta\": {\n    \"page\": 1,\n    \"limit\": 10,\n    \"search\": {},\n    \"sort_by\": {},\n    \"total\": 1\n  }\n}"
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/monitoring/hosts?show_service=true&search=cillum quis commodo&limit=20&page=4",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"monitoring",
												"hosts"
											],
											"query": [
												{
													"key": "show_service",
													"value": "true"
												},
												{
													"key": "search",
													"value": "cillum quis commodo"
												},
												{
													"key": "limit",
													"value": "20"
												},
												{
													"key": "page",
													"value": "4"
												}
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 403,\n  \"message\": \"You are not authorized to access this resource\"\n}"
								},
								{
									"name": "Internal Server Error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/monitoring/hosts?show_service=true&search=cillum quis commodo&limit=20&page=4",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"monitoring",
												"hosts"
											],
											"query": [
												{
													"key": "show_service",
													"value": "true"
												},
												{
													"key": "search",
													"value": "cillum quis commodo"
												},
												{
													"key": "limit",
													"value": "20"
												},
												{
													"key": "page",
													"value": "4"
												}
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 500,\n  \"message\": \"Internal Server Error\"\n}"
								}
							]
						},
						{
							"name": "Enable host",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Request successful.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "CENTREON-AUTH-TOKEN",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"enable\",\n  \"object\": \"host\",\n  \"values\": \"{{host_disable_name}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Export configuration after host reactivation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"setTimeout(function(){}, [2000]);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"APPLYCFG\",\n  \"values\": \"Central\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Edge Cases",
					"item": [
						{
							"name": "Parent Host Down Consequences on Child Host [CLAPI]",
							"item": [
								{
									"name": "Set dummy IP address of parent host",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "centreon-auth-token",
												"value": "{{token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"action\":\"setparam\",\n  \"object\":\"host\",\n  \"values\": \"{{parent_host_name}};address;999.998.997.996\"\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
											"protocol": "{{protocol}}",
											"host": [
												"{{server}}"
											],
											"path": [
												"centreon",
												"api",
												"index.php"
											],
											"query": [
												{
													"key": "action",
													"value": "action"
												},
												{
													"key": "object",
													"value": "centreon_clapi"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Export configuration after host update",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"setTimeout(function(){}, [2000]);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "centreon-auth-token",
												"value": "{{token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"action\": \"APPLYCFG\",\n  \"values\": \"Central\"\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
											"protocol": "{{protocol}}",
											"host": [
												"{{server}}"
											],
											"path": [
												"centreon",
												"api",
												"index.php"
											],
											"query": [
												{
													"key": "action",
													"value": "action"
												},
												{
													"key": "object",
													"value": "centreon_clapi"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Show active host downtimes for child host",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const responseJson = pm.response.json();",
													"",
													"try {",
													"    var i = 0;",
													"    while (i < responseJson.result.length) {",
													"        if (pm.collectionVariables.get(\"start_time\") == responseJson.result[i].start_time)",
													"        {",
													"            if (pm.test(\"Features of the set downtime have been successfully implemented.\", function() {",
													"                pm.expect(pm.collectionVariables.get(\"start_time\")).to.eql(responseJson.result[i].start_time);",
													"                pm.expect(pm.collectionVariables.get(\"end_time\")).to.eql(responseJson.result[i].end_time);",
													"                pm.expect(pm.collectionVariables.get(\"downtime_comment\")).to.eql(responseJson.result[i].comment.replace(/[\\'\"]+/g, ''));",
													"            })) ",
													"            {",
													"                pm.collectionVariables.set(\"downtime_id\", responseJson.result[i].id);",
													"                pm.collectionVariables.unset(start_time);",
													"                pm.collectionVariables.unset(end_time);",
													"                pm.collectionVariables.unset(downtime_comment);",
													"            }",
													"            break;",
													"        }",
													"        i++;",
													"    }",
													"    if (i == responseJson.result.length) {",
													"        pm.test(\"Added realtime downtime was found\", function() {",
													"            false;",
													"        });",
													"    }",
													"} ",
													"catch (e) {}"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "centreon-auth-token",
												"value": "{{token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{baseUrl}}/monitoring/hosts/{{child_host_id}}/downtimes",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"monitoring",
												"hosts",
												"{{child_host_id}}",
												"downtimes"
											]
										}
									},
									"response": []
								},
								{
									"name": "Cancel host downtime",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "centreon-auth-token",
												"value": "{{token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{baseUrl}}/monitoring/downtimes/{{downtime_id}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"monitoring",
												"downtimes",
												"{{downtime_id}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Parent Host Down Consequences on Child Host [v2]",
							"item": [
								{
									"name": "Add downtime on parent host",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var moment = require('moment');",
													"datetime_start = moment().format(\"YYYY-MM-DDTHH:mm:ssZ\");",
													"pm.collectionVariables.set(\"start_time\", datetime_start);",
													"datetime_end = moment().add(2, 'hours').format(\"YYYY-MM-DDTHH:mm:ssZ\");",
													"pm.collectionVariables.set(\"end_time\", datetime_end);",
													"",
													"pm.collectionVariables.set(\"downtime_comment\", \"Ceci est un commentaire.\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "centreon-auth-token",
												"value": "{{token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"start_time\": \"{{start_time}}\",\n    \"end_time\": \"{{end_time}}\",\n    \"is_fixed\": true,\n    \"duration\": 3600,\n    \"author_id\": {{current_user_id}},\n    \"comment\": \"{{downtime_comment}}\",\n    \"with_services\": true\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/monitoring/hosts/{{parent_host_id}}/downtimes",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"monitoring",
												"hosts",
												"{{parent_host_id}}",
												"downtimes"
											]
										}
									},
									"response": []
								},
								{
									"name": "Show active host downtimes for child host",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const responseJson = pm.response.json();",
													"",
													"try {",
													"    var i = 0;",
													"    while (i < responseJson.result.length) {",
													"        if (pm.collectionVariables.get(\"start_time\") == responseJson.result[i].start_time)",
													"        {",
													"            if (pm.test(\"Features of the set downtime have been successfully implemented.\", function() {",
													"                pm.expect(pm.collectionVariables.get(\"start_time\")).to.eql(responseJson.result[i].start_time);",
													"                pm.expect(pm.collectionVariables.get(\"end_time\")).to.eql(responseJson.result[i].end_time);",
													"                pm.expect(pm.collectionVariables.get(\"downtime_comment\")).to.eql(responseJson.result[i].comment.replace(/[\\'\"]+/g, ''));",
													"            })) ",
													"            {",
													"                pm.collectionVariables.set(\"downtime_id\", responseJson.result[i].id);",
													"                pm.collectionVariables.unset(start_time);",
													"                pm.collectionVariables.unset(end_time);",
													"                pm.collectionVariables.unset(downtime_comment);",
													"            }",
													"            break;",
													"        }",
													"        i++;",
													"    }",
													"    if (i == responseJson.result.length) {",
													"        pm.test(\"Added realtime downtime was found\", function() {",
													"            false;",
													"        });",
													"    }",
													"} ",
													"catch (e) {}"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "centreon-auth-token",
												"value": "{{token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{baseUrl}}/monitoring/hosts/{{child_host_id}}/downtimes",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"monitoring",
												"hosts",
												"{{child_host_id}}",
												"downtimes"
											]
										}
									},
									"response": []
								},
								{
									"name": "Cancel host downtime",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "centreon-auth-token",
												"value": "{{token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{baseUrl}}/monitoring/downtimes/{{downtime_id}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"monitoring",
												"downtimes",
												"{{downtime_id}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "33 - Host category management",
			"item": [
				{
					"name": "Critical Path",
					"item": [
						{
							"name": "List all host categories",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"A list of host categories has been successfully fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/configuration/hosts/categories",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configuration",
										"hosts",
										"categories"
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								},
								"description": "List of all host category configurations\n"
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/configuration/hosts/categories",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"configuration",
												"hosts",
												"categories"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"result\": [\n    {\n      \"id\": 1,\n      \"name\": \"host-category\",\n      \"alias\": \"host-category\",\n      \"is_activated\": false,\n      \"comments\": \"minim laborum\"\n    },\n    {\n      \"id\": 1,\n      \"name\": \"host-category\",\n      \"alias\": \"host-category\",\n      \"is_activated\": true,\n      \"comments\": \"nisi Ut velit id\"\n    }\n  ],\n  \"meta\": {\n    \"page\": 1,\n    \"limit\": 10,\n    \"search\": {},\n    \"sort_by\": {},\n    \"total\": 1\n  }\n}"
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/configuration/hosts/categories",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"configuration",
												"hosts",
												"categories"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 403,\n  \"message\": \"You are not authorized to access this resource\"\n}"
								},
								{
									"name": "Internal Server Error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/configuration/hosts/categories",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"configuration",
												"hosts",
												"categories"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 500,\n  \"message\": \"Internal Server Error\"\n}"
								}
							]
						},
						{
							"name": "Add host category",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Host category successfully added.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"host_category_name\", \"Host_Category_Test_API\");\r",
											"pm.collectionVariables.set(\"host_category_alias\", \"Host Category Alias\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"add\",\n  \"object\": \"hc\",\n  \"values\": \"{{host_category_name}};{{host_category_alias}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "List all host categories after host category creation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"A list of host categories has been successfully fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"\r",
											"for (var l = 0; l < responseJson.result.length; l++) {\r",
											"    if(pm.collectionVariables.get(\"host_category_name\") == responseJson.result[l].name) {\r",
											"        pm.test(\"Newly created host category is registered in the list and is activated.\", function() {\r",
											"            pm.expect(pm.collectionVariables.get(\"host_category_name\")).to.eql(responseJson.result[l].name);\r",
											"            pm.expect(pm.collectionVariables.get(\"host_category_alias\")).to.eql(responseJson.result[l].alias);\r",
											"            pm.expect(responseJson.result[l].is_activated).to.eql(true);\r",
											"        });\r",
											"    }\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/configuration/hosts/categories",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configuration",
										"hosts",
										"categories"
									]
								},
								"description": "List of all host category configurations\n"
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/configuration/hosts/categories",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"configuration",
												"hosts",
												"categories"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"result\": [\n    {\n      \"id\": 1,\n      \"name\": \"host-category\",\n      \"alias\": \"host-category\",\n      \"is_activated\": false,\n      \"comments\": \"minim laborum\"\n    },\n    {\n      \"id\": 1,\n      \"name\": \"host-category\",\n      \"alias\": \"host-category\",\n      \"is_activated\": true,\n      \"comments\": \"nisi Ut velit id\"\n    }\n  ],\n  \"meta\": {\n    \"page\": 1,\n    \"limit\": 10,\n    \"search\": {},\n    \"sort_by\": {},\n    \"total\": 1\n  }\n}"
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/configuration/hosts/categories",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"configuration",
												"hosts",
												"categories"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 403,\n  \"message\": \"You are not authorized to access this resource\"\n}"
								},
								{
									"name": "Internal Server Error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/configuration/hosts/categories",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"configuration",
												"hosts",
												"categories"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 500,\n  \"message\": \"Internal Server Error\"\n}"
								}
							]
						},
						{
							"name": "Check the updated host severity",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "X-AUTH-TOKEN",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/configuration/hosts/severities",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configuration",
										"hosts",
										"severities"
									],
									"query": [
										{
											"key": "page",
											"value": "",
											"description": "Number of the requested page",
											"disabled": true
										},
										{
											"key": "search",
											"value": "",
											"description": "Retrieve only data matching the defined search value.\nSimple search can be done like the following example: ``` search={\"host.name\":\"Central\"} ```\nComplex search can be done with aggregators and operators.\nAvailable search aggregators are:\n  * `$or`\n  * `$and`\n\nAvailable search operators are:\n  * `$eq` → equal\n  * `$neq` → not equal\n  * `$lt` → less than\n  * `$le` → less or equal than\n  * `$gt` → greater than\n  * `$ge` → greater or equal than\n  * `$lk` → like\n  * `$nk` → not like\n  * `$in` → in\n  * `$ni` → not in\n\nExamples without nested aggregators:\n  ```\n  search={\n    \"$or\":[\n      {\"host.name\":{\"$eq\":\"name_1\"}},\n      {\"host.name\":{\"$eq\":\"name_2\"}}\n    ]\n  }\n  ```\n  ```\n  search={\n    \"$and\":[\n      {\"host.address\":{\"$rg\":\"^10\\.0\\.0\\.\\d+$\"}},\n      {\"host.name\":{\"$lk\":\"fr%\"}}\n    ]\n  }\n  ```\n\nExample with nested aggregators:\n  ```\n  search={\n    \"$or\":[\n      {\n        \"$and\":[\n          {\"host.address\":{\"$rg\":\"^10\\.0\\.0\\.\\d+$\"}},\n          {\"host.name\":{\"$lk\":\"fr%\"}}\n        ]\n      },\n      {\n        \"$and\":[\n          {\"host.address\":{\"$rg\":\"^192\\.168\\.0\\.\\d+$\"}},\n          {\"host.name\":{\"$lk\":\"us%\"}}\n        ]\n      }\n    ]\n  }\n  ```\n",
											"disabled": true
										}
									]
								},
								"description": "List all the hosts in real-time monitoring.\n\nThe available parameters to **search** / **sort_by** are:\n\n* host.id\n* host.name\n* host.alias\n* host.address\n* host.state\n* poller.id\n* service.display_name\n* host_group.id\n* host.is_acknowledged\n* host.downtime\n* host.criticality\n"
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/monitoring/hosts?show_service=true&search=cillum quis commodo&limit=20&page=4",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"monitoring",
												"hosts"
											],
											"query": [
												{
													"key": "show_service",
													"value": "true"
												},
												{
													"key": "search",
													"value": "cillum quis commodo"
												},
												{
													"key": "limit",
													"value": "20"
												},
												{
													"key": "page",
													"value": "4"
												}
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"result\": [\n    {\n      \"id\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"alias\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"display_name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"state\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"services\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"poller_id\": 1,\n      \"acknowledged\": false,\n      \"address_ip\": \"127.0.0.1\",\n      \"check_attempt\": 1,\n      \"checked\": true,\n      \"execution_time\": 0.070906,\n      \"icon_image\": \"ppm/operatingsystems-linux-snmp-linux-128.png\",\n      \"icon_image_alt\": \"\",\n      \"last_check\": \"1980-02-02T05:43:34.625Z\",\n      \"last_hard_state_change\": \"2022-08-05T10:43:02.077Z\",\n      \"last_state_change\": \"1948-11-25T13:12:41.089Z\",\n      \"last_time_down\": \"1945-06-23T19:43:00.867Z\",\n      \"last_time_unreachable\": \"2022-07-05T17:47:46.217Z\",\n      \"last_time_up\": \"1952-11-26T09:19:35.799Z\",\n      \"last_update\": \"2002-02-11T22:28:18.621Z\",\n      \"max_check_attempts\": 3,\n      \"output\": \"OK - 127.0.0.1 rta 0.100ms lost 0%\\n\",\n      \"passive_checks\": false,\n      \"state_type\": 0,\n      \"timezone\": \":Europe/Paris\",\n      \"scheduled_downtime_depth\": 0,\n      \"criticality\": 10\n    },\n    {\n      \"id\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"alias\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"display_name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"state\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"services\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"poller_id\": 1,\n      \"acknowledged\": false,\n      \"address_ip\": \"127.0.0.1\",\n      \"check_attempt\": 1,\n      \"checked\": true,\n      \"execution_time\": 0.070906,\n      \"icon_image\": \"ppm/operatingsystems-linux-snmp-linux-128.png\",\n      \"icon_image_alt\": \"\",\n      \"last_check\": \"2014-11-11T02:07:25.915Z\",\n      \"last_hard_state_change\": \"1966-04-15T04:04:02.849Z\",\n      \"last_state_change\": \"1962-12-26T10:26:12.593Z\",\n      \"last_time_down\": \"2004-09-19T21:36:42.944Z\",\n      \"last_time_unreachable\": \"1951-05-24T08:52:34.057Z\",\n      \"last_time_up\": \"1990-04-26T07:43:26.231Z\",\n      \"last_update\": \"1971-01-30T15:22:21.380Z\",\n      \"max_check_attempts\": 3,\n      \"output\": \"OK - 127.0.0.1 rta 0.100ms lost 0%\\n\",\n      \"passive_checks\": false,\n      \"state_type\": 0,\n      \"timezone\": \":Europe/Paris\",\n      \"scheduled_downtime_depth\": 0,\n      \"criticality\": 10\n    }\n  ],\n  \"meta\": {\n    \"page\": 1,\n    \"limit\": 10,\n    \"search\": {},\n    \"sort_by\": {},\n    \"total\": 1\n  }\n}"
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/monitoring/hosts?show_service=true&search=cillum quis commodo&limit=20&page=4",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"monitoring",
												"hosts"
											],
											"query": [
												{
													"key": "show_service",
													"value": "true"
												},
												{
													"key": "search",
													"value": "cillum quis commodo"
												},
												{
													"key": "limit",
													"value": "20"
												},
												{
													"key": "page",
													"value": "4"
												}
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 403,\n  \"message\": \"You are not authorized to access this resource\"\n}"
								},
								{
									"name": "Internal Server Error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/monitoring/hosts?show_service=true&search=cillum quis commodo&limit=20&page=4",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"monitoring",
												"hosts"
											],
											"query": [
												{
													"key": "show_service",
													"value": "true"
												},
												{
													"key": "search",
													"value": "cillum quis commodo"
												},
												{
													"key": "limit",
													"value": "20"
												},
												{
													"key": "page",
													"value": "4"
												}
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 500,\n  \"message\": \"Internal Server Error\"\n}"
								}
							]
						},
						{
							"name": "Set parameters for a newly created host category",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"if (pm.collectionVariables.get(\"name\") && pm.collectionVariables.get(\"name\") != pm.collectionVariables.get(\"host_group_name\")) {\r",
											"    pm.collectionVariables.set(\"host_category_name\", pm.collectionVariables.get(\"name\"));\r",
											"}\r",
											"\r",
											"var parameters = pm.collectionVariables.get(\"list_of_parameters\");\r",
											"if (parameters && parameters.length > 0) {\r",
											"    postman.setNextRequest(\"Set parameters for a newly created host category\");\r",
											"} else {\r",
											"    pm.collectionVariables.unset(\"current_parameter\");\r",
											"    pm.collectionVariables.unset(\"current_value\");\r",
											"    pm.collectionVariables.unset(\"list_of_parameters\");\r",
											"    pm.collectionVariables.unset(\"list_of_values\");\r",
											"    postman.setNextRequest(\"Set members to newly created host category\");\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let parameters = pm.collectionVariables.get(\"list_of_parameters\");\r",
											"let values = pm.collectionVariables.get(\"list_of_values\");\r",
											"let parameters_to_check = pm.collectionVariables.get(\"parameters_to_check\");\r",
											"\r",
											"if (!parameters || parameters.length == 0) {\r",
											"    parameters = [\"name\"];\r",
											"    parameters_to_check = [];\r",
											"    pm.collectionVariables.set(\"parameters_to_check\", parameters_to_check);\r",
											"    values = [\"Host Category\"];\r",
											"}\r",
											"\r",
											"let current_parameter = parameters.shift();\r",
											"pm.collectionVariables.set(\"current_parameter\", current_parameter);\r",
											"pm.collectionVariables.set(\"list_of_parameters\", parameters);\r",
											"let current_value = values.shift();\r",
											"pm.collectionVariables.set(\"current_value\", current_value);\r",
											"pm.collectionVariables.set(\"list_of_values\", values);\r",
											"\r",
											"pm.collectionVariables.set(current_parameter, current_value);\r",
											"\r",
											"parameters_to_check.push(current_parameter);\r",
											"pm.collectionVariables.set(\"parameters_to_check\", parameters_to_check);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"setparam\",\n  \"object\": \"hc\",\n  \"values\": \"{{host_category_name}};{{current_parameter}};{{current_value}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Set members to newly created host category",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.collectionVariables.unset(\"list_of_hosts\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var hosts_to_add = pm.collectionVariables.get(\"list_of_hosts\");\r",
											"var hosts_to_check = pm.collectionVariables.get(\"hosts_to_check\");\r",
											"\r",
											"if (!hosts_to_add || hosts_to_add.length == 0) {\r",
											"    hosts_to_add = [pm.collectionVariables.get(\"host_to_update_name\"), pm.collectionVariables.get(\"child_host_name\"), pm.collectionVariables.get(\"parent_host_name\")];\r",
											"    hosts_to_check = [];\r",
											"    var final_parameter = \"\";\r",
											"    while(hosts_to_add.length != 0) {\r",
											"        current_host = hosts_to_add.shift();\r",
											"        hosts_to_check.push(current_host);\r",
											"        final_parameter = final_parameter.concat('|', current_host);\r",
											"    }\r",
											"    final_parameter = final_parameter.substring(1);\r",
											"    pm.collectionVariables.set(\"list_of_hosts\", final_parameter);\r",
											"    pm.collectionVariables.set(\"hosts_to_check\", hosts_to_check);\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"setmember\",\n  \"object\": \"hc\",\n  \"values\": \"{{host_category_name}};{{list_of_hosts}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get members to newly created host category",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"A list of members of newly created host category has been successfully fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"var hosts_to_check = pm.collectionVariables.get(\"hosts_to_check\");\r",
											"for (var i = 0; i < responseJson.result.length; i++) {\r",
											"    for (var j = 0; j < hosts_to_check.length; j++) {\r",
											"        if(responseJson.result[i].name == hosts_to_check[j]) {\r",
											"            pm.test(\"Host \" + hosts_to_check[j] + \" is now part of host category \" + pm.collectionVariables.get(\"host_category_name\") + \".\"), function() {\r",
											"                pm.expect(responseJson.result[i].name).to.eql(hosts_to_check[j]);\r",
											"            }\r",
											"        break;\r",
											"        }\r",
											"    }\r",
											"}\r",
											"pm.collectionVariables.unset(\"hosts_to_check\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"Getmember\",\n  \"object\": \"hc\",\n  \"values\": \"{{host_category_name}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Set severity to host category",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Severity successfully set on host category.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"host_severity\", 2);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"setseverity\",\n  \"object\": \"hc\",\n  \"values\": \"{{host_category_name}};{{host_severity}};ppm/applications-monitoring-centreon-central-centreon-128-2.png\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Set severity to host",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Request successful.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"setseverity\",\n  \"object\": \"host\",\n  \"values\": \"{{host_severity_name}};{{host_category_name}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Export configuration after severity set",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"setTimeout(function(){}, [2000]);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"APPLYCFG\",\n  \"values\": \"Central\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Check the updated host severity",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Information about a host has been fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"It is the host we have been meaning to check.\", function () {\r",
											"    pm.expect(responseJson.id).to.eql(pm.collectionVariables.get(\"host_severity_id\"));\r",
											"    pm.expect(responseJson.name).to.eql(pm.collectionVariables.get(\"host_severity_name\"));\r",
											"});\r",
											"\r",
											"pm.test(\"The criticality associated with the host is what we previously set.\", function() {\r",
											"    pm.expect(responseJson.criticality).to.eql(pm.collectionVariables.get(\"host_severity\"));\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "X-AUTH-TOKEN",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/monitoring/hosts/{{host_severity_id}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"monitoring",
										"hosts",
										"{{host_severity_id}}"
									],
									"query": [
										{
											"key": "page",
											"value": "",
											"description": "Number of the requested page",
											"disabled": true
										},
										{
											"key": "search",
											"value": "",
											"description": "Retrieve only data matching the defined search value.\nSimple search can be done like the following example: ``` search={\"host.name\":\"Central\"} ```\nComplex search can be done with aggregators and operators.\nAvailable search aggregators are:\n  * `$or`\n  * `$and`\n\nAvailable search operators are:\n  * `$eq` → equal\n  * `$neq` → not equal\n  * `$lt` → less than\n  * `$le` → less or equal than\n  * `$gt` → greater than\n  * `$ge` → greater or equal than\n  * `$lk` → like\n  * `$nk` → not like\n  * `$in` → in\n  * `$ni` → not in\n\nExamples without nested aggregators:\n  ```\n  search={\n    \"$or\":[\n      {\"host.name\":{\"$eq\":\"name_1\"}},\n      {\"host.name\":{\"$eq\":\"name_2\"}}\n    ]\n  }\n  ```\n  ```\n  search={\n    \"$and\":[\n      {\"host.address\":{\"$rg\":\"^10\\.0\\.0\\.\\d+$\"}},\n      {\"host.name\":{\"$lk\":\"fr%\"}}\n    ]\n  }\n  ```\n\nExample with nested aggregators:\n  ```\n  search={\n    \"$or\":[\n      {\n        \"$and\":[\n          {\"host.address\":{\"$rg\":\"^10\\.0\\.0\\.\\d+$\"}},\n          {\"host.name\":{\"$lk\":\"fr%\"}}\n        ]\n      },\n      {\n        \"$and\":[\n          {\"host.address\":{\"$rg\":\"^192\\.168\\.0\\.\\d+$\"}},\n          {\"host.name\":{\"$lk\":\"us%\"}}\n        ]\n      }\n    ]\n  }\n  ```\n",
											"disabled": true
										}
									]
								},
								"description": "List all the hosts in real-time monitoring.\n\nThe available parameters to **search** / **sort_by** are:\n\n* host.id\n* host.name\n* host.alias\n* host.address\n* host.state\n* poller.id\n* service.display_name\n* host_group.id\n* host.is_acknowledged\n* host.downtime\n* host.criticality\n"
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/monitoring/hosts?show_service=true&search=cillum quis commodo&limit=20&page=4",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"monitoring",
												"hosts"
											],
											"query": [
												{
													"key": "show_service",
													"value": "true"
												},
												{
													"key": "search",
													"value": "cillum quis commodo"
												},
												{
													"key": "limit",
													"value": "20"
												},
												{
													"key": "page",
													"value": "4"
												}
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"result\": [\n    {\n      \"id\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"alias\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"display_name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"state\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"services\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"poller_id\": 1,\n      \"acknowledged\": false,\n      \"address_ip\": \"127.0.0.1\",\n      \"check_attempt\": 1,\n      \"checked\": true,\n      \"execution_time\": 0.070906,\n      \"icon_image\": \"ppm/operatingsystems-linux-snmp-linux-128.png\",\n      \"icon_image_alt\": \"\",\n      \"last_check\": \"1980-02-02T05:43:34.625Z\",\n      \"last_hard_state_change\": \"2022-08-05T10:43:02.077Z\",\n      \"last_state_change\": \"1948-11-25T13:12:41.089Z\",\n      \"last_time_down\": \"1945-06-23T19:43:00.867Z\",\n      \"last_time_unreachable\": \"2022-07-05T17:47:46.217Z\",\n      \"last_time_up\": \"1952-11-26T09:19:35.799Z\",\n      \"last_update\": \"2002-02-11T22:28:18.621Z\",\n      \"max_check_attempts\": 3,\n      \"output\": \"OK - 127.0.0.1 rta 0.100ms lost 0%\\n\",\n      \"passive_checks\": false,\n      \"state_type\": 0,\n      \"timezone\": \":Europe/Paris\",\n      \"scheduled_downtime_depth\": 0,\n      \"criticality\": 10\n    },\n    {\n      \"id\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"alias\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"display_name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"state\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"services\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"poller_id\": 1,\n      \"acknowledged\": false,\n      \"address_ip\": \"127.0.0.1\",\n      \"check_attempt\": 1,\n      \"checked\": true,\n      \"execution_time\": 0.070906,\n      \"icon_image\": \"ppm/operatingsystems-linux-snmp-linux-128.png\",\n      \"icon_image_alt\": \"\",\n      \"last_check\": \"2014-11-11T02:07:25.915Z\",\n      \"last_hard_state_change\": \"1966-04-15T04:04:02.849Z\",\n      \"last_state_change\": \"1962-12-26T10:26:12.593Z\",\n      \"last_time_down\": \"2004-09-19T21:36:42.944Z\",\n      \"last_time_unreachable\": \"1951-05-24T08:52:34.057Z\",\n      \"last_time_up\": \"1990-04-26T07:43:26.231Z\",\n      \"last_update\": \"1971-01-30T15:22:21.380Z\",\n      \"max_check_attempts\": 3,\n      \"output\": \"OK - 127.0.0.1 rta 0.100ms lost 0%\\n\",\n      \"passive_checks\": false,\n      \"state_type\": 0,\n      \"timezone\": \":Europe/Paris\",\n      \"scheduled_downtime_depth\": 0,\n      \"criticality\": 10\n    }\n  ],\n  \"meta\": {\n    \"page\": 1,\n    \"limit\": 10,\n    \"search\": {},\n    \"sort_by\": {},\n    \"total\": 1\n  }\n}"
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/monitoring/hosts?show_service=true&search=cillum quis commodo&limit=20&page=4",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"monitoring",
												"hosts"
											],
											"query": [
												{
													"key": "show_service",
													"value": "true"
												},
												{
													"key": "search",
													"value": "cillum quis commodo"
												},
												{
													"key": "limit",
													"value": "20"
												},
												{
													"key": "page",
													"value": "4"
												}
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 403,\n  \"message\": \"You are not authorized to access this resource\"\n}"
								},
								{
									"name": "Internal Server Error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/monitoring/hosts?show_service=true&search=cillum quis commodo&limit=20&page=4",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"monitoring",
												"hosts"
											],
											"query": [
												{
													"key": "show_service",
													"value": "true"
												},
												{
													"key": "search",
													"value": "cillum quis commodo"
												},
												{
													"key": "limit",
													"value": "20"
												},
												{
													"key": "page",
													"value": "4"
												}
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 500,\n  \"message\": \"Internal Server Error\"\n}"
								}
							]
						},
						{
							"name": "Unset severity of host",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Request successful.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"unsetseverity\",\n  \"object\": \"host\",\n  \"values\": \"{{host_severity_name}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Edge Cases",
					"item": []
				}
			]
		},
		{
			"name": "40 - Service group management",
			"item": [
				{
					"name": "Login with admin user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Login successful\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const responseJson = pm.response.json();\r",
									"pm.test(\"Account displayed in response corresponds to credentials\", function (){\r",
									"    pm.expect(responseJson.contact.alias).to.eql(pm.collectionVariables.get('api_login'));\r",
									"});\r",
									"\r",
									"pm.collectionVariables.set(\"token\", responseJson.security.token);\r",
									"pm.collectionVariables.set(\"user\", responseJson.contact.alias);\r",
									"pm.collectionVariables.set(\"current_user_id\", responseJson.contact.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login}}\",\r\n      \"password\": \"{{api_password}}\"\r\n    }\r\n  }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "List all service groups before service group creation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"List of host groups successfully fetched.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const responseJson = pm.response.json();\r",
									"\r",
									"pm.collectionVariables.set(\"service_groups_before_creation\", responseJson.meta.total);\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/monitoring/servicegroups",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"monitoring",
								"servicegroups"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add service group",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request successful.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let value = pm.collectionVariables.get(\"count_service_group\");\r",
									"if (!value) {value = 0;}\r",
									"value++;\r",
									"pm.collectionVariables.set(\"count_service_group\", value);\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"service_group_name\", \"Service Group 01\");\r",
									"pm.collectionVariables.set(\"service_group_alias\", \"Service Group 01 Alias\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "centreon-auth-token",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"action\": \"add\",\n  \"object\": \"sg\",\n  \"values\": \"{{service_group_name}};{{service_group_alias}}\"\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
							"protocol": "{{protocol}}",
							"host": [
								"{{server}}"
							],
							"path": [
								"centreon",
								"api",
								"index.php"
							],
							"query": [
								{
									"key": "action",
									"value": "action"
								},
								{
									"key": "object",
									"value": "centreon_clapi"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[CLAPI] List service groups",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"List of service groups successfully fetched.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The correct number of service groups has been added.\", function() {\r",
									"    pm.expect(responseJson.result.length).to.eql(pm.collectionVariables.get(\"service_groups_before_creation\") + pm.collectionVariables.get(\"count_service_group\"));\r",
									"    pm.collectionVariables.set(\"count_service_group\", responseJson.result.length);\r",
									"    pm.collectionVariables.unset(\"service_groups_before_creation\");\r",
									"}) \r",
									"\r",
									"try {\r",
									"    for (var i = 0; i < responseJson.result.length; i++) {\r",
									"        if (pm.collectionVariables.get(\"service_group_name\") == responseJson.result[i].name)\r",
									"        {\r",
									"            pm.test(\"Newly created service group is registered in the list.\", function() {\r",
									"                pm.expect(pm.collectionVariables.get(\"service_group_name\")).to.eql(responseJson.result[i].name);\r",
									"                pm.expect(pm.collectionVariables.get(\"service_group_alias\")).to.eql(responseJson.result[i].alias);\r",
									"            });\r",
									"            break;\r",
									"        }\r",
									"    }\r",
									"    if (i == responseJson.result.length)\r",
									"        pm.test(\"Added service group was found\", function() {\r",
									"            pm.expect(true).to.eql(false);\r",
									"        });\r",
									"}\r",
									"catch (e) {}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "centreon-auth-token",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"action\": \"show\",\n  \"object\": \"sg\"\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
							"protocol": "{{protocol}}",
							"host": [
								"{{server}}"
							],
							"path": [
								"centreon",
								"api",
								"index.php"
							],
							"query": [
								{
									"key": "action",
									"value": "action"
								},
								{
									"key": "object",
									"value": "centreon_clapi"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List all service groups after service group creation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"List of host groups successfully fetched.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const responseJson = pm.response.json();\r",
									"pm.test(\"The correct number of service groups has been added.\", function() {\r",
									"    pm.expect(responseJson.meta.total).to.eql(pm.collectionVariables.get(\"service_groups_before_creation\") + pm.collectionVariables.get(\"count_service_group\"));\r",
									"    pm.collectionVariables.set(\"count_service_group\", responseJson.meta.total);\r",
									"    pm.collectionVariables.unset(\"service_groups_before_creation\");\r",
									"}) \r",
									"\r",
									"try {\r",
									"    for (var i = 0; i < responseJson.meta.total; i++) {\r",
									"        if (pm.collectionVariables.get(\"service_group_name\") == responseJson.result[i].name)\r",
									"        {\r",
									"            pm.test(\"Newly created service group is registered in the list.\", function() {\r",
									"                pm.expect(pm.collectionVariables.get(\"service_group_name\")).to.eql(responseJson.result[i].name);\r",
									"                pm.expect(pm.collectionVariables.get(\"service_group_alias\")).to.eql(responseJson.result[i].alias);\r",
									"            });\r",
									"            break;\r",
									"        }\r",
									"    }\r",
									"    if (i == responseJson.meta.total)\r",
									"        pm.test(\"Added service group was found\", function() {\r",
									"            pm.expect(true).to.eql(false);\r",
									"        });\r",
									"}\r",
									"catch (e) {}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/monitoring/servicegroups",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"monitoring",
								"servicegroups"
							]
						},
						"description": "Return all host group configurations.\n\nThe available parameters to **search** / **sort_by** are:\n\n* id\n* name\n* alias\n* is_activated\n"
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "X-AUTH-TOKEN",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/configuration/hosts/groups",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configuration",
										"hosts",
										"groups"
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"result\": [\n    {\n      \"id\": 1,\n      \"name\": \"MySQL-Servers\",\n      \"alias\": \"All MySQL Servers\",\n      \"notes\": \"my notes\",\n      \"notes_url\": \"notes url\",\n      \"action_url\": \"action url\",\n      \"icon\": {\n        \"id\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"name\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"path\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"comment\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"icon_map\": {\n        \"id\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"name\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"path\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"comment\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"geo_coords\": \"48.51,2.20\",\n      \"rrd\": 2,\n      \"comment\": \"incididunt sint quis\",\n      \"is_activated\": false\n    },\n    {\n      \"id\": 1,\n      \"name\": \"MySQL-Servers\",\n      \"alias\": \"All MySQL Servers\",\n      \"notes\": \"my notes\",\n      \"notes_url\": \"notes url\",\n      \"action_url\": \"action url\",\n      \"icon\": {\n        \"id\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"name\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"path\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"comment\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"icon_map\": {\n        \"id\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"name\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"path\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"comment\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"geo_coords\": \"48.51,2.20\",\n      \"rrd\": 2,\n      \"comment\": \"voluptate eu\",\n      \"is_activated\": true\n    }\n  ],\n  \"meta\": {\n    \"page\": 1,\n    \"limit\": 10,\n    \"search\": {},\n    \"sort_by\": {},\n    \"total\": 1\n  }\n}"
						},
						{
							"name": "Forbidden",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "X-AUTH-TOKEN",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/configuration/hosts/groups",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configuration",
										"hosts",
										"groups"
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"code\": 403,\n  \"message\": \"You are not authorized to access this resource\"\n}"
						},
						{
							"name": "Internal Server Error",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "X-AUTH-TOKEN",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/configuration/hosts/groups",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configuration",
										"hosts",
										"groups"
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"code\": 500,\n  \"message\": \"Internal Server Error\"\n}"
						}
					]
				},
				{
					"name": "Set parameters for newly created service group",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const parameters = pm.collectionVariables.get(\"list_of_parameters\");\r",
									"\r",
									"pm.test(\"Parameter \" + pm.collectionVariables.get(\"current_parameter\") + \" was updated with \" + pm.collectionVariables.get(\"current_value\"), function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"if (pm.collectionVariables.get(\"name\") && pm.collectionVariables.get(\"name\") != pm.collectionVariables.get(\"service_group_name\")) {\r",
									"    pm.collectionVariables.set(\"service_group_name\", pm.collectionVariables.get(\"name\"));\r",
									"}\r",
									"\r",
									"if (pm.collectionVariables.get(\"alias\") && pm.collectionVariables.get(\"alias\") != pm.collectionVariables.get(\"service_group_alias\")) {\r",
									"    pm.collectionVariables.set(\"service_group_alias\", pm.collectionVariables.get(\"alias\"));\r",
									"}\r",
									"\r",
									"if (parameters && parameters.length > 0) {\r",
									"    postman.setNextRequest(\"Set parameters for newly created service group\");\r",
									"} else {\r",
									"    pm.collectionVariables.unset(\"current_parameter\");\r",
									"    pm.collectionVariables.unset(\"current_value\");\r",
									"    pm.collectionVariables.unset(\"list_of_parameters\");\r",
									"    pm.collectionVariables.unset(\"list_of_values\");\r",
									"    postman.setNextRequest(\"[CLAPI] List service groups after service group update\");\r",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let parameters = pm.collectionVariables.get(\"list_of_parameters\");\r",
									"let values = pm.collectionVariables.get(\"list_of_values\");\r",
									"let parameters_to_check = pm.collectionVariables.get(\"parameters_to_check\");\r",
									"\r",
									"if (!parameters || parameters.length == 0) {\r",
									"    parameters = [\"name\", \"alias\", \"comment\"]    \r",
									"    values = [\"Service_Group_Ping\", \"Service_Group_Ping\", \"Service_Group_Ping\"];\r",
									"    parameters_to_check = [];\r",
									"}\r",
									"\r",
									"let current_parameter = parameters.shift();\r",
									"pm.collectionVariables.set(\"current_parameter\", current_parameter);\r",
									"pm.collectionVariables.set(\"list_of_parameters\", parameters);\r",
									"let current_value = values.shift();\r",
									"pm.collectionVariables.set(\"current_value\", current_value);\r",
									"pm.collectionVariables.set(\"list_of_values\", values);\r",
									"\r",
									"pm.collectionVariables.set(current_parameter, current_value);\r",
									"\r",
									"parameters_to_check.push(current_parameter);\r",
									"pm.collectionVariables.set(\"parameters_to_check\", parameters_to_check);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "centreon-auth-token",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"action\": \"setparam\",\n  \"object\": \"sg\",\n  \"values\": \"{{service_group_name}};{{current_parameter}};{{current_value}}\"\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
							"protocol": "{{protocol}}",
							"host": [
								"{{server}}"
							],
							"path": [
								"centreon",
								"api",
								"index.php"
							],
							"query": [
								{
									"key": "action",
									"value": "action"
								},
								{
									"key": "object",
									"value": "centreon_clapi"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[CLAPI] List service groups after service group update",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"List of host groups successfully fetched.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const responseJson = pm.response.json();\r",
									"var parameters_to_check = pm.collectionVariables.get(\"parameters_to_check\");\r",
									"\r",
									"if(parameters_to_check) {\r",
									"    for(let l = 0; l < responseJson.result.length; l++) {\r",
									"        if(responseJson.result[l].name == pm.collectionVariables.get(\"service_group_name\")) {\r",
									"            const keys = Object.keys(responseJson.result[l]);\r",
									"            const values = Object.values(responseJson.result[l]);\r",
									"            for(let i = 0; i < parameters_to_check.length; i++) {\r",
									"                var j = keys.indexOf(parameters_to_check[i]);\r",
									"                if(j != -1) {\r",
									"                    pm.test(\"The value \" + pm.collectionVariables.get(parameters_to_check[i])  + \" was found for \" + pm.collectionVariables.get(\"service_group_name\") + \"'s parameter \" + parameters_to_check[i], function() {pm.expect(pm.collectionVariables.get(parameters_to_check[i])).to.eql(values[j]);}) \r",
									"                }\r",
									"            pm.collectionVariables.unset(parameters_to_check[i]);\r",
									"            }\r",
									"        pm.collectionVariables.unset(\"parameters_to_check\");           \r",
									"        }\r",
									"    }\r",
									"}\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "centreon-auth-token",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"action\": \"show\",\n  \"object\": \"sg\"\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
							"protocol": "{{protocol}}",
							"host": [
								"{{server}}"
							],
							"path": [
								"centreon",
								"api",
								"index.php"
							],
							"query": [
								{
									"key": "action",
									"value": "action"
								},
								{
									"key": "object",
									"value": "centreon_clapi"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "42 - Service management",
			"item": [
				{
					"name": "Login on admin user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Login successful\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const responseJson = pm.response.json();\r",
									"pm.test(\"Account displayed in response corresponds to credentials\", function (){\r",
									"    pm.expect(responseJson.contact.alias).to.eql(pm.collectionVariables.get('api_login'));\r",
									"});\r",
									"\r",
									"pm.collectionVariables.set(\"token\", responseJson.security.token);\r",
									"pm.collectionVariables.set(\"user\", responseJson.contact.alias);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"security\": {\n    \"credentials\": {\n      \"login\": \"{{api_login}}\",\n      \"password\": \"{{api_password}}\"\n    }\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"login"
							],
							"variable": [
								{
									"key": "protocol",
									"value": "{{protocol}}",
									"description": "HTTP schema (This can only be one of http,https)"
								},
								{
									"key": "server",
									"value": "{{server}}",
									"description": "IP address or hostname of Centreon server"
								},
								{
									"key": "port",
									"value": "{{port}}",
									"description": "Port used by HTTP server"
								},
								{
									"key": "version",
									"value": "{{version}}",
									"description": "Version of the API"
								}
							]
						},
						"description": "Entry point to retrieve an authentication token."
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "X-AUTH-TOKEN",
										"value": "<API Key>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"security\": {\n    \"credentials\": {\n      \"login\": \"admin\",\n      \"password\": \"centreon\"\n    }\n  }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"contact\": {\n    \"id\": 3,\n    \"name\": \"Admin\",\n    \"alias\": \"admin\",\n    \"email\": \"01A@CrLEnzWrYdgVBaUzldbG.wutx\",\n    \"is_admin\": true\n  },\n  \"security\": {\n    \"token\": \"9ed937d3911d212eae59300ac6977352\"\n  }\n}"
						},
						{
							"name": "Indicates that the server cannot or will not process the request due to something that is perceived to be\na client error (e.g., malformed request syntax, invalid request message framing)\n",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "X-AUTH-TOKEN",
										"value": "<API Key>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"security\": {\n    \"credentials\": {\n      \"login\": \"admin\",\n      \"password\": \"centreon\"\n    }\n  }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"code\": 400,\n  \"message\": \"Property 'name' not found\"\n}"
						},
						{
							"name": "Unauthorized",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "X-AUTH-TOKEN",
										"value": "<API Key>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"security\": {\n    \"credentials\": {\n      \"login\": \"admin\",\n      \"password\": \"centreon\"\n    }\n  }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"code\": 401,\n  \"message\": \"exercitation sit\"\n}"
						},
						{
							"name": "Internal Server Error",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "X-AUTH-TOKEN",
										"value": "<API Key>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"security\": {\n    \"credentials\": {\n      \"login\": \"admin\",\n      \"password\": \"centreon\"\n    }\n  }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"code\": 500,\n  \"message\": \"Internal Server Error\"\n}"
						}
					]
				},
				{
					"name": "List all services and add ping services to service group",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Page \" + pm.collectionVariables.get(\"pageNumber\") + \"List of services successfully fetched.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const responseJson = pm.response.json();\r",
									"if(!pm.collectionVariables.get(\"numberOfPagesToCheck\")) {\r",
									"    pm.collectionVariables.set(\"numberOfPagesToCheck\", Math.ceil(responseJson.meta.total/responseJson.meta.limit));\r",
									"}\r",
									"\r",
									"var pageNumber = pm.collectionVariables.get(\"pageNumber\");\r",
									"if(pageNumber > pm.collectionVariables.get(\"numberOfPagesToCheck\")) {\r",
									"    postman.setNextRequest(\"Create a new host to later assign service to\");\r",
									"    pm.collectionVariables.unset(\"pageNumber\");\r",
									"    pm.collectionVariables.unset(\"numberOfPagesToCheck\");\r",
									"} else {\r",
									"    for(var i = 0; i < responseJson.result.length; i++) {\r",
									"        if(responseJson.result[i].description == \"Ping\") {\r",
									"            hostsToAddPingServicesOntoServiceGroup = pm.collectionVariables.get(\"hostsToAddPingServicesOntoServiceGroup\");\r",
									"            if (!hostsToAddPingServicesOntoServiceGroup) {\r",
									"                hostsToAddPingServicesOntoServiceGroup = [];\r",
									"            }\r",
									"            hostsToAddPingServicesOntoServiceGroup.push(responseJson.result[i].host.name);\r",
									"            pm.collectionVariables.set(\"hostsToAddPingServicesOntoServiceGroup\", hostsToAddPingServicesOntoServiceGroup);\r",
									"        }\r",
									"    }\r",
									"    pageNumber++;\r",
									"    pm.collectionVariables.set(\"pageNumber\", pageNumber);\r",
									"    postman.setNextRequest(\"List all services and add ping services to service group\");\r",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"if(!pm.collectionVariables.get(\"pageNumber\")) {\r",
									"    pm.collectionVariables.set(\"pageNumber\", 1);\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/monitoring/services?page={{pageNumber}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"monitoring",
								"services"
							],
							"query": [
								{
									"key": "page",
									"value": "{{pageNumber}}",
									"description": "Retrieve only data matching the defined search value.\nSimple search can be done like the following example: ``` search={\"host.name\":\"Central\"} ```\nComplex search can be done with aggregators and operators.\nAvailable search aggregators are:\n  * `$or`\n  * `$and`\n\nAvailable search operators are:\n  * `$eq` → equal\n  * `$neq` → not equal\n  * `$lt` → less than\n  * `$le` → less or equal than\n  * `$gt` → greater than\n  * `$ge` → greater or equal than\n  * `$lk` → like\n  * `$nk` → not like\n  * `$in` → in\n  * `$ni` → not in\n\nExamples without nested aggregators:\n  ```\n  search={\n    \"$or\":[\n      {\"host.name\":{\"$eq\":\"name_1\"}},\n      {\"host.name\":{\"$eq\":\"name_2\"}}\n    ]\n  }\n  ```\n  ```\n  search={\n    \"$and\":[\n      {\"host.address\":{\"$rg\":\"^10\\.0\\.0\\.\\d+$\"}},\n      {\"host.name\":{\"$lk\":\"fr%\"}}\n    ]\n  }\n  ```\n\nExample with nested aggregators:\n  ```\n  search={\n    \"$or\":[\n      {\n        \"$and\":[\n          {\"host.address\":{\"$rg\":\"^10\\.0\\.0\\.\\d+$\"}},\n          {\"host.name\":{\"$lk\":\"fr%\"}}\n        ]\n      },\n      {\n        \"$and\":[\n          {\"host.address\":{\"$rg\":\"^192\\.168\\.0\\.\\d+$\"}},\n          {\"host.name\":{\"$lk\":\"us%\"}}\n        ]\n      }\n    ]\n  }\n  ```\n"
								}
							]
						},
						"description": "List all the hosts in real-time monitoring.\n\nThe available parameters to **search** / **sort_by** are:\n\n* host.id\n* host.name\n* host.alias\n* host.address\n* host.state\n* poller.id\n* service.display_name\n* host_group.id\n* host.is_acknowledged\n* host.downtime\n* host.criticality\n"
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "X-AUTH-TOKEN",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/monitoring/hosts?show_service=true&search=cillum quis commodo&limit=20&page=4",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"monitoring",
										"hosts"
									],
									"query": [
										{
											"key": "show_service",
											"value": "true"
										},
										{
											"key": "search",
											"value": "cillum quis commodo"
										},
										{
											"key": "limit",
											"value": "20"
										},
										{
											"key": "page",
											"value": "4"
										}
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"result\": [\n    {\n      \"id\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"alias\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"display_name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"state\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"services\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"poller_id\": 1,\n      \"acknowledged\": false,\n      \"address_ip\": \"127.0.0.1\",\n      \"check_attempt\": 1,\n      \"checked\": true,\n      \"execution_time\": 0.070906,\n      \"icon_image\": \"ppm/operatingsystems-linux-snmp-linux-128.png\",\n      \"icon_image_alt\": \"\",\n      \"last_check\": \"1980-02-02T05:43:34.625Z\",\n      \"last_hard_state_change\": \"2022-08-05T10:43:02.077Z\",\n      \"last_state_change\": \"1948-11-25T13:12:41.089Z\",\n      \"last_time_down\": \"1945-06-23T19:43:00.867Z\",\n      \"last_time_unreachable\": \"2022-07-05T17:47:46.217Z\",\n      \"last_time_up\": \"1952-11-26T09:19:35.799Z\",\n      \"last_update\": \"2002-02-11T22:28:18.621Z\",\n      \"max_check_attempts\": 3,\n      \"output\": \"OK - 127.0.0.1 rta 0.100ms lost 0%\\n\",\n      \"passive_checks\": false,\n      \"state_type\": 0,\n      \"timezone\": \":Europe/Paris\",\n      \"scheduled_downtime_depth\": 0,\n      \"criticality\": 10\n    },\n    {\n      \"id\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"alias\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"display_name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"state\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"services\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"poller_id\": 1,\n      \"acknowledged\": false,\n      \"address_ip\": \"127.0.0.1\",\n      \"check_attempt\": 1,\n      \"checked\": true,\n      \"execution_time\": 0.070906,\n      \"icon_image\": \"ppm/operatingsystems-linux-snmp-linux-128.png\",\n      \"icon_image_alt\": \"\",\n      \"last_check\": \"2014-11-11T02:07:25.915Z\",\n      \"last_hard_state_change\": \"1966-04-15T04:04:02.849Z\",\n      \"last_state_change\": \"1962-12-26T10:26:12.593Z\",\n      \"last_time_down\": \"2004-09-19T21:36:42.944Z\",\n      \"last_time_unreachable\": \"1951-05-24T08:52:34.057Z\",\n      \"last_time_up\": \"1990-04-26T07:43:26.231Z\",\n      \"last_update\": \"1971-01-30T15:22:21.380Z\",\n      \"max_check_attempts\": 3,\n      \"output\": \"OK - 127.0.0.1 rta 0.100ms lost 0%\\n\",\n      \"passive_checks\": false,\n      \"state_type\": 0,\n      \"timezone\": \":Europe/Paris\",\n      \"scheduled_downtime_depth\": 0,\n      \"criticality\": 10\n    }\n  ],\n  \"meta\": {\n    \"page\": 1,\n    \"limit\": 10,\n    \"search\": {},\n    \"sort_by\": {},\n    \"total\": 1\n  }\n}"
						},
						{
							"name": "Forbidden",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "X-AUTH-TOKEN",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/monitoring/hosts?show_service=true&search=cillum quis commodo&limit=20&page=4",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"monitoring",
										"hosts"
									],
									"query": [
										{
											"key": "show_service",
											"value": "true"
										},
										{
											"key": "search",
											"value": "cillum quis commodo"
										},
										{
											"key": "limit",
											"value": "20"
										},
										{
											"key": "page",
											"value": "4"
										}
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"code\": 403,\n  \"message\": \"You are not authorized to access this resource\"\n}"
						},
						{
							"name": "Internal Server Error",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "X-AUTH-TOKEN",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/monitoring/hosts?show_service=true&search=cillum quis commodo&limit=20&page=4",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"monitoring",
										"hosts"
									],
									"query": [
										{
											"key": "show_service",
											"value": "true"
										},
										{
											"key": "search",
											"value": "cillum quis commodo"
										},
										{
											"key": "limit",
											"value": "20"
										},
										{
											"key": "page",
											"value": "4"
										}
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"code\": 500,\n  \"message\": \"Internal Server Error\"\n}"
						}
					]
				},
				{
					"name": "Create a new host to later assign service to",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"New host has successfully been created.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"hostServiceName\", \"Host_Ping_Service\");\r",
									"pm.collectionVariables.set(\"hostServiceDescription\", \"Host_Ping_Service\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "centreon-auth-token",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"action\": \"add\",\n  \"object\": \"host\",\n  \"values\": \"{{hostServiceName}};{{hostServiceDescription}};127.0.0.10;;central;{{host_group_name}};\"\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
							"protocol": "{{protocol}}",
							"host": [
								"{{server}}"
							],
							"path": [
								"centreon",
								"api",
								"index.php"
							],
							"query": [
								{
									"key": "action",
									"value": "action"
								},
								{
									"key": "object",
									"value": "centreon_clapi"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create a new service",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"New service has successfully been created.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"serviceDescription\", \"Ping\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "centreon-auth-token",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"action\": \"add\",\n  \"object\": \"service\",\n  \"values\": \"{{hostServiceName}};{{serviceDescription}};Base-Ping-LAN\"\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
							"protocol": "{{protocol}}",
							"host": [
								"{{server}}"
							],
							"path": [
								"centreon",
								"api",
								"index.php"
							],
							"query": [
								{
									"key": "action",
									"value": "action"
								},
								{
									"key": "object",
									"value": "centreon_clapi"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Export configuration after host and service creation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"setTimeout(function(){}, [2000]);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "centreon-auth-token",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"action\": \"APPLYCFG\",\n  \"values\": \"Central\"\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
							"protocol": "{{protocol}}",
							"host": [
								"{{server}}"
							],
							"path": [
								"centreon",
								"api",
								"index.php"
							],
							"query": [
								{
									"key": "action",
									"value": "action"
								},
								{
									"key": "object",
									"value": "centreon_clapi"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List all hosts and register newly created host ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"List of hosts successfully fetched.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const responseJson = pm.response.json();\r",
									"if(!pm.collectionVariables.get(\"numberOfPagesToCheck\")) {\r",
									"    pm.collectionVariables.set(\"numberOfPagesToCheck\", Math.ceil(responseJson.meta.total/responseJson.meta.limit));\r",
									"}\r",
									"\r",
									"var pageNumber = pm.collectionVariables.get(\"pageNumber\");\r",
									"if(pageNumber > pm.collectionVariables.get(\"numberOfPagesToCheck\")) {\r",
									"    pm.test(\"Host was not found.\", function() {\r",
									"        pm.expect(true).to.eql(false);\r",
									"    })\r",
									"    postman.setNextRequest(null);\r",
									"    pm.collectionVariables.unset(\"pageNumber\");\r",
									"    pm.collectionVariables.unset(\"numberOfPagesToCheck\");\r",
									"} else {\r",
									"    for(var i = 0; i < responseJson.result.length; i++) {\r",
									"        console.log(responseJson.result[i].name);\r",
									"        if(responseJson.result[i].name == pm.collectionVariables.get(\"hostServiceName\")) {\r",
									"            pm.test(\"Host was found on page \" + pageNumber, function() {\r",
									"                true;\r",
									"            });\r",
									"            pm.collectionVariables.unset(\"pageNumber\");\r",
									"            pm.collectionVariables.unset(\"numberOfPagesToCheck\");\r",
									"            pm.collectionVariables.set(\"hostServiceId\", responseJson.result[i].id);\r",
									"            postman.setNextRequest(\"Get this host and register service ID\");\r",
									"            break;\r",
									"        }\r",
									"    }\r",
									"    if (i == responseJson.result.length) {\r",
									"        pm.test(\"Select host was not found on page \" + pageNumber, function() {\r",
									"            true;\r",
									"        });\r",
									"        pageNumber++;\r",
									"        pm.collectionVariables.set(\"pageNumber\", pageNumber);\r",
									"        postman.setNextRequest(\"List all hosts and register newly created host ID\");\r",
									"    }\r",
									"}\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"if(!pm.collectionVariables.get(\"pageNumber\")) {\r",
									"    pm.collectionVariables.set(\"pageNumber\", 1);\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/monitoring/hosts?page={{pageNumber}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"monitoring",
								"hosts"
							],
							"query": [
								{
									"key": "search",
									"value": "",
									"description": "Retrieve only data matching the defined search value.\nSimple search can be done like the following example: ``` search={\"host.name\":\"Central\"} ```\nComplex search can be done with aggregators and operators.\nAvailable search aggregators are:\n  * `$or`\n  * `$and`\n\nAvailable search operators are:\n  * `$eq` → equal\n  * `$neq` → not equal\n  * `$lt` → less than\n  * `$le` → less or equal than\n  * `$gt` → greater than\n  * `$ge` → greater or equal than\n  * `$lk` → like\n  * `$nk` → not like\n  * `$in` → in\n  * `$ni` → not in\n\nExamples without nested aggregators:\n  ```\n  search={\n    \"$or\":[\n      {\"host.name\":{\"$eq\":\"name_1\"}},\n      {\"host.name\":{\"$eq\":\"name_2\"}}\n    ]\n  }\n  ```\n  ```\n  search={\n    \"$and\":[\n      {\"host.address\":{\"$rg\":\"^10\\.0\\.0\\.\\d+$\"}},\n      {\"host.name\":{\"$lk\":\"fr%\"}}\n    ]\n  }\n  ```\n\nExample with nested aggregators:\n  ```\n  search={\n    \"$or\":[\n      {\n        \"$and\":[\n          {\"host.address\":{\"$rg\":\"^10\\.0\\.0\\.\\d+$\"}},\n          {\"host.name\":{\"$lk\":\"fr%\"}}\n        ]\n      },\n      {\n        \"$and\":[\n          {\"host.address\":{\"$rg\":\"^192\\.168\\.0\\.\\d+$\"}},\n          {\"host.name\":{\"$lk\":\"us%\"}}\n        ]\n      }\n    ]\n  }\n  ```\n",
									"disabled": true
								},
								{
									"key": "page",
									"value": "{{pageNumber}}"
								}
							]
						},
						"description": "List all the hosts in real-time monitoring.\n\nThe available parameters to **search** / **sort_by** are:\n\n* host.id\n* host.name\n* host.alias\n* host.address\n* host.state\n* poller.id\n* service.display_name\n* host_group.id\n* host.is_acknowledged\n* host.downtime\n* host.criticality\n"
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "X-AUTH-TOKEN",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/monitoring/hosts?show_service=true&search=cillum quis commodo&limit=20&page=4",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"monitoring",
										"hosts"
									],
									"query": [
										{
											"key": "show_service",
											"value": "true"
										},
										{
											"key": "search",
											"value": "cillum quis commodo"
										},
										{
											"key": "limit",
											"value": "20"
										},
										{
											"key": "page",
											"value": "4"
										}
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"result\": [\n    {\n      \"id\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"alias\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"display_name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"state\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"services\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"poller_id\": 1,\n      \"acknowledged\": false,\n      \"address_ip\": \"127.0.0.1\",\n      \"check_attempt\": 1,\n      \"checked\": true,\n      \"execution_time\": 0.070906,\n      \"icon_image\": \"ppm/operatingsystems-linux-snmp-linux-128.png\",\n      \"icon_image_alt\": \"\",\n      \"last_check\": \"1980-02-02T05:43:34.625Z\",\n      \"last_hard_state_change\": \"2022-08-05T10:43:02.077Z\",\n      \"last_state_change\": \"1948-11-25T13:12:41.089Z\",\n      \"last_time_down\": \"1945-06-23T19:43:00.867Z\",\n      \"last_time_unreachable\": \"2022-07-05T17:47:46.217Z\",\n      \"last_time_up\": \"1952-11-26T09:19:35.799Z\",\n      \"last_update\": \"2002-02-11T22:28:18.621Z\",\n      \"max_check_attempts\": 3,\n      \"output\": \"OK - 127.0.0.1 rta 0.100ms lost 0%\\n\",\n      \"passive_checks\": false,\n      \"state_type\": 0,\n      \"timezone\": \":Europe/Paris\",\n      \"scheduled_downtime_depth\": 0,\n      \"criticality\": 10\n    },\n    {\n      \"id\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"alias\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"display_name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"state\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"services\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"poller_id\": 1,\n      \"acknowledged\": false,\n      \"address_ip\": \"127.0.0.1\",\n      \"check_attempt\": 1,\n      \"checked\": true,\n      \"execution_time\": 0.070906,\n      \"icon_image\": \"ppm/operatingsystems-linux-snmp-linux-128.png\",\n      \"icon_image_alt\": \"\",\n      \"last_check\": \"2014-11-11T02:07:25.915Z\",\n      \"last_hard_state_change\": \"1966-04-15T04:04:02.849Z\",\n      \"last_state_change\": \"1962-12-26T10:26:12.593Z\",\n      \"last_time_down\": \"2004-09-19T21:36:42.944Z\",\n      \"last_time_unreachable\": \"1951-05-24T08:52:34.057Z\",\n      \"last_time_up\": \"1990-04-26T07:43:26.231Z\",\n      \"last_update\": \"1971-01-30T15:22:21.380Z\",\n      \"max_check_attempts\": 3,\n      \"output\": \"OK - 127.0.0.1 rta 0.100ms lost 0%\\n\",\n      \"passive_checks\": false,\n      \"state_type\": 0,\n      \"timezone\": \":Europe/Paris\",\n      \"scheduled_downtime_depth\": 0,\n      \"criticality\": 10\n    }\n  ],\n  \"meta\": {\n    \"page\": 1,\n    \"limit\": 10,\n    \"search\": {},\n    \"sort_by\": {},\n    \"total\": 1\n  }\n}"
						},
						{
							"name": "Forbidden",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "X-AUTH-TOKEN",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/monitoring/hosts?show_service=true&search=cillum quis commodo&limit=20&page=4",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"monitoring",
										"hosts"
									],
									"query": [
										{
											"key": "show_service",
											"value": "true"
										},
										{
											"key": "search",
											"value": "cillum quis commodo"
										},
										{
											"key": "limit",
											"value": "20"
										},
										{
											"key": "page",
											"value": "4"
										}
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"code\": 403,\n  \"message\": \"You are not authorized to access this resource\"\n}"
						},
						{
							"name": "Internal Server Error",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "X-AUTH-TOKEN",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/monitoring/hosts?show_service=true&search=cillum quis commodo&limit=20&page=4",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"monitoring",
										"hosts"
									],
									"query": [
										{
											"key": "show_service",
											"value": "true"
										},
										{
											"key": "search",
											"value": "cillum quis commodo"
										},
										{
											"key": "limit",
											"value": "20"
										},
										{
											"key": "page",
											"value": "4"
										}
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"code\": 500,\n  \"message\": \"Internal Server Error\"\n}"
						}
					]
				},
				{
					"name": "Get this host and register service ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Host successfully fetched.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const responseJson = pm.response.json();\r",
									"pm.collectionVariables.set(\"serviceId\", responseJson.services[0].id);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/monitoring/hosts/{{hostServiceId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"monitoring",
								"hosts",
								"{{hostServiceId}}"
							]
						},
						"description": "List all the hosts in real-time monitoring.\n\nThe available parameters to **search** / **sort_by** are:\n\n* host.id\n* host.name\n* host.alias\n* host.address\n* host.state\n* poller.id\n* service.display_name\n* host_group.id\n* host.is_acknowledged\n* host.downtime\n* host.criticality\n"
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "X-AUTH-TOKEN",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/monitoring/hosts?show_service=true&search=cillum quis commodo&limit=20&page=4",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"monitoring",
										"hosts"
									],
									"query": [
										{
											"key": "show_service",
											"value": "true"
										},
										{
											"key": "search",
											"value": "cillum quis commodo"
										},
										{
											"key": "limit",
											"value": "20"
										},
										{
											"key": "page",
											"value": "4"
										}
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"result\": [\n    {\n      \"id\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"alias\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"display_name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"state\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"services\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"poller_id\": 1,\n      \"acknowledged\": false,\n      \"address_ip\": \"127.0.0.1\",\n      \"check_attempt\": 1,\n      \"checked\": true,\n      \"execution_time\": 0.070906,\n      \"icon_image\": \"ppm/operatingsystems-linux-snmp-linux-128.png\",\n      \"icon_image_alt\": \"\",\n      \"last_check\": \"1980-02-02T05:43:34.625Z\",\n      \"last_hard_state_change\": \"2022-08-05T10:43:02.077Z\",\n      \"last_state_change\": \"1948-11-25T13:12:41.089Z\",\n      \"last_time_down\": \"1945-06-23T19:43:00.867Z\",\n      \"last_time_unreachable\": \"2022-07-05T17:47:46.217Z\",\n      \"last_time_up\": \"1952-11-26T09:19:35.799Z\",\n      \"last_update\": \"2002-02-11T22:28:18.621Z\",\n      \"max_check_attempts\": 3,\n      \"output\": \"OK - 127.0.0.1 rta 0.100ms lost 0%\\n\",\n      \"passive_checks\": false,\n      \"state_type\": 0,\n      \"timezone\": \":Europe/Paris\",\n      \"scheduled_downtime_depth\": 0,\n      \"criticality\": 10\n    },\n    {\n      \"id\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"alias\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"display_name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"state\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"services\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"poller_id\": 1,\n      \"acknowledged\": false,\n      \"address_ip\": \"127.0.0.1\",\n      \"check_attempt\": 1,\n      \"checked\": true,\n      \"execution_time\": 0.070906,\n      \"icon_image\": \"ppm/operatingsystems-linux-snmp-linux-128.png\",\n      \"icon_image_alt\": \"\",\n      \"last_check\": \"2014-11-11T02:07:25.915Z\",\n      \"last_hard_state_change\": \"1966-04-15T04:04:02.849Z\",\n      \"last_state_change\": \"1962-12-26T10:26:12.593Z\",\n      \"last_time_down\": \"2004-09-19T21:36:42.944Z\",\n      \"last_time_unreachable\": \"1951-05-24T08:52:34.057Z\",\n      \"last_time_up\": \"1990-04-26T07:43:26.231Z\",\n      \"last_update\": \"1971-01-30T15:22:21.380Z\",\n      \"max_check_attempts\": 3,\n      \"output\": \"OK - 127.0.0.1 rta 0.100ms lost 0%\\n\",\n      \"passive_checks\": false,\n      \"state_type\": 0,\n      \"timezone\": \":Europe/Paris\",\n      \"scheduled_downtime_depth\": 0,\n      \"criticality\": 10\n    }\n  ],\n  \"meta\": {\n    \"page\": 1,\n    \"limit\": 10,\n    \"search\": {},\n    \"sort_by\": {},\n    \"total\": 1\n  }\n}"
						},
						{
							"name": "Forbidden",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "X-AUTH-TOKEN",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/monitoring/hosts?show_service=true&search=cillum quis commodo&limit=20&page=4",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"monitoring",
										"hosts"
									],
									"query": [
										{
											"key": "show_service",
											"value": "true"
										},
										{
											"key": "search",
											"value": "cillum quis commodo"
										},
										{
											"key": "limit",
											"value": "20"
										},
										{
											"key": "page",
											"value": "4"
										}
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"code\": 403,\n  \"message\": \"You are not authorized to access this resource\"\n}"
						},
						{
							"name": "Internal Server Error",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "X-AUTH-TOKEN",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/monitoring/hosts?show_service=true&search=cillum quis commodo&limit=20&page=4",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"monitoring",
										"hosts"
									],
									"query": [
										{
											"key": "show_service",
											"value": "true"
										},
										{
											"key": "search",
											"value": "cillum quis commodo"
										},
										{
											"key": "limit",
											"value": "20"
										},
										{
											"key": "page",
											"value": "4"
										}
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"code\": 500,\n  \"message\": \"Internal Server Error\"\n}"
						}
					]
				},
				{
					"name": "Set parameters for a specific newly created service",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const parameters = pm.collectionVariables.get(\"list_of_parameters\");\r",
									"\r",
									"pm.test(\"Parameter \" + pm.collectionVariables.get(\"current_parameter\") + \" was updated with \" + pm.collectionVariables.get(\"current_value\"), function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"if (pm.collectionVariables.get(\"description\") && pm.collectionVariables.get(\"description\") != pm.collectionVariables.get(\"serviceDescription\")) {\r",
									"    pm.collectionVariables.set(\"serviceDescription\", pm.collectionVariables.get(\"description\"));\r",
									"}\r",
									"\r",
									"if (parameters && parameters.length > 0) {\r",
									"    postman.setNextRequest(\"Set parameters for a specific newly created service\");\r",
									"} else {\r",
									"    pm.collectionVariables.unset(\"current_parameter\");\r",
									"    pm.collectionVariables.unset(\"current_value\");\r",
									"    pm.collectionVariables.unset(\"list_of_parameters\");\r",
									"    pm.collectionVariables.unset(\"list_of_values\");\r",
									"    postman.setNextRequest(\"Export configuration after service update\");\r",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let parameters = pm.collectionVariables.get(\"list_of_parameters\");\r",
									"let values = pm.collectionVariables.get(\"list_of_values\");\r",
									"let parameters_to_check = pm.collectionVariables.get(\"parameters_to_check\");\r",
									"\r",
									"if (!parameters || parameters.length == 0) {\r",
									"    parameters = [\"check_period\", \"max_check_attempts\", \"normal_check_interval\", \"retry_check_interval\", \"active_checks_enabled\", \"notifications_enabled\", \"notification_interval\", \"notification_period\", \"first_notification_delay\", \"recovery_notification_delay\", \"obsess_over_service\", \"check_freshness\", \"freshness_threshold\", \"event_handler_enabled\", \"event_handler\", \"notes\", \"icon_image\", \"icon_image_alt\", \"comment\", \"service_notification_options\"];\r",
									"    parameters_to_check = [];\r",
									"    pm.collectionVariables.set(\"parameters_to_check\", parameters_to_check);\r",
									"    values = [pm.collectionVariables.get(\"time_period_name\"), 6, 12, 1, 1, 1, 5, pm.collectionVariables.get(\"time_period_name\"), 30, 30, 1, 1, 5, 1, \"check-host-alive\", \"Service Test API\", \"ppm/applications-monitoring-centreon-central-centreon-128-2.png\", \"centreon-logo\", \"comment\", [\"w\", \"u\", \"c\", \"r\", \"s\"]];\r",
									"}\r",
									"\r",
									"let current_parameter = parameters.shift();\r",
									"pm.collectionVariables.set(\"current_parameter\", current_parameter);\r",
									"pm.collectionVariables.set(\"list_of_parameters\", parameters);\r",
									"let current_value = values.shift();\r",
									"pm.collectionVariables.set(\"current_value\", current_value);\r",
									"pm.collectionVariables.set(\"list_of_values\", values);\r",
									"\r",
									"pm.collectionVariables.set(current_parameter, current_value);\r",
									"\r",
									"parameters_to_check.push(current_parameter);\r",
									"pm.collectionVariables.set(\"parameters_to_check\", parameters_to_check);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "centreon-auth-token",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"action\":\"setparam\",\n  \"object\":\"service\",\n  \"values\": \"{{hostServiceName}};{{serviceDescription}};{{current_parameter}};{{current_value}}\"\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
							"protocol": "{{protocol}}",
							"host": [
								"{{server}}"
							],
							"path": [
								"centreon",
								"api",
								"index.php"
							],
							"query": [
								{
									"key": "action",
									"value": "action"
								},
								{
									"key": "object",
									"value": "centreon_clapi"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Export configuration after service update",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"setTimeout(function(){}, [2000]);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "centreon-auth-token",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"action\": \"APPLYCFG\",\n  \"values\": \"Central\"\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
							"protocol": "{{protocol}}",
							"host": [
								"{{server}}"
							],
							"path": [
								"centreon",
								"api",
								"index.php"
							],
							"query": [
								{
									"key": "action",
									"value": "action"
								},
								{
									"key": "object",
									"value": "centreon_clapi"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get parameters for a specific newly created service",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Service successfully fetched.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const responseJson = pm.response.json();\r",
									"const keys = Object.keys(responseJson.result[0]);\r",
									"const values = Object.values(responseJson.result[0]);\r",
									"var parameters_to_check = pm.collectionVariables.get(\"parameters_to_check\");\r",
									"\r",
									"for (let i = 0; i < parameters_to_check.length; i++) {\r",
									"    var j = keys.indexOf(parameters_to_check[i]);\r",
									"    if(j != -1) {\r",
									"        pm.test(\"Parameter \" + parameters_to_check[i] + \" now has value \" + pm.collectionVariables.get(parameters_to_check[i]), function() {\r",
									"            if (typeof pm.collectionVariables.get(parameters_to_check[i]) === 'number') {\r",
									"                pm.expect(pm.collectionVariables.get(parameters_to_check[i])).to.eql(parseInt(values[j]));\r",
									"            } else {\r",
									"                pm.expect(pm.collectionVariables.get(parameters_to_check[i])).to.eql(values[j]);\r",
									"            }\r",
									"            pm.collectionVariables.unset(parameters_to_check[i]);\r",
									"        }) \r",
									"    }\r",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let parameters_to_check = pm.collectionVariables.get(\"parameters_to_check\");\r",
									"if (parameters_to_check || parameters_to_check.length != 0) {\r",
									"    var final_parameter = \"\";\r",
									"    for(var i = 0; i < parameters_to_check.length; i++) {\r",
									"        if (parameters_to_check[i] == \"service_notification_options\") {\r",
									"            pm.collectionVariables.set(\"notification_options\", pm.collectionVariables.get(\"service_notification_options\"));\r",
									"            pm.collectionVariables.unset(\"service_notification_options\");\r",
									"            parameters_to_check[i] = \"notification_options\";\r",
									"            final_parameter = final_parameter.concat('|', \"notification_options\");\r",
									"        } else if (parameters_to_check[i] == \"recovery_notification_delay\") {  \r",
									"        \r",
									"        } else {\r",
									"        final_parameter = final_parameter.concat('|', parameters_to_check[i]);\r",
									"        }\r",
									"    }\r",
									"    pm.collectionVariables.set(\"list_of_parameters_to_check\", final_parameter.substring(1));\r",
									"} "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "centreon-auth-token",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"action\":\"getparam\",\n  \"object\":\"service\",\n  \"values\": \"{{hostServiceName}};{{serviceDescription}};{{list_of_parameters_to_check}}\"\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
							"protocol": "{{protocol}}",
							"host": [
								"{{server}}"
							],
							"path": [
								"centreon",
								"api",
								"index.php"
							],
							"query": [
								{
									"key": "action",
									"value": "action"
								},
								{
									"key": "object",
									"value": "centreon_clapi"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Check service group belonging to updated service",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"List of host group's updated host successfully fetched.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const responseJson = pm.response.json();\r",
									"pm.test(\"Service belongs to only one service group.\", function() {\r",
									"    pm.expect(responseJson.result.length).to.eql(1);\r",
									"})\r",
									"\r",
									"pm.test(\"This service group is the one we have assigned for it.\", function() {\r",
									"    pm.expect(responseJson.result[0].name).to.eql(pm.collectionVariables.get(\"service_group_name\"));\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/monitoring/hosts/{{hostServiceId}}/services/{{serviceId}}/servicegroups",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"monitoring",
								"hosts",
								"{{hostServiceId}}",
								"services",
								"{{serviceId}}",
								"servicegroups"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "43 - Service category management",
			"item": [
				{
					"name": "Show service category list [CLAPI]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Service category list successfully fetched.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const responseJson = pm.response.json();\r",
									"pm.collectionVariables.set(\"service_categories_before_creation\", responseJson.result.length);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"service_category_name\", \"Service Category\");\r",
									"pm.collectionVariables.set(\"service_category_alias\", \"Service Category Alias\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "centreon-auth-token",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"action\": \"show\",\n  \"object\": \"sc\"\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
							"protocol": "{{protocol}}",
							"host": [
								"{{server}}"
							],
							"path": [
								"centreon",
								"api",
								"index.php"
							],
							"query": [
								{
									"key": "action",
									"value": "action"
								},
								{
									"key": "object",
									"value": "centreon_clapi"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List all service categories",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"A list of host categories has been successfully fetched.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/monitoring/services/categories",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"monitoring",
								"services",
								"categories"
							]
						},
						"description": "List of all host category configurations\n"
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "X-AUTH-TOKEN",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/configuration/hosts/categories",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configuration",
										"hosts",
										"categories"
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"result\": [\n    {\n      \"id\": 1,\n      \"name\": \"host-category\",\n      \"alias\": \"host-category\",\n      \"is_activated\": false,\n      \"comments\": \"minim laborum\"\n    },\n    {\n      \"id\": 1,\n      \"name\": \"host-category\",\n      \"alias\": \"host-category\",\n      \"is_activated\": true,\n      \"comments\": \"nisi Ut velit id\"\n    }\n  ],\n  \"meta\": {\n    \"page\": 1,\n    \"limit\": 10,\n    \"search\": {},\n    \"sort_by\": {},\n    \"total\": 1\n  }\n}"
						},
						{
							"name": "Forbidden",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "X-AUTH-TOKEN",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/configuration/hosts/categories",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configuration",
										"hosts",
										"categories"
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"code\": 403,\n  \"message\": \"You are not authorized to access this resource\"\n}"
						},
						{
							"name": "Internal Server Error",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "X-AUTH-TOKEN",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/configuration/hosts/categories",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configuration",
										"hosts",
										"categories"
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"code\": 500,\n  \"message\": \"Internal Server Error\"\n}"
						}
					]
				},
				{
					"name": "Add service category",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Service category successfully added.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"service_category_name\", \"Service Category\");\r",
									"pm.collectionVariables.set(\"service_category_alias\", \"Service-Category-Alias\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "centreon-auth-token",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"action\": \"add\",\n  \"object\": \"sc\",\n  \"values\": \"{{service_category_name}};{{service_category_alias}}\"\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
							"protocol": "{{protocol}}",
							"host": [
								"{{server}}"
							],
							"path": [
								"centreon",
								"api",
								"index.php"
							],
							"query": [
								{
									"key": "action",
									"value": "action"
								},
								{
									"key": "object",
									"value": "centreon_clapi"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Show service category list after creation [CLAPI]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Service category list successfully fetched.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const responseJson = pm.response.json();\r",
									"pm.test(\"One service category has been added\", function() {\r",
									"    pm.expect(responseJson.result.length).to.eql(pm.collectionVariables.get(\"service_categories_before_creation\") + 1);\r",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"service_category_name\", \"Service Category\");\r",
									"pm.collectionVariables.set(\"service_category_alias\", \"Service Category Alias\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "centreon-auth-token",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"action\": \"show\",\n  \"object\": \"sc\"\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
							"protocol": "{{protocol}}",
							"host": [
								"{{server}}"
							],
							"path": [
								"centreon",
								"api",
								"index.php"
							],
							"query": [
								{
									"key": "action",
									"value": "action"
								},
								{
									"key": "object",
									"value": "centreon_clapi"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Set parameters for a newly created service category",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"if (pm.collectionVariables.get(\"name\") && pm.collectionVariables.get(\"name\") != pm.collectionVariables.get(\"service_category_name\")) {\r",
									"    pm.collectionVariables.set(\"service_category_name\", pm.collectionVariables.get(\"name\"));\r",
									"}\r",
									"\r",
									"var parameters = pm.collectionVariables.get(\"list_of_parameters\");\r",
									"if (parameters && parameters.length > 0) {\r",
									"    postman.setNextRequest(\"Set parameters for a newly created service category\");\r",
									"} else {\r",
									"    pm.collectionVariables.unset(\"current_parameter\");\r",
									"    pm.collectionVariables.unset(\"current_value\");\r",
									"    pm.collectionVariables.unset(\"list_of_parameters\");\r",
									"    pm.collectionVariables.unset(\"list_of_values\");\r",
									"    postman.setNextRequest(\"Get members to newly created service category\");\r",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let parameters = pm.collectionVariables.get(\"list_of_parameters\");\r",
									"let values = pm.collectionVariables.get(\"list_of_values\");\r",
									"\r",
									"if (!parameters || parameters.length == 0) {\r",
									"    parameters = [\"name\"];\r",
									"    values = [\"Test API\"];\r",
									"}\r",
									"\r",
									"let current_parameter = parameters.shift();\r",
									"pm.collectionVariables.set(\"current_parameter\", current_parameter);\r",
									"pm.collectionVariables.set(\"list_of_parameters\", parameters);\r",
									"let current_value = values.shift();\r",
									"pm.collectionVariables.set(\"current_value\", current_value);\r",
									"pm.collectionVariables.set(\"list_of_values\", values);\r",
									"\r",
									"pm.collectionVariables.set(current_parameter, current_value);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "centreon-auth-token",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"action\": \"setparam\",\n  \"object\": \"sc\",\n  \"values\": \"{{service_category_name}};{{current_parameter}};{{current_value}}\"\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
							"protocol": "{{protocol}}",
							"host": [
								"{{server}}"
							],
							"path": [
								"centreon",
								"api",
								"index.php"
							],
							"query": [
								{
									"key": "action",
									"value": "action"
								},
								{
									"key": "object",
									"value": "centreon_clapi"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get members to newly created service category",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "centreon-auth-token",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"action\": \"getservice\",\n  \"object\": \"sc\",\n  \"values\": \"{{service_category_name}}\"\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
							"protocol": "{{protocol}}",
							"host": [
								"{{server}}"
							],
							"path": [
								"centreon",
								"api",
								"index.php"
							],
							"query": [
								{
									"key": "action",
									"value": "action"
								},
								{
									"key": "object",
									"value": "centreon_clapi"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Set members to newly created service category",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.collectionVariables.unset(\"current_host\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var list_of_hosts = pm.collectionVariables.get(\"hostsToAddPingServicesOntoServiceGroup\");\r",
									"\r",
									"if (list_of_hosts || list_of_hosts.length > 0) {\r",
									"    pm.collectionVariables.set(\"current_host\", list_of_hosts.shift());\r",
									"    pm.collectionVariables.set(\"hostsToAddPingServicesOntoServiceGroup\", list_of_hosts);\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "centreon-auth-token",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"action\": \"addservice\",\n  \"object\": \"sc\",\n  \"values\": \"{{service_category_name}};{{current_host}},Ping\"\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
							"protocol": "{{protocol}}",
							"host": [
								"{{server}}"
							],
							"path": [
								"centreon",
								"api",
								"index.php"
							],
							"query": [
								{
									"key": "action",
									"value": "action"
								},
								{
									"key": "object",
									"value": "centreon_clapi"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "50 - Downtime Management",
			"item": [
				{
					"name": "Host Downtime Management",
					"item": [
						{
							"name": "Critical Path",
							"item": [
								{
									"name": "List all hosts before downtime creation",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"const responseJson = pm.response.json();\r",
													"\r",
													"var random = Math.floor(Math.random() * responseJson.meta.total);\r",
													"console.log(random);\r",
													"pm.collectionVariables.set(\"downtime_host_name\", responseJson.result[random].name);\r",
													"pm.collectionVariables.set(\"downtime_host_id\", responseJson.result[random].id);\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "X-AUTH-TOKEN",
												"value": "{{token}}",
												"type": "text",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{baseUrl}}/monitoring/hosts?limit=20",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"monitoring",
												"hosts"
											],
											"query": [
												{
													"key": "limit",
													"value": "20",
													"description": "Number of displayed items per page"
												},
												{
													"key": "page",
													"value": "",
													"description": "Number of the requested page",
													"disabled": true
												},
												{
													"key": "search",
													"value": "",
													"description": "Retrieve only data matching the defined search value.\nSimple search can be done like the following example: ``` search={\"host.name\":\"Central\"} ```\nComplex search can be done with aggregators and operators.\nAvailable search aggregators are:\n  * `$or`\n  * `$and`\n\nAvailable search operators are:\n  * `$eq` → equal\n  * `$neq` → not equal\n  * `$lt` → less than\n  * `$le` → less or equal than\n  * `$gt` → greater than\n  * `$ge` → greater or equal than\n  * `$lk` → like\n  * `$nk` → not like\n  * `$in` → in\n  * `$ni` → not in\n\nExamples without nested aggregators:\n  ```\n  search={\n    \"$or\":[\n      {\"host.name\":{\"$eq\":\"name_1\"}},\n      {\"host.name\":{\"$eq\":\"name_2\"}}\n    ]\n  }\n  ```\n  ```\n  search={\n    \"$and\":[\n      {\"host.address\":{\"$rg\":\"^10\\.0\\.0\\.\\d+$\"}},\n      {\"host.name\":{\"$lk\":\"fr%\"}}\n    ]\n  }\n  ```\n\nExample with nested aggregators:\n  ```\n  search={\n    \"$or\":[\n      {\n        \"$and\":[\n          {\"host.address\":{\"$rg\":\"^10\\.0\\.0\\.\\d+$\"}},\n          {\"host.name\":{\"$lk\":\"fr%\"}}\n        ]\n      },\n      {\n        \"$and\":[\n          {\"host.address\":{\"$rg\":\"^192\\.168\\.0\\.\\d+$\"}},\n          {\"host.name\":{\"$lk\":\"us%\"}}\n        ]\n      }\n    ]\n  }\n  ```\n",
													"disabled": true
												}
											]
										},
										"description": "List all the hosts in real-time monitoring.\n\nThe available parameters to **search** / **sort_by** are:\n\n* host.id\n* host.name\n* host.alias\n* host.address\n* host.state\n* poller.id\n* service.display_name\n* host_group.id\n* host.is_acknowledged\n* host.downtime\n* host.criticality\n"
									},
									"response": [
										{
											"name": "OK",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "X-AUTH-TOKEN",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/monitoring/hosts?show_service=true&search=cillum quis commodo&limit=20&page=4",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"monitoring",
														"hosts"
													],
													"query": [
														{
															"key": "show_service",
															"value": "true"
														},
														{
															"key": "search",
															"value": "cillum quis commodo"
														},
														{
															"key": "limit",
															"value": "20"
														},
														{
															"key": "page",
															"value": "4"
														}
													],
													"variable": [
														{
															"key": "protocol",
															"value": "{{protocol}}",
															"description": "HTTP schema (This can only be one of http,https)"
														},
														{
															"key": "server",
															"value": "{{server}}",
															"description": "IP address or hostname of Centreon server"
														},
														{
															"key": "port",
															"value": "{{port}}",
															"description": "Port used by HTTP server"
														},
														{
															"key": "version",
															"value": "{{version}}",
															"description": "Version of the API"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"result\": [\n    {\n      \"id\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"alias\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"display_name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"state\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"services\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"poller_id\": 1,\n      \"acknowledged\": false,\n      \"address_ip\": \"127.0.0.1\",\n      \"check_attempt\": 1,\n      \"checked\": true,\n      \"execution_time\": 0.070906,\n      \"icon_image\": \"ppm/operatingsystems-linux-snmp-linux-128.png\",\n      \"icon_image_alt\": \"\",\n      \"last_check\": \"1980-02-02T05:43:34.625Z\",\n      \"last_hard_state_change\": \"2022-08-05T10:43:02.077Z\",\n      \"last_state_change\": \"1948-11-25T13:12:41.089Z\",\n      \"last_time_down\": \"1945-06-23T19:43:00.867Z\",\n      \"last_time_unreachable\": \"2022-07-05T17:47:46.217Z\",\n      \"last_time_up\": \"1952-11-26T09:19:35.799Z\",\n      \"last_update\": \"2002-02-11T22:28:18.621Z\",\n      \"max_check_attempts\": 3,\n      \"output\": \"OK - 127.0.0.1 rta 0.100ms lost 0%\\n\",\n      \"passive_checks\": false,\n      \"state_type\": 0,\n      \"timezone\": \":Europe/Paris\",\n      \"scheduled_downtime_depth\": 0,\n      \"criticality\": 10\n    },\n    {\n      \"id\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"alias\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"display_name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"state\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"services\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"poller_id\": 1,\n      \"acknowledged\": false,\n      \"address_ip\": \"127.0.0.1\",\n      \"check_attempt\": 1,\n      \"checked\": true,\n      \"execution_time\": 0.070906,\n      \"icon_image\": \"ppm/operatingsystems-linux-snmp-linux-128.png\",\n      \"icon_image_alt\": \"\",\n      \"last_check\": \"2014-11-11T02:07:25.915Z\",\n      \"last_hard_state_change\": \"1966-04-15T04:04:02.849Z\",\n      \"last_state_change\": \"1962-12-26T10:26:12.593Z\",\n      \"last_time_down\": \"2004-09-19T21:36:42.944Z\",\n      \"last_time_unreachable\": \"1951-05-24T08:52:34.057Z\",\n      \"last_time_up\": \"1990-04-26T07:43:26.231Z\",\n      \"last_update\": \"1971-01-30T15:22:21.380Z\",\n      \"max_check_attempts\": 3,\n      \"output\": \"OK - 127.0.0.1 rta 0.100ms lost 0%\\n\",\n      \"passive_checks\": false,\n      \"state_type\": 0,\n      \"timezone\": \":Europe/Paris\",\n      \"scheduled_downtime_depth\": 0,\n      \"criticality\": 10\n    }\n  ],\n  \"meta\": {\n    \"page\": 1,\n    \"limit\": 10,\n    \"search\": {},\n    \"sort_by\": {},\n    \"total\": 1\n  }\n}"
										},
										{
											"name": "Forbidden",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "X-AUTH-TOKEN",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/monitoring/hosts?show_service=true&search=cillum quis commodo&limit=20&page=4",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"monitoring",
														"hosts"
													],
													"query": [
														{
															"key": "show_service",
															"value": "true"
														},
														{
															"key": "search",
															"value": "cillum quis commodo"
														},
														{
															"key": "limit",
															"value": "20"
														},
														{
															"key": "page",
															"value": "4"
														}
													],
													"variable": [
														{
															"key": "protocol",
															"value": "{{protocol}}",
															"description": "HTTP schema (This can only be one of http,https)"
														},
														{
															"key": "server",
															"value": "{{server}}",
															"description": "IP address or hostname of Centreon server"
														},
														{
															"key": "port",
															"value": "{{port}}",
															"description": "Port used by HTTP server"
														},
														{
															"key": "version",
															"value": "{{version}}",
															"description": "Version of the API"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"code\": 403,\n  \"message\": \"You are not authorized to access this resource\"\n}"
										},
										{
											"name": "Internal Server Error",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "X-AUTH-TOKEN",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/monitoring/hosts?show_service=true&search=cillum quis commodo&limit=20&page=4",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"monitoring",
														"hosts"
													],
													"query": [
														{
															"key": "show_service",
															"value": "true"
														},
														{
															"key": "search",
															"value": "cillum quis commodo"
														},
														{
															"key": "limit",
															"value": "20"
														},
														{
															"key": "page",
															"value": "4"
														}
													],
													"variable": [
														{
															"key": "protocol",
															"value": "{{protocol}}",
															"description": "HTTP schema (This can only be one of http,https)"
														},
														{
															"key": "server",
															"value": "{{server}}",
															"description": "IP address or hostname of Centreon server"
														},
														{
															"key": "port",
															"value": "{{port}}",
															"description": "Port used by HTTP server"
														},
														{
															"key": "version",
															"value": "{{version}}",
															"description": "Version of the API"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"code\": 500,\n  \"message\": \"Internal Server Error\"\n}"
										}
									]
								},
								{
									"name": "Add downtime on selected host",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.sendRequest(\"https://cdnjs.cloudflare.com/ajax/libs/dayjs/1.11.6/dayjs.min.js\", (err, res) => {",
													"    dayjs_code = res.text();",
													"    eval(dayjs_code);",
													"    new Function(dayjs_code)();",
													"    pm.collectionVariables.set(\"start_time\", dayjs().format(\"YYYY-MM-DDTHH:mm:ssZ\"));",
													"    pm.collectionVariables.set(\"end_time\", dayjs().add(2, 'hours').format(\"YYYY-MM-DDTHH:mm:ssZ\"));",
													"    pm.collectionVariables.set(\"downtime_comment\", \"Ceci est un commentaire.\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Downtime implemented.\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});\r",
													"\r",
													"setTimeout(function(){}, [2000]);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "X-auth-token",
												"value": "{{token}}",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"start_time\": \"{{start_time}}\",\n    \"end_time\": \"{{end_time}}\",\n    \"is_fixed\": true,\n    \"duration\": 3600,\n    \"author_id\": {{current_user_id}},\n    \"comment\": \"{{downtime_comment}}\",\n    \"with_services\": true\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/monitoring/hosts/{{downtime_host_id}}/downtimes",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"monitoring",
												"hosts",
												"{{downtime_host_id}}",
												"downtimes"
											]
										}
									},
									"response": []
								},
								{
									"name": "Check the host put on downtime",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Information on selected host successfully fetched.\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"const responseJson = pm.response.json();\r",
													"pm.test(\"The downtime has successfully been applied.\", function() {\r",
													"    pm.expect(responseJson.downtimes[0].start_time).to.eql(pm.collectionVariables.get(\"start_time\"));\r",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/monitoring/hosts/{{downtime_host_id}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"monitoring",
												"hosts",
												"{{downtime_host_id}}"
											],
											"query": [
												{
													"key": "page",
													"value": "",
													"description": "Number of the requested page",
													"disabled": true
												},
												{
													"key": "search",
													"value": "",
													"description": "Retrieve only data matching the defined search value.\nSimple search can be done like the following example: ``` search={\"host.name\":\"Central\"} ```\nComplex search can be done with aggregators and operators.\nAvailable search aggregators are:\n  * `$or`\n  * `$and`\n\nAvailable search operators are:\n  * `$eq` → equal\n  * `$neq` → not equal\n  * `$lt` → less than\n  * `$le` → less or equal than\n  * `$gt` → greater than\n  * `$ge` → greater or equal than\n  * `$lk` → like\n  * `$nk` → not like\n  * `$in` → in\n  * `$ni` → not in\n\nExamples without nested aggregators:\n  ```\n  search={\n    \"$or\":[\n      {\"host.name\":{\"$eq\":\"name_1\"}},\n      {\"host.name\":{\"$eq\":\"name_2\"}}\n    ]\n  }\n  ```\n  ```\n  search={\n    \"$and\":[\n      {\"host.address\":{\"$rg\":\"^10\\.0\\.0\\.\\d+$\"}},\n      {\"host.name\":{\"$lk\":\"fr%\"}}\n    ]\n  }\n  ```\n\nExample with nested aggregators:\n  ```\n  search={\n    \"$or\":[\n      {\n        \"$and\":[\n          {\"host.address\":{\"$rg\":\"^10\\.0\\.0\\.\\d+$\"}},\n          {\"host.name\":{\"$lk\":\"fr%\"}}\n        ]\n      },\n      {\n        \"$and\":[\n          {\"host.address\":{\"$rg\":\"^192\\.168\\.0\\.\\d+$\"}},\n          {\"host.name\":{\"$lk\":\"us%\"}}\n        ]\n      }\n    ]\n  }\n  ```\n",
													"disabled": true
												}
											]
										},
										"description": "List all the hosts in real-time monitoring.\n\nThe available parameters to **search** / **sort_by** are:\n\n* host.id\n* host.name\n* host.alias\n* host.address\n* host.state\n* poller.id\n* service.display_name\n* host_group.id\n* host.is_acknowledged\n* host.downtime\n* host.criticality\n"
									},
									"response": [
										{
											"name": "OK",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "X-AUTH-TOKEN",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/monitoring/hosts?show_service=true&search=cillum quis commodo&limit=20&page=4",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"monitoring",
														"hosts"
													],
													"query": [
														{
															"key": "show_service",
															"value": "true"
														},
														{
															"key": "search",
															"value": "cillum quis commodo"
														},
														{
															"key": "limit",
															"value": "20"
														},
														{
															"key": "page",
															"value": "4"
														}
													],
													"variable": [
														{
															"key": "protocol",
															"value": "{{protocol}}",
															"description": "HTTP schema (This can only be one of http,https)"
														},
														{
															"key": "server",
															"value": "{{server}}",
															"description": "IP address or hostname of Centreon server"
														},
														{
															"key": "port",
															"value": "{{port}}",
															"description": "Port used by HTTP server"
														},
														{
															"key": "version",
															"value": "{{version}}",
															"description": "Version of the API"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"result\": [\n    {\n      \"id\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"alias\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"display_name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"state\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"services\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"poller_id\": 1,\n      \"acknowledged\": false,\n      \"address_ip\": \"127.0.0.1\",\n      \"check_attempt\": 1,\n      \"checked\": true,\n      \"execution_time\": 0.070906,\n      \"icon_image\": \"ppm/operatingsystems-linux-snmp-linux-128.png\",\n      \"icon_image_alt\": \"\",\n      \"last_check\": \"1980-02-02T05:43:34.625Z\",\n      \"last_hard_state_change\": \"2022-08-05T10:43:02.077Z\",\n      \"last_state_change\": \"1948-11-25T13:12:41.089Z\",\n      \"last_time_down\": \"1945-06-23T19:43:00.867Z\",\n      \"last_time_unreachable\": \"2022-07-05T17:47:46.217Z\",\n      \"last_time_up\": \"1952-11-26T09:19:35.799Z\",\n      \"last_update\": \"2002-02-11T22:28:18.621Z\",\n      \"max_check_attempts\": 3,\n      \"output\": \"OK - 127.0.0.1 rta 0.100ms lost 0%\\n\",\n      \"passive_checks\": false,\n      \"state_type\": 0,\n      \"timezone\": \":Europe/Paris\",\n      \"scheduled_downtime_depth\": 0,\n      \"criticality\": 10\n    },\n    {\n      \"id\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"alias\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"display_name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"state\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"services\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"poller_id\": 1,\n      \"acknowledged\": false,\n      \"address_ip\": \"127.0.0.1\",\n      \"check_attempt\": 1,\n      \"checked\": true,\n      \"execution_time\": 0.070906,\n      \"icon_image\": \"ppm/operatingsystems-linux-snmp-linux-128.png\",\n      \"icon_image_alt\": \"\",\n      \"last_check\": \"2014-11-11T02:07:25.915Z\",\n      \"last_hard_state_change\": \"1966-04-15T04:04:02.849Z\",\n      \"last_state_change\": \"1962-12-26T10:26:12.593Z\",\n      \"last_time_down\": \"2004-09-19T21:36:42.944Z\",\n      \"last_time_unreachable\": \"1951-05-24T08:52:34.057Z\",\n      \"last_time_up\": \"1990-04-26T07:43:26.231Z\",\n      \"last_update\": \"1971-01-30T15:22:21.380Z\",\n      \"max_check_attempts\": 3,\n      \"output\": \"OK - 127.0.0.1 rta 0.100ms lost 0%\\n\",\n      \"passive_checks\": false,\n      \"state_type\": 0,\n      \"timezone\": \":Europe/Paris\",\n      \"scheduled_downtime_depth\": 0,\n      \"criticality\": 10\n    }\n  ],\n  \"meta\": {\n    \"page\": 1,\n    \"limit\": 10,\n    \"search\": {},\n    \"sort_by\": {},\n    \"total\": 1\n  }\n}"
										},
										{
											"name": "Forbidden",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "X-AUTH-TOKEN",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/monitoring/hosts?show_service=true&search=cillum quis commodo&limit=20&page=4",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"monitoring",
														"hosts"
													],
													"query": [
														{
															"key": "show_service",
															"value": "true"
														},
														{
															"key": "search",
															"value": "cillum quis commodo"
														},
														{
															"key": "limit",
															"value": "20"
														},
														{
															"key": "page",
															"value": "4"
														}
													],
													"variable": [
														{
															"key": "protocol",
															"value": "{{protocol}}",
															"description": "HTTP schema (This can only be one of http,https)"
														},
														{
															"key": "server",
															"value": "{{server}}",
															"description": "IP address or hostname of Centreon server"
														},
														{
															"key": "port",
															"value": "{{port}}",
															"description": "Port used by HTTP server"
														},
														{
															"key": "version",
															"value": "{{version}}",
															"description": "Version of the API"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"code\": 403,\n  \"message\": \"You are not authorized to access this resource\"\n}"
										},
										{
											"name": "Internal Server Error",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "X-AUTH-TOKEN",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/monitoring/hosts?show_service=true&search=cillum quis commodo&limit=20&page=4",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"monitoring",
														"hosts"
													],
													"query": [
														{
															"key": "show_service",
															"value": "true"
														},
														{
															"key": "search",
															"value": "cillum quis commodo"
														},
														{
															"key": "limit",
															"value": "20"
														},
														{
															"key": "page",
															"value": "4"
														}
													],
													"variable": [
														{
															"key": "protocol",
															"value": "{{protocol}}",
															"description": "HTTP schema (This can only be one of http,https)"
														},
														{
															"key": "server",
															"value": "{{server}}",
															"description": "IP address or hostname of Centreon server"
														},
														{
															"key": "port",
															"value": "{{port}}",
															"description": "Port used by HTTP server"
														},
														{
															"key": "version",
															"value": "{{version}}",
															"description": "Version of the API"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"code\": 500,\n  \"message\": \"Internal Server Error\"\n}"
										}
									]
								},
								{
									"name": "Show active host downtimes",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"A list of active host downtimes for the selected host has been fetched.\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"const responseJson = pm.response.json();\r",
													"pm.test(\"This downtime has been set by the current user.\", function() {\r",
													"    pm.expect(responseJson.result[0].author_id).to.eql(pm.collectionVariables.get(\"current_user_id\"));\r",
													"})\r",
													"\r",
													"pm.test(\"This downtime has been set on the correct host.\", function() {\r",
													"    pm.expect(responseJson.result[0].host_id).to.eql(pm.collectionVariables.get(\"downtime_host_id\"));  \r",
													"})\r",
													"\r",
													"pm.test(\"This downtime has been set at the expected time.\", function() {\r",
													"    pm.expect(responseJson.result[0].start_time).to.eql(pm.collectionVariables.get(\"start_time\"));\r",
													"    pm.collectionVariables.unset(\"start_time\");\r",
													"})\r",
													"\r",
													"pm.test(\"This downtime is supposed to end at the expected time.\", function() {\r",
													"    pm.expect(responseJson.result[0].end_time).to.eql(pm.collectionVariables.get(\"end_time\"));\r",
													"    pm.collectionVariables.unset(\"end_time\");\r",
													"})\r",
													"\r",
													"pm.environment.get(\"variable_key\");\r",
													"pm.collectionVariables.set(\"downtime_id\", responseJson.result[0].id);\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "centreon-auth-token",
												"value": "{{token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{baseUrl}}/monitoring/hosts/{{downtime_host_id}}/downtimes",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"monitoring",
												"hosts",
												"{{downtime_host_id}}",
												"downtimes"
											]
										}
									},
									"response": []
								},
								{
									"name": "Cancel host downtime",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Downtime has been cancelled.\", function () {",
													"    pm.response.to.have.status(204);",
													"});",
													"",
													"pm.collectionVariables.unset(\"downtime_id\");",
													"pm.collectionVariables.unset(\"downtime_host_name\");",
													"pm.collectionVariables.unset(\"downtime_host_id\");",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "centreon-auth-token",
												"value": "{{token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{baseUrl}}/monitoring/downtimes/{{downtime_id}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"monitoring",
												"downtimes",
												"{{downtime_id}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Edge Cases",
							"item": []
						}
					]
				},
				{
					"name": "Service Downtime Management",
					"item": [
						{
							"name": "Critical Path",
							"item": [
								{
									"name": "List all services and select a random page",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"const responseJson = pm.response.json();\r",
													"var number_of_pages = Math.floor(responseJson.meta.total / responseJson.meta.limit) + 1;\r",
													"console.log(number_of_pages);\r",
													"var random_page = Math.floor(Math.random() * number_of_pages) + 1;\r",
													"console.log(random_page);\r",
													"pm.collectionVariables.set(\"random_page\", random_page);\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/monitoring/services",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"monitoring",
												"services"
											],
											"query": [
												{
													"key": "search",
													"value": "",
													"description": "Retrieve only data matching the defined search value.\nSimple search can be done like the following example: ``` search={\"host.name\":\"Central\"} ```\nComplex search can be done with aggregators and operators.\nAvailable search aggregators are:\n  * `$or`\n  * `$and`\n\nAvailable search operators are:\n  * `$eq` → equal\n  * `$neq` → not equal\n  * `$lt` → less than\n  * `$le` → less or equal than\n  * `$gt` → greater than\n  * `$ge` → greater or equal than\n  * `$lk` → like\n  * `$nk` → not like\n  * `$in` → in\n  * `$ni` → not in\n\nExamples without nested aggregators:\n  ```\n  search={\n    \"$or\":[\n      {\"host.name\":{\"$eq\":\"name_1\"}},\n      {\"host.name\":{\"$eq\":\"name_2\"}}\n    ]\n  }\n  ```\n  ```\n  search={\n    \"$and\":[\n      {\"host.address\":{\"$rg\":\"^10\\.0\\.0\\.\\d+$\"}},\n      {\"host.name\":{\"$lk\":\"fr%\"}}\n    ]\n  }\n  ```\n\nExample with nested aggregators:\n  ```\n  search={\n    \"$or\":[\n      {\n        \"$and\":[\n          {\"host.address\":{\"$rg\":\"^10\\.0\\.0\\.\\d+$\"}},\n          {\"host.name\":{\"$lk\":\"fr%\"}}\n        ]\n      },\n      {\n        \"$and\":[\n          {\"host.address\":{\"$rg\":\"^192\\.168\\.0\\.\\d+$\"}},\n          {\"host.name\":{\"$lk\":\"us%\"}}\n        ]\n      }\n    ]\n  }\n  ```\n",
													"disabled": true
												}
											]
										},
										"description": "List all the hosts in real-time monitoring.\n\nThe available parameters to **search** / **sort_by** are:\n\n* host.id\n* host.name\n* host.alias\n* host.address\n* host.state\n* poller.id\n* service.display_name\n* host_group.id\n* host.is_acknowledged\n* host.downtime\n* host.criticality\n"
									},
									"response": [
										{
											"name": "OK",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "X-AUTH-TOKEN",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/monitoring/hosts?show_service=true&search=cillum quis commodo&limit=20&page=4",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"monitoring",
														"hosts"
													],
													"query": [
														{
															"key": "show_service",
															"value": "true"
														},
														{
															"key": "search",
															"value": "cillum quis commodo"
														},
														{
															"key": "limit",
															"value": "20"
														},
														{
															"key": "page",
															"value": "4"
														}
													],
													"variable": [
														{
															"key": "protocol",
															"value": "{{protocol}}",
															"description": "HTTP schema (This can only be one of http,https)"
														},
														{
															"key": "server",
															"value": "{{server}}",
															"description": "IP address or hostname of Centreon server"
														},
														{
															"key": "port",
															"value": "{{port}}",
															"description": "Port used by HTTP server"
														},
														{
															"key": "version",
															"value": "{{version}}",
															"description": "Version of the API"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"result\": [\n    {\n      \"id\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"alias\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"display_name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"state\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"services\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"poller_id\": 1,\n      \"acknowledged\": false,\n      \"address_ip\": \"127.0.0.1\",\n      \"check_attempt\": 1,\n      \"checked\": true,\n      \"execution_time\": 0.070906,\n      \"icon_image\": \"ppm/operatingsystems-linux-snmp-linux-128.png\",\n      \"icon_image_alt\": \"\",\n      \"last_check\": \"1980-02-02T05:43:34.625Z\",\n      \"last_hard_state_change\": \"2022-08-05T10:43:02.077Z\",\n      \"last_state_change\": \"1948-11-25T13:12:41.089Z\",\n      \"last_time_down\": \"1945-06-23T19:43:00.867Z\",\n      \"last_time_unreachable\": \"2022-07-05T17:47:46.217Z\",\n      \"last_time_up\": \"1952-11-26T09:19:35.799Z\",\n      \"last_update\": \"2002-02-11T22:28:18.621Z\",\n      \"max_check_attempts\": 3,\n      \"output\": \"OK - 127.0.0.1 rta 0.100ms lost 0%\\n\",\n      \"passive_checks\": false,\n      \"state_type\": 0,\n      \"timezone\": \":Europe/Paris\",\n      \"scheduled_downtime_depth\": 0,\n      \"criticality\": 10\n    },\n    {\n      \"id\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"alias\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"display_name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"state\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"services\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"poller_id\": 1,\n      \"acknowledged\": false,\n      \"address_ip\": \"127.0.0.1\",\n      \"check_attempt\": 1,\n      \"checked\": true,\n      \"execution_time\": 0.070906,\n      \"icon_image\": \"ppm/operatingsystems-linux-snmp-linux-128.png\",\n      \"icon_image_alt\": \"\",\n      \"last_check\": \"2014-11-11T02:07:25.915Z\",\n      \"last_hard_state_change\": \"1966-04-15T04:04:02.849Z\",\n      \"last_state_change\": \"1962-12-26T10:26:12.593Z\",\n      \"last_time_down\": \"2004-09-19T21:36:42.944Z\",\n      \"last_time_unreachable\": \"1951-05-24T08:52:34.057Z\",\n      \"last_time_up\": \"1990-04-26T07:43:26.231Z\",\n      \"last_update\": \"1971-01-30T15:22:21.380Z\",\n      \"max_check_attempts\": 3,\n      \"output\": \"OK - 127.0.0.1 rta 0.100ms lost 0%\\n\",\n      \"passive_checks\": false,\n      \"state_type\": 0,\n      \"timezone\": \":Europe/Paris\",\n      \"scheduled_downtime_depth\": 0,\n      \"criticality\": 10\n    }\n  ],\n  \"meta\": {\n    \"page\": 1,\n    \"limit\": 10,\n    \"search\": {},\n    \"sort_by\": {},\n    \"total\": 1\n  }\n}"
										},
										{
											"name": "Forbidden",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "X-AUTH-TOKEN",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/monitoring/hosts?show_service=true&search=cillum quis commodo&limit=20&page=4",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"monitoring",
														"hosts"
													],
													"query": [
														{
															"key": "show_service",
															"value": "true"
														},
														{
															"key": "search",
															"value": "cillum quis commodo"
														},
														{
															"key": "limit",
															"value": "20"
														},
														{
															"key": "page",
															"value": "4"
														}
													],
													"variable": [
														{
															"key": "protocol",
															"value": "{{protocol}}",
															"description": "HTTP schema (This can only be one of http,https)"
														},
														{
															"key": "server",
															"value": "{{server}}",
															"description": "IP address or hostname of Centreon server"
														},
														{
															"key": "port",
															"value": "{{port}}",
															"description": "Port used by HTTP server"
														},
														{
															"key": "version",
															"value": "{{version}}",
															"description": "Version of the API"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"code\": 403,\n  \"message\": \"You are not authorized to access this resource\"\n}"
										},
										{
											"name": "Internal Server Error",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "X-AUTH-TOKEN",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/monitoring/hosts?show_service=true&search=cillum quis commodo&limit=20&page=4",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"monitoring",
														"hosts"
													],
													"query": [
														{
															"key": "show_service",
															"value": "true"
														},
														{
															"key": "search",
															"value": "cillum quis commodo"
														},
														{
															"key": "limit",
															"value": "20"
														},
														{
															"key": "page",
															"value": "4"
														}
													],
													"variable": [
														{
															"key": "protocol",
															"value": "{{protocol}}",
															"description": "HTTP schema (This can only be one of http,https)"
														},
														{
															"key": "server",
															"value": "{{server}}",
															"description": "IP address or hostname of Centreon server"
														},
														{
															"key": "port",
															"value": "{{port}}",
															"description": "Port used by HTTP server"
														},
														{
															"key": "version",
															"value": "{{version}}",
															"description": "Version of the API"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"code\": 500,\n  \"message\": \"Internal Server Error\"\n}"
										}
									]
								},
								{
									"name": "List the randomly selected page and select a random service",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"A list of services has been fetched.\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"const responseJson = pm.response.json();\r",
													"var random_service = Math.floor(Math.random() * responseJson.result.length);\r",
													"pm.collectionVariables.set(\"downtime_service_id\", responseJson.result[random_service].id);\r",
													"pm.collectionVariables.set(\"host_of_down_service\", responseJson.result[random_service].host.id);\r",
													"pm.collectionVariables.set(\"service_description\", responseJson.result[random_service].description);\r",
													"pm.collectionVariables.unset(\"random_page\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/monitoring/services?page={{random_page}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"monitoring",
												"services"
											],
											"query": [
												{
													"key": "page",
													"value": "{{random_page}}"
												},
												{
													"key": "search",
													"value": "",
													"description": "Retrieve only data matching the defined search value.\nSimple search can be done like the following example: ``` search={\"host.name\":\"Central\"} ```\nComplex search can be done with aggregators and operators.\nAvailable search aggregators are:\n  * `$or`\n  * `$and`\n\nAvailable search operators are:\n  * `$eq` → equal\n  * `$neq` → not equal\n  * `$lt` → less than\n  * `$le` → less or equal than\n  * `$gt` → greater than\n  * `$ge` → greater or equal than\n  * `$lk` → like\n  * `$nk` → not like\n  * `$in` → in\n  * `$ni` → not in\n\nExamples without nested aggregators:\n  ```\n  search={\n    \"$or\":[\n      {\"host.name\":{\"$eq\":\"name_1\"}},\n      {\"host.name\":{\"$eq\":\"name_2\"}}\n    ]\n  }\n  ```\n  ```\n  search={\n    \"$and\":[\n      {\"host.address\":{\"$rg\":\"^10\\.0\\.0\\.\\d+$\"}},\n      {\"host.name\":{\"$lk\":\"fr%\"}}\n    ]\n  }\n  ```\n\nExample with nested aggregators:\n  ```\n  search={\n    \"$or\":[\n      {\n        \"$and\":[\n          {\"host.address\":{\"$rg\":\"^10\\.0\\.0\\.\\d+$\"}},\n          {\"host.name\":{\"$lk\":\"fr%\"}}\n        ]\n      },\n      {\n        \"$and\":[\n          {\"host.address\":{\"$rg\":\"^192\\.168\\.0\\.\\d+$\"}},\n          {\"host.name\":{\"$lk\":\"us%\"}}\n        ]\n      }\n    ]\n  }\n  ```\n",
													"disabled": true
												}
											]
										},
										"description": "List all the hosts in real-time monitoring.\n\nThe available parameters to **search** / **sort_by** are:\n\n* host.id\n* host.name\n* host.alias\n* host.address\n* host.state\n* poller.id\n* service.display_name\n* host_group.id\n* host.is_acknowledged\n* host.downtime\n* host.criticality\n"
									},
									"response": [
										{
											"name": "OK",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "X-AUTH-TOKEN",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/monitoring/hosts?show_service=true&search=cillum quis commodo&limit=20&page=4",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"monitoring",
														"hosts"
													],
													"query": [
														{
															"key": "show_service",
															"value": "true"
														},
														{
															"key": "search",
															"value": "cillum quis commodo"
														},
														{
															"key": "limit",
															"value": "20"
														},
														{
															"key": "page",
															"value": "4"
														}
													],
													"variable": [
														{
															"key": "protocol",
															"value": "{{protocol}}",
															"description": "HTTP schema (This can only be one of http,https)"
														},
														{
															"key": "server",
															"value": "{{server}}",
															"description": "IP address or hostname of Centreon server"
														},
														{
															"key": "port",
															"value": "{{port}}",
															"description": "Port used by HTTP server"
														},
														{
															"key": "version",
															"value": "{{version}}",
															"description": "Version of the API"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"result\": [\n    {\n      \"id\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"alias\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"display_name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"state\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"services\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"poller_id\": 1,\n      \"acknowledged\": false,\n      \"address_ip\": \"127.0.0.1\",\n      \"check_attempt\": 1,\n      \"checked\": true,\n      \"execution_time\": 0.070906,\n      \"icon_image\": \"ppm/operatingsystems-linux-snmp-linux-128.png\",\n      \"icon_image_alt\": \"\",\n      \"last_check\": \"1980-02-02T05:43:34.625Z\",\n      \"last_hard_state_change\": \"2022-08-05T10:43:02.077Z\",\n      \"last_state_change\": \"1948-11-25T13:12:41.089Z\",\n      \"last_time_down\": \"1945-06-23T19:43:00.867Z\",\n      \"last_time_unreachable\": \"2022-07-05T17:47:46.217Z\",\n      \"last_time_up\": \"1952-11-26T09:19:35.799Z\",\n      \"last_update\": \"2002-02-11T22:28:18.621Z\",\n      \"max_check_attempts\": 3,\n      \"output\": \"OK - 127.0.0.1 rta 0.100ms lost 0%\\n\",\n      \"passive_checks\": false,\n      \"state_type\": 0,\n      \"timezone\": \":Europe/Paris\",\n      \"scheduled_downtime_depth\": 0,\n      \"criticality\": 10\n    },\n    {\n      \"id\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"alias\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"display_name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"state\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"services\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"poller_id\": 1,\n      \"acknowledged\": false,\n      \"address_ip\": \"127.0.0.1\",\n      \"check_attempt\": 1,\n      \"checked\": true,\n      \"execution_time\": 0.070906,\n      \"icon_image\": \"ppm/operatingsystems-linux-snmp-linux-128.png\",\n      \"icon_image_alt\": \"\",\n      \"last_check\": \"2014-11-11T02:07:25.915Z\",\n      \"last_hard_state_change\": \"1966-04-15T04:04:02.849Z\",\n      \"last_state_change\": \"1962-12-26T10:26:12.593Z\",\n      \"last_time_down\": \"2004-09-19T21:36:42.944Z\",\n      \"last_time_unreachable\": \"1951-05-24T08:52:34.057Z\",\n      \"last_time_up\": \"1990-04-26T07:43:26.231Z\",\n      \"last_update\": \"1971-01-30T15:22:21.380Z\",\n      \"max_check_attempts\": 3,\n      \"output\": \"OK - 127.0.0.1 rta 0.100ms lost 0%\\n\",\n      \"passive_checks\": false,\n      \"state_type\": 0,\n      \"timezone\": \":Europe/Paris\",\n      \"scheduled_downtime_depth\": 0,\n      \"criticality\": 10\n    }\n  ],\n  \"meta\": {\n    \"page\": 1,\n    \"limit\": 10,\n    \"search\": {},\n    \"sort_by\": {},\n    \"total\": 1\n  }\n}"
										},
										{
											"name": "Forbidden",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "X-AUTH-TOKEN",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/monitoring/hosts?show_service=true&search=cillum quis commodo&limit=20&page=4",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"monitoring",
														"hosts"
													],
													"query": [
														{
															"key": "show_service",
															"value": "true"
														},
														{
															"key": "search",
															"value": "cillum quis commodo"
														},
														{
															"key": "limit",
															"value": "20"
														},
														{
															"key": "page",
															"value": "4"
														}
													],
													"variable": [
														{
															"key": "protocol",
															"value": "{{protocol}}",
															"description": "HTTP schema (This can only be one of http,https)"
														},
														{
															"key": "server",
															"value": "{{server}}",
															"description": "IP address or hostname of Centreon server"
														},
														{
															"key": "port",
															"value": "{{port}}",
															"description": "Port used by HTTP server"
														},
														{
															"key": "version",
															"value": "{{version}}",
															"description": "Version of the API"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"code\": 403,\n  \"message\": \"You are not authorized to access this resource\"\n}"
										},
										{
											"name": "Internal Server Error",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "X-AUTH-TOKEN",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/monitoring/hosts?show_service=true&search=cillum quis commodo&limit=20&page=4",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"monitoring",
														"hosts"
													],
													"query": [
														{
															"key": "show_service",
															"value": "true"
														},
														{
															"key": "search",
															"value": "cillum quis commodo"
														},
														{
															"key": "limit",
															"value": "20"
														},
														{
															"key": "page",
															"value": "4"
														}
													],
													"variable": [
														{
															"key": "protocol",
															"value": "{{protocol}}",
															"description": "HTTP schema (This can only be one of http,https)"
														},
														{
															"key": "server",
															"value": "{{server}}",
															"description": "IP address or hostname of Centreon server"
														},
														{
															"key": "port",
															"value": "{{port}}",
															"description": "Port used by HTTP server"
														},
														{
															"key": "version",
															"value": "{{version}}",
															"description": "Version of the API"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"code\": 500,\n  \"message\": \"Internal Server Error\"\n}"
										}
									]
								},
								{
									"name": "Add downtime on selected service",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.sendRequest(\"https://cdnjs.cloudflare.com/ajax/libs/dayjs/1.11.6/dayjs.min.js\", (err, res) => {",
													"    dayjs_code = res.text();",
													"    eval(dayjs_code);",
													"    new Function(dayjs_code)();",
													"    pm.collectionVariables.set(\"start_time\", dayjs().format(\"YYYY-MM-DDTHH:mm:ssZ\"));",
													"    pm.collectionVariables.set(\"end_time\", dayjs().add(2, 'hours').format(\"YYYY-MM-DDTHH:mm:ssZ\"));",
													"    pm.collectionVariables.set(\"downtime_comment\", \"Ceci est un commentaire.\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "centreon-auth-token",
												"value": "{{token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"start_time\": \"{{start_time}}\",\n    \"end_time\": \"{{end_time}}\",\n    \"is_fixed\": true,\n    \"duration\": 3600,\n    \"author_id\": {{current_user_id}},\n    \"comment\": \"{{downtime_comment}}\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/monitoring/hosts/{{host_of_down_service}}/services/{{downtime_service_id}}/downtimes",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"monitoring",
												"hosts",
												"{{host_of_down_service}}",
												"services",
												"{{downtime_service_id}}",
												"downtimes"
											]
										}
									},
									"response": []
								},
								{
									"name": "Show active service downtimes",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const responseJson = pm.response.json();",
													"try {",
													"    for (var i = 0; i < responseJson.result.length; i++) {",
													"        if (pm.collectionVariables.get(\"start_time\") == responseJson.result[i].start_time)",
													"        {",
													"            pm.collectionVariables.set(\"service_downtime_id\", responseJson.result[i].id);",
													"            pm.test(\"Features of the set downtime have been successfully implemented.\", function() {",
													"                pm.expect(pm.collectionVariables.get(\"start_time\")).to.eql(responseJson.result[i].start_time);",
													"                pm.expect(pm.collectionVariables.get(\"end_time\")).to.eql(responseJson.result[i].end_time);",
													"                pm.expect(pm.collectionVariables.get(\"downtime_comment\")).to.eql(responseJson.result[i].comment.replace(/[\\'\"]+/g, ''));",
													"            });",
													"            break;",
													"        }",
													"    }",
													"    if (i == responseJson.result.length) {",
													"        pm.test(\"Added realtime downtime was found\", function() {",
													"            false;",
													"        });",
													"    }",
													"} ",
													"catch (e) {}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "centreon-auth-token",
												"value": "{{token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{baseUrl}}/monitoring/hosts/{{host_of_down_service}}/services/{{downtime_service_id}}/downtimes",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"monitoring",
												"hosts",
												"{{host_of_down_service}}",
												"services",
												"{{downtime_service_id}}",
												"downtimes"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get down service",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/centreon/api/{{version}}/monitoring/hosts/{{host_of_down_service}}/services/{{downtime_service_id}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"centreon",
												"api",
												"{{version}}",
												"monitoring",
												"hosts",
												"{{host_of_down_service}}",
												"services",
												"{{downtime_service_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Cancel service downtime",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "centreon-auth-token",
												"value": "{{token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{baseUrl}}/monitoring/downtimes/{{downtime_service_id}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"monitoring",
												"downtimes",
												"{{downtime_service_id}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Edge Cases",
							"item": []
						}
					]
				}
			]
		},
		{
			"name": "51 - Recurrent downtime management",
			"item": [
				{
					"name": "Critical Path",
					"item": [
						{
							"name": "Create a recurrent downtime",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Request successful.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"recurring_downtime_name\", \"test_recurring_downtime\");\r",
											"pm.collectionVariables.set(\"recurring_downtime_description\", \"Recurring Downtime for API tests.\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"add\",\n  \"object\": \"downtime\",\n  \"values\": \"{{recurring_downtime_name}};{{recurring_downtime_description}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Display all downtimes and select the recurrent downtime that was just created",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"The list of recurrent downtimes has been successfully fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"for(var i = 0; i < responseJson.result.length; i++) {\r",
											"    if(responseJson.result[i].name == pm.collectionVariables.get(\"recurring_downtime_name\")) {\r",
											"        pm.test(\"The recurrent downtime that was just created is included in the list.\", function() {\r",
											"            pm.expect(responseJson.result[i].name).to.eql(pm.collectionVariables.get(\"recurring_downtime_name\"));\r",
											"            pm.expect(responseJson.result[i].description).to.eql(pm.collectionVariables.get(\"recurring_downtime_description\"));\r",
											"            pm.collectionVariables.set(\"recurring_downtime_id\", parseInt(responseJson.result[i].id));\r",
											"            pm.collectionVariables.unset(\"recurring_downtime_description\");\r",
											"        });\r",
											"    }\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"recurring_downtime_name\", \"test_recurring_downtime\");\r",
											"pm.collectionVariables.set(\"recurring_downtime_description\", \"Recurring Downtime for API tests.\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"show\",\n  \"object\": \"downtime\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Add weekly period for the recurrent downtime",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"A weekly period has been added to the recurrent downtime.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"weekly_period_start_date\", \"00:00\");\r",
											"pm.collectionVariables.set(\"weekly_period_end_date\", \"04:00\");\r",
											"\r",
											"var days_to_add = pm.collectionVariables.get(\"week_days_to_add\");\r",
											"if (!days_to_add || days_to_add.length == 0) {\r",
											"    days_to_add = [6, 7];\r",
											"    var final_parameter = \"\";\r",
											"    while(days_to_add.length != 0) {\r",
											"        current_day = days_to_add.shift();\r",
											"        final_parameter = final_parameter.concat(',', current_day);\r",
											"    }\r",
											"    final_parameter = final_parameter.substring(1);\r",
											"    pm.collectionVariables.set(\"week_days_to_add\", final_parameter);\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"ADDWEEKLYPERIOD\",\n  \"object\": \"downtime\",\n  \"values\": \"{{recurring_downtime_name}};{{weekly_period_start_date}};{{weekly_period_end_date}};0;15400;{{week_days_to_add}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Add monthly period for the recurrent downtime",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"A monthly period has been added to the recurrent downtime.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"monthly_period_start_date\", \"19:00\");\r",
											"pm.collectionVariables.set(\"monthly_period_end_date\", \"22:00\");\r",
											"\r",
											"var days_to_add = pm.collectionVariables.get(\"month_days_to_add\");\r",
											"\r",
											"if (!days_to_add || days_to_add.length == 0) {\r",
											"    days_to_add = [14,21];\r",
											"    var final_parameter = \"\";\r",
											"    while(days_to_add.length != 0) {\r",
											"        current_day = days_to_add.shift();\r",
											"        final_parameter = final_parameter.concat(',', current_day);\r",
											"    }\r",
											"    final_parameter = final_parameter.substring(1);\r",
											"    pm.collectionVariables.set(\"month_days_to_add\", final_parameter);\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"ADDMONTHLYPERIOD\",\n  \"object\": \"downtime\",\n  \"values\": \"{{recurring_downtime_name}};{{monthly_period_start_date}};{{monthly_period_end_date}};1;10800;{{month_days_to_add}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Add specific period for the recurrent downtime",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"A specific period has been added to the recurrent downtime.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest(\"https://cdnjs.cloudflare.com/ajax/libs/dayjs/1.11.6/dayjs.min.js\", (err, res) => {\r",
											"    dayjs_code = res.text();\r",
											"    eval(dayjs_code);\r",
											"    new Function(dayjs_code)();\r",
											"    pm.collectionVariables.set(\"specific_period_start_time\", dayjs().format(\"HH:mm\"));\r",
											"    pm.collectionVariables.set(\"specific_period_end_time\", dayjs().add(5, 'minutes').format(\"HH:mm\"));\r",
											"    // Adapting dayjs's day of the week management to what CLAPI requires\r",
											"    if(dayjs().day() == 0) { \r",
											"        pm.collectionVariables.set(\"current_day_of_the_week\", 7);\r",
											"    } else {\r",
											"        pm.collectionVariables.set(\"current_day_of_the_week\", dayjs().day());\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"ADDSPECIFICPERIOD\",\n  \"object\": \"downtime\",\n  \"values\": \"{{recurring_downtime_name}};{{specific_period_start_time}};{{specific_period_end_time}};1;7200;{{current_day_of_the_week}};last\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "List periods for the recurrent downtime",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"The list of periods for this recurrent downtime has been successfully fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json(); \r",
											"const start_time = \"start time\";\r",
											"const end_time = \"end time\";\r",
											"const day_of_week = \"day of week\";\r",
											"const day_of_month = \"day of month\";\r",
											"\r",
											"pm.test(\"This list has three periods.\", function() {\r",
											"    pm.expect(responseJson.result.length).to.eql(3);\r",
											"})\r",
											"\r",
											"pm.test(\"The weekly period has the features that were correctly input.\", function() {\r",
											"    pm.expect(responseJson.result[0][start_time]).to.eql(pm.collectionVariables.get(\"weekly_period_start_date\"));\r",
											"    pm.expect(responseJson.result[0][end_time]).to.eql(pm.collectionVariables.get(\"weekly_period_end_date\"));\r",
											"    pm.expect(responseJson.result[0][day_of_week]).to.eql(pm.collectionVariables.get(\"week_days_to_add\"));\r",
											"    pm.collectionVariables.unset(\"weekly_period_start_date\");\r",
											"    pm.collectionVariables.unset(\"weekly_period_end_date\");\r",
											"    pm.collectionVariables.unset(\"week_days_to_add\");\r",
											"})\r",
											"\r",
											"pm.test(\"The monthly period has the features that were correctly input.\", function() {\r",
											"    pm.expect(responseJson.result[1][start_time]).to.eql(pm.collectionVariables.get(\"monthly_period_start_date\"));\r",
											"    pm.expect(responseJson.result[1][end_time]).to.eql(pm.collectionVariables.get(\"monthly_period_end_date\"));\r",
											"    pm.expect(responseJson.result[1][day_of_month]).to.eql(pm.collectionVariables.get(\"month_days_to_add\"));\r",
											"    pm.collectionVariables.unset(\"monthly_period_start_date\");\r",
											"    pm.collectionVariables.unset(\"monthly_period_end_date\");\r",
											"    pm.collectionVariables.unset(\"month_days_to_add\");\r",
											"})\r",
											"\r",
											"pm.test(\"The specific period has the features that were correctly input.\", function() {\r",
											"    pm.expect(responseJson.result[2][start_time]).to.eql(pm.collectionVariables.get(\"specific_period_start_time\"));\r",
											"    pm.expect(responseJson.result[2][end_time]).to.eql(pm.collectionVariables.get(\"specific_period_end_time\"));\r",
											"    pm.expect(parseInt(responseJson.result[2][day_of_week])).to.eql(pm.collectionVariables.get(\"current_day_of_the_week\"));\r",
											"    pm.collectionVariables.unset(\"specific_period_start_time\");\r",
											"    pm.collectionVariables.unset(\"specific_period_end_time\");\r",
											"    pm.collectionVariables.unset(\"current_day_of_the_week\");\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"if(pm.collectionVariables.get(\"weekly_period_start_date\") && pm.collectionVariables.get(\"weekly_period_start_date\").length <= 5) {\r",
											"    pm.collectionVariables.set(\"weekly_period_start_date\", pm.collectionVariables.get(\"weekly_period_start_date\").concat(\"\", \":00\"));\r",
											"}\r",
											"\r",
											"if(pm.collectionVariables.get(\"weekly_period_end_date\") && pm.collectionVariables.get(\"weekly_period_end_date\").length <= 5) {\r",
											"    pm.collectionVariables.set(\"weekly_period_end_date\", pm.collectionVariables.get(\"weekly_period_end_date\").concat(\"\", \":00\"));\r",
											"}\r",
											"\r",
											"if(pm.collectionVariables.get(\"monthly_period_start_date\") && pm.collectionVariables.get(\"monthly_period_start_date\").length <= 5) {\r",
											"    pm.collectionVariables.set(\"monthly_period_start_date\", pm.collectionVariables.get(\"monthly_period_start_date\").concat(\"\", \":00\"));\r",
											"}\r",
											"\r",
											"if(pm.collectionVariables.get(\"monthly_period_end_date\") && pm.collectionVariables.get(\"monthly_period_end_date\").length <= 5) {\r",
											"    pm.collectionVariables.set(\"monthly_period_end_date\", pm.collectionVariables.get(\"monthly_period_end_date\").concat(\"\", \":00\"));\r",
											"}\r",
											"\r",
											"if(pm.collectionVariables.get(\"specific_period_start_time\") && pm.collectionVariables.get(\"specific_period_start_time\").length <= 5) {\r",
											"    pm.collectionVariables.set(\"specific_period_start_time\", pm.collectionVariables.get(\"specific_period_start_time\").concat(\"\", \":00\"));\r",
											"}\r",
											"\r",
											"if(pm.collectionVariables.get(\"specific_period_end_time\") && pm.collectionVariables.get(\"specific_period_end_time\").length <= 5) {\r",
											"    pm.collectionVariables.set(\"specific_period_end_time\", pm.collectionVariables.get(\"specific_period_end_time\").concat(\"\", \":00\"));\r",
											"}\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"listperiods\",\n  \"object\": \"downtime\",\n  \"values\": \"{{recurring_downtime_name}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "List all hosts before applying a recurring downtime",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"\r",
											"var random = Math.floor(Math.random() * responseJson.meta.total);\r",
											"console.log(random);\r",
											"pm.collectionVariables.set(\"recurring_downtime_host_name\", responseJson.result[random].name);\r",
											"pm.collectionVariables.set(\"recurring_downtime_host_id\", responseJson.result[random].id);\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/monitoring/hosts?limit=20",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"monitoring",
										"hosts"
									],
									"query": [
										{
											"key": "limit",
											"value": "20",
											"description": "Number of displayed items per page"
										},
										{
											"key": "page",
											"value": "",
											"description": "Number of the requested page",
											"disabled": true
										},
										{
											"key": "search",
											"value": "",
											"description": "Retrieve only data matching the defined search value.\nSimple search can be done like the following example: ``` search={\"host.name\":\"Central\"} ```\nComplex search can be done with aggregators and operators.\nAvailable search aggregators are:\n  * `$or`\n  * `$and`\n\nAvailable search operators are:\n  * `$eq` → equal\n  * `$neq` → not equal\n  * `$lt` → less than\n  * `$le` → less or equal than\n  * `$gt` → greater than\n  * `$ge` → greater or equal than\n  * `$lk` → like\n  * `$nk` → not like\n  * `$in` → in\n  * `$ni` → not in\n\nExamples without nested aggregators:\n  ```\n  search={\n    \"$or\":[\n      {\"host.name\":{\"$eq\":\"name_1\"}},\n      {\"host.name\":{\"$eq\":\"name_2\"}}\n    ]\n  }\n  ```\n  ```\n  search={\n    \"$and\":[\n      {\"host.address\":{\"$rg\":\"^10\\.0\\.0\\.\\d+$\"}},\n      {\"host.name\":{\"$lk\":\"fr%\"}}\n    ]\n  }\n  ```\n\nExample with nested aggregators:\n  ```\n  search={\n    \"$or\":[\n      {\n        \"$and\":[\n          {\"host.address\":{\"$rg\":\"^10\\.0\\.0\\.\\d+$\"}},\n          {\"host.name\":{\"$lk\":\"fr%\"}}\n        ]\n      },\n      {\n        \"$and\":[\n          {\"host.address\":{\"$rg\":\"^192\\.168\\.0\\.\\d+$\"}},\n          {\"host.name\":{\"$lk\":\"us%\"}}\n        ]\n      }\n    ]\n  }\n  ```\n",
											"disabled": true
										}
									]
								},
								"description": "List all the hosts in real-time monitoring.\n\nThe available parameters to **search** / **sort_by** are:\n\n* host.id\n* host.name\n* host.alias\n* host.address\n* host.state\n* poller.id\n* service.display_name\n* host_group.id\n* host.is_acknowledged\n* host.downtime\n* host.criticality\n"
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/monitoring/hosts?show_service=true&search=cillum quis commodo&limit=20&page=4",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"monitoring",
												"hosts"
											],
											"query": [
												{
													"key": "show_service",
													"value": "true"
												},
												{
													"key": "search",
													"value": "cillum quis commodo"
												},
												{
													"key": "limit",
													"value": "20"
												},
												{
													"key": "page",
													"value": "4"
												}
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"result\": [\n    {\n      \"id\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"alias\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"display_name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"state\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"services\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"poller_id\": 1,\n      \"acknowledged\": false,\n      \"address_ip\": \"127.0.0.1\",\n      \"check_attempt\": 1,\n      \"checked\": true,\n      \"execution_time\": 0.070906,\n      \"icon_image\": \"ppm/operatingsystems-linux-snmp-linux-128.png\",\n      \"icon_image_alt\": \"\",\n      \"last_check\": \"1980-02-02T05:43:34.625Z\",\n      \"last_hard_state_change\": \"2022-08-05T10:43:02.077Z\",\n      \"last_state_change\": \"1948-11-25T13:12:41.089Z\",\n      \"last_time_down\": \"1945-06-23T19:43:00.867Z\",\n      \"last_time_unreachable\": \"2022-07-05T17:47:46.217Z\",\n      \"last_time_up\": \"1952-11-26T09:19:35.799Z\",\n      \"last_update\": \"2002-02-11T22:28:18.621Z\",\n      \"max_check_attempts\": 3,\n      \"output\": \"OK - 127.0.0.1 rta 0.100ms lost 0%\\n\",\n      \"passive_checks\": false,\n      \"state_type\": 0,\n      \"timezone\": \":Europe/Paris\",\n      \"scheduled_downtime_depth\": 0,\n      \"criticality\": 10\n    },\n    {\n      \"id\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"alias\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"display_name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"state\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"services\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"poller_id\": 1,\n      \"acknowledged\": false,\n      \"address_ip\": \"127.0.0.1\",\n      \"check_attempt\": 1,\n      \"checked\": true,\n      \"execution_time\": 0.070906,\n      \"icon_image\": \"ppm/operatingsystems-linux-snmp-linux-128.png\",\n      \"icon_image_alt\": \"\",\n      \"last_check\": \"2014-11-11T02:07:25.915Z\",\n      \"last_hard_state_change\": \"1966-04-15T04:04:02.849Z\",\n      \"last_state_change\": \"1962-12-26T10:26:12.593Z\",\n      \"last_time_down\": \"2004-09-19T21:36:42.944Z\",\n      \"last_time_unreachable\": \"1951-05-24T08:52:34.057Z\",\n      \"last_time_up\": \"1990-04-26T07:43:26.231Z\",\n      \"last_update\": \"1971-01-30T15:22:21.380Z\",\n      \"max_check_attempts\": 3,\n      \"output\": \"OK - 127.0.0.1 rta 0.100ms lost 0%\\n\",\n      \"passive_checks\": false,\n      \"state_type\": 0,\n      \"timezone\": \":Europe/Paris\",\n      \"scheduled_downtime_depth\": 0,\n      \"criticality\": 10\n    }\n  ],\n  \"meta\": {\n    \"page\": 1,\n    \"limit\": 10,\n    \"search\": {},\n    \"sort_by\": {},\n    \"total\": 1\n  }\n}"
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/monitoring/hosts?show_service=true&search=cillum quis commodo&limit=20&page=4",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"monitoring",
												"hosts"
											],
											"query": [
												{
													"key": "show_service",
													"value": "true"
												},
												{
													"key": "search",
													"value": "cillum quis commodo"
												},
												{
													"key": "limit",
													"value": "20"
												},
												{
													"key": "page",
													"value": "4"
												}
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 403,\n  \"message\": \"You are not authorized to access this resource\"\n}"
								},
								{
									"name": "Internal Server Error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/monitoring/hosts?show_service=true&search=cillum quis commodo&limit=20&page=4",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"monitoring",
												"hosts"
											],
											"query": [
												{
													"key": "show_service",
													"value": "true"
												},
												{
													"key": "search",
													"value": "cillum quis commodo"
												},
												{
													"key": "limit",
													"value": "20"
												},
												{
													"key": "page",
													"value": "4"
												}
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 500,\n  \"message\": \"Internal Server Error\"\n}"
								}
							]
						},
						{
							"name": "Add host to recurrent downtime",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Host has been added to recurrent downtime.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"recurring_downtime_name\", \"test_recurring_downtime\");\r",
											"pm.collectionVariables.set(\"recurring_downtime_description\", \"Recurring Downtime for API tests.\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"addhost\",\n  \"object\": \"downtime\",\n  \"values\": \"{{recurring_downtime_name}};{{recurring_downtime_host_name}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "List all services before applying a recurring downtime",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"\r",
											"var random = Math.floor(Math.random() * responseJson.meta.total);\r",
											"console.log(random);\r",
											"pm.collectionVariables.set(\"recurring_downtime_host_service_name\", responseJson.result[random].host.name);\r",
											"pm.collectionVariables.set(\"recurring_downtime_service_id\", responseJson.result[random].id);\r",
											"pm.collectionVariables.set(\"recurring_downtime_service_description\", responseJson.result[random].description);\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/monitoring/services?limit=20",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"monitoring",
										"services"
									],
									"query": [
										{
											"key": "limit",
											"value": "20",
											"description": "Number of displayed items per page"
										},
										{
											"key": "page",
											"value": "",
											"description": "Number of the requested page",
											"disabled": true
										},
										{
											"key": "search",
											"value": "",
											"description": "Retrieve only data matching the defined search value.\nSimple search can be done like the following example: ``` search={\"host.name\":\"Central\"} ```\nComplex search can be done with aggregators and operators.\nAvailable search aggregators are:\n  * `$or`\n  * `$and`\n\nAvailable search operators are:\n  * `$eq` → equal\n  * `$neq` → not equal\n  * `$lt` → less than\n  * `$le` → less or equal than\n  * `$gt` → greater than\n  * `$ge` → greater or equal than\n  * `$lk` → like\n  * `$nk` → not like\n  * `$in` → in\n  * `$ni` → not in\n\nExamples without nested aggregators:\n  ```\n  search={\n    \"$or\":[\n      {\"host.name\":{\"$eq\":\"name_1\"}},\n      {\"host.name\":{\"$eq\":\"name_2\"}}\n    ]\n  }\n  ```\n  ```\n  search={\n    \"$and\":[\n      {\"host.address\":{\"$rg\":\"^10\\.0\\.0\\.\\d+$\"}},\n      {\"host.name\":{\"$lk\":\"fr%\"}}\n    ]\n  }\n  ```\n\nExample with nested aggregators:\n  ```\n  search={\n    \"$or\":[\n      {\n        \"$and\":[\n          {\"host.address\":{\"$rg\":\"^10\\.0\\.0\\.\\d+$\"}},\n          {\"host.name\":{\"$lk\":\"fr%\"}}\n        ]\n      },\n      {\n        \"$and\":[\n          {\"host.address\":{\"$rg\":\"^192\\.168\\.0\\.\\d+$\"}},\n          {\"host.name\":{\"$lk\":\"us%\"}}\n        ]\n      }\n    ]\n  }\n  ```\n",
											"disabled": true
										}
									]
								},
								"description": "List all the hosts in real-time monitoring.\n\nThe available parameters to **search** / **sort_by** are:\n\n* host.id\n* host.name\n* host.alias\n* host.address\n* host.state\n* poller.id\n* service.display_name\n* host_group.id\n* host.is_acknowledged\n* host.downtime\n* host.criticality\n"
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/monitoring/hosts?show_service=true&search=cillum quis commodo&limit=20&page=4",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"monitoring",
												"hosts"
											],
											"query": [
												{
													"key": "show_service",
													"value": "true"
												},
												{
													"key": "search",
													"value": "cillum quis commodo"
												},
												{
													"key": "limit",
													"value": "20"
												},
												{
													"key": "page",
													"value": "4"
												}
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"result\": [\n    {\n      \"id\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"alias\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"display_name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"state\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"services\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"poller_id\": 1,\n      \"acknowledged\": false,\n      \"address_ip\": \"127.0.0.1\",\n      \"check_attempt\": 1,\n      \"checked\": true,\n      \"execution_time\": 0.070906,\n      \"icon_image\": \"ppm/operatingsystems-linux-snmp-linux-128.png\",\n      \"icon_image_alt\": \"\",\n      \"last_check\": \"1980-02-02T05:43:34.625Z\",\n      \"last_hard_state_change\": \"2022-08-05T10:43:02.077Z\",\n      \"last_state_change\": \"1948-11-25T13:12:41.089Z\",\n      \"last_time_down\": \"1945-06-23T19:43:00.867Z\",\n      \"last_time_unreachable\": \"2022-07-05T17:47:46.217Z\",\n      \"last_time_up\": \"1952-11-26T09:19:35.799Z\",\n      \"last_update\": \"2002-02-11T22:28:18.621Z\",\n      \"max_check_attempts\": 3,\n      \"output\": \"OK - 127.0.0.1 rta 0.100ms lost 0%\\n\",\n      \"passive_checks\": false,\n      \"state_type\": 0,\n      \"timezone\": \":Europe/Paris\",\n      \"scheduled_downtime_depth\": 0,\n      \"criticality\": 10\n    },\n    {\n      \"id\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"alias\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"display_name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"state\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"services\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"poller_id\": 1,\n      \"acknowledged\": false,\n      \"address_ip\": \"127.0.0.1\",\n      \"check_attempt\": 1,\n      \"checked\": true,\n      \"execution_time\": 0.070906,\n      \"icon_image\": \"ppm/operatingsystems-linux-snmp-linux-128.png\",\n      \"icon_image_alt\": \"\",\n      \"last_check\": \"2014-11-11T02:07:25.915Z\",\n      \"last_hard_state_change\": \"1966-04-15T04:04:02.849Z\",\n      \"last_state_change\": \"1962-12-26T10:26:12.593Z\",\n      \"last_time_down\": \"2004-09-19T21:36:42.944Z\",\n      \"last_time_unreachable\": \"1951-05-24T08:52:34.057Z\",\n      \"last_time_up\": \"1990-04-26T07:43:26.231Z\",\n      \"last_update\": \"1971-01-30T15:22:21.380Z\",\n      \"max_check_attempts\": 3,\n      \"output\": \"OK - 127.0.0.1 rta 0.100ms lost 0%\\n\",\n      \"passive_checks\": false,\n      \"state_type\": 0,\n      \"timezone\": \":Europe/Paris\",\n      \"scheduled_downtime_depth\": 0,\n      \"criticality\": 10\n    }\n  ],\n  \"meta\": {\n    \"page\": 1,\n    \"limit\": 10,\n    \"search\": {},\n    \"sort_by\": {},\n    \"total\": 1\n  }\n}"
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/monitoring/hosts?show_service=true&search=cillum quis commodo&limit=20&page=4",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"monitoring",
												"hosts"
											],
											"query": [
												{
													"key": "show_service",
													"value": "true"
												},
												{
													"key": "search",
													"value": "cillum quis commodo"
												},
												{
													"key": "limit",
													"value": "20"
												},
												{
													"key": "page",
													"value": "4"
												}
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 403,\n  \"message\": \"You are not authorized to access this resource\"\n}"
								},
								{
									"name": "Internal Server Error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/monitoring/hosts?show_service=true&search=cillum quis commodo&limit=20&page=4",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"monitoring",
												"hosts"
											],
											"query": [
												{
													"key": "show_service",
													"value": "true"
												},
												{
													"key": "search",
													"value": "cillum quis commodo"
												},
												{
													"key": "limit",
													"value": "20"
												},
												{
													"key": "page",
													"value": "4"
												}
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 500,\n  \"message\": \"Internal Server Error\"\n}"
								}
							]
						},
						{
							"name": "Add service to recurrent downtime",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Service has been added to recurrent downtime.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"recurring_downtime_name\", \"test_recurring_downtime\");\r",
											"pm.collectionVariables.set(\"recurring_downtime_description\", \"Recurring Downtime for API tests.\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"addservice\",\n  \"object\": \"downtime\",\n  \"values\": \"{{recurring_downtime_name}};{{recurring_downtime_host_service_name}},{{recurring_downtime_service_description}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "60 - Dependency Management",
			"item": [
				{
					"name": "Critical Path",
					"item": [
						{
							"name": "Show dependencies",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"A list of dependencies has been fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\":\"show\",\n  \"object\":\"dep\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Add a new dependency",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Dependency has been created.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"dependencyName\", \"Dependency01\");\r",
											"pm.collectionVariables.set(\"dependencyDescription\", \"Test API Dependency\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\":\"add\",\n  \"object\":\"dep\",\n  \"values\":\"{{dependencyName}};{{dependencyDescription}};HOST;{{parent_host_name}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Add children to the dependency",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"A child has been added to this dependency.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"dependencyName\", \"Dependency01\");\r",
											"pm.collectionVariables.set(\"dependencyDescription\", \"Test API Dependency\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\":\"addchild\",\n  \"object\":\"dep\",\n  \"values\":\"{{dependencyName}};{{child_host_name}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "List the specificities of the dependency",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"A list expliciting the attributes of the dependency has been fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"dependencyName\", \"Dependency01\");\r",
											"pm.collectionVariables.set(\"dependencyDescription\", \"Test API Dependency\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\":\"listdep\",\n  \"object\":\"dep\",\n  \"values\":\"{{dependencyName}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Set parameters for a specific newly created dependency",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const parameters = pm.collectionVariables.get(\"list_of_parameters\");\r",
											"\r",
											"pm.test(\"Parameter \" + pm.collectionVariables.get(\"current_parameter\") + \" was updated with \" + pm.collectionVariables.get(\"current_value\"), function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"if (pm.collectionVariables.get(\"description\") && pm.collectionVariables.get(\"description\") != pm.collectionVariables.get(\"serviceDescription\")) {\r",
											"    pm.collectionVariables.set(\"serviceDescription\", pm.collectionVariables.get(\"description\"));\r",
											"}\r",
											"\r",
											"if (parameters && parameters.length > 0) {\r",
											"    postman.setNextRequest(\"Set parameters for a specific newly created dependency\");\r",
											"} else {\r",
											"    pm.collectionVariables.unset(\"current_parameter\");\r",
											"    pm.collectionVariables.unset(\"current_value\");\r",
											"    pm.collectionVariables.unset(\"list_of_parameters\");\r",
											"    pm.collectionVariables.unset(\"list_of_values\");\r",
											"    postman.setNextRequest(\"Export configuration after dependency update\");\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let parameters = pm.collectionVariables.get(\"list_of_parameters\");\r",
											"let values = pm.collectionVariables.get(\"list_of_values\");\r",
											"let parameters_to_check = pm.collectionVariables.get(\"parameters_to_check\");\r",
											"\r",
											"if (!parameters || parameters.length == 0) {\r",
											"    parameters = [\"inherits_parent\", \"execution_failure_criteria\", \"notification_failure_criteria\"];\r",
											"    parameters_to_check = [];\r",
											"    values = [1, [\"d\",\"u\",\"p\"], [\"d\",\"u\",\"p\"]];\r",
											"}\r",
											"\r",
											"let current_parameter = parameters.shift();\r",
											"pm.collectionVariables.set(\"current_parameter\", current_parameter);\r",
											"pm.collectionVariables.set(\"list_of_parameters\", parameters);\r",
											"let current_value = values.shift();\r",
											"pm.collectionVariables.set(\"current_value\", current_value);\r",
											"pm.collectionVariables.set(\"list_of_values\", values);\r",
											"\r",
											"pm.collectionVariables.set(current_parameter, current_value);\r",
											"\r",
											"parameters_to_check.push(current_parameter);\r",
											"pm.collectionVariables.set(\"parameters_to_check\", parameters_to_check);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\":\"setparam\",\n  \"object\":\"dep\",\n  \"values\": \"{{dependencyName}};{{current_parameter}};{{current_value}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Export configuration after dependency update",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"setTimeout(function(){}, [2000]);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"APPLYCFG\",\n  \"values\": \"Central\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Show dependencies after creation & update",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"A list of dependencies has been fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"responseJson = pm.response.json();\r",
											"pm.test(\"It now contains one dependency, the one we have created and configured.\", function() {\r",
											"    pm.expect(responseJson.result[0].name).to.eql(pm.collectionVariables.get(\"dependencyName\"));\r",
											"}) \r",
											"const keys = Object.keys(responseJson.result[0]);\r",
											"const values = Object.values(responseJson.result[0]);\r",
											"var parameters_to_check = pm.collectionVariables.get(\"parameters_to_check\");\r",
											"\r",
											"for (let i = 0; i < parameters_to_check.length; i++) {\r",
											"    var j = keys.indexOf(parameters_to_check[i]);\r",
											"    if(j != -1) {\r",
											"        pm.test(\"Parameter \" + parameters_to_check[i] + \" now has value \" + pm.collectionVariables.get(parameters_to_check[i]), function() {\r",
											"            switch (parameters_to_check[i]) {\r",
											"            case \"name\" || \"description\":\r",
											"                pm.expect(pm.collectionVariables.get(parameters_to_check[i])).to.eql(values[j]);\r",
											"                break;\r",
											"            case \"inherits_parent\":\r",
											"                pm.expect(pm.collectionVariables.get(parameters_to_check[i])).to.eql(parseInt(values[j]));\r",
											"                break;\r",
											"            case \"execution_failure_criteria\" || \"notification_failure_criteria\":\r",
											"                // Parses the values set by the user for these parameters into a single string with the same format as what we get in the responseJson\r",
											"                final_parameter = \"\";\r",
											"                for (var k = 0; k < pm.collectionVariables.get(parameters_to_check[i]).length; k++) {\r",
											"                    final_parameter = final_parameter.concat(',', pm.collectionVariables.get(parameters_to_check[i])[k]);\r",
											"                }\r",
											"                pm.expect(final_parameter.substring(1)).to.eql(values[j]);\r",
											"                break;\r",
											"            }\r",
											"            pm.collectionVariables.unset(parameters_to_check[i]);\r",
											"        }) \r",
											"    }\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\":\"show\",\n  \"object\":\"dep\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "70 - Acknowledgement Management",
			"item": [
				{
					"name": "Host Acknowedgement Management",
					"item": [
						{
							"name": "Critical Path",
							"item": [
								{
									"name": "List all hosts before acknowledgement",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"A list of hosts has been successfully fetched.\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"const responseJson = pm.response.json();\r",
													"\r",
													"for (var i = 0; i < responseJson.result.length; i++) {\r",
													"    if((responseJson.result[i].acknowledged == false) && ((responseJson.result[i].state == 1) ||(responseJson.result[i].state == 2))) {\r",
													"        pm.collectionVariables.set(\"acknowledged_host_id\", responseJson.result[i].id);\r",
													"        pm.collectionVariables.set(\"acknowledged_host_name\", responseJson.result[i].name);\r",
													"        pm.collectionVariables.set(\"acknowledged_host_ipaddr\", responseJson.result[i].address_ip);\r",
													"        break;\r",
													"    }\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/monitoring/hosts?limit=20",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"monitoring",
												"hosts"
											],
											"query": [
												{
													"key": "limit",
													"value": "20",
													"description": "Number of displayed items per page"
												},
												{
													"key": "page",
													"value": "",
													"description": "Number of the requested page",
													"disabled": true
												},
												{
													"key": "search",
													"value": "",
													"description": "Retrieve only data matching the defined search value.\nSimple search can be done like the following example: ``` search={\"host.name\":\"Central\"} ```\nComplex search can be done with aggregators and operators.\nAvailable search aggregators are:\n  * `$or`\n  * `$and`\n\nAvailable search operators are:\n  * `$eq` → equal\n  * `$neq` → not equal\n  * `$lt` → less than\n  * `$le` → less or equal than\n  * `$gt` → greater than\n  * `$ge` → greater or equal than\n  * `$lk` → like\n  * `$nk` → not like\n  * `$in` → in\n  * `$ni` → not in\n\nExamples without nested aggregators:\n  ```\n  search={\n    \"$or\":[\n      {\"host.name\":{\"$eq\":\"name_1\"}},\n      {\"host.name\":{\"$eq\":\"name_2\"}}\n    ]\n  }\n  ```\n  ```\n  search={\n    \"$and\":[\n      {\"host.address\":{\"$rg\":\"^10\\.0\\.0\\.\\d+$\"}},\n      {\"host.name\":{\"$lk\":\"fr%\"}}\n    ]\n  }\n  ```\n\nExample with nested aggregators:\n  ```\n  search={\n    \"$or\":[\n      {\n        \"$and\":[\n          {\"host.address\":{\"$rg\":\"^10\\.0\\.0\\.\\d+$\"}},\n          {\"host.name\":{\"$lk\":\"fr%\"}}\n        ]\n      },\n      {\n        \"$and\":[\n          {\"host.address\":{\"$rg\":\"^192\\.168\\.0\\.\\d+$\"}},\n          {\"host.name\":{\"$lk\":\"us%\"}}\n        ]\n      }\n    ]\n  }\n  ```\n",
													"disabled": true
												}
											]
										},
										"description": "List all the hosts in real-time monitoring.\n\nThe available parameters to **search** / **sort_by** are:\n\n* host.id\n* host.name\n* host.alias\n* host.address\n* host.state\n* poller.id\n* service.display_name\n* host_group.id\n* host.is_acknowledged\n* host.downtime\n* host.criticality\n"
									},
									"response": [
										{
											"name": "OK",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "X-AUTH-TOKEN",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/monitoring/hosts?show_service=true&search=cillum quis commodo&limit=20&page=4",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"monitoring",
														"hosts"
													],
													"query": [
														{
															"key": "show_service",
															"value": "true"
														},
														{
															"key": "search",
															"value": "cillum quis commodo"
														},
														{
															"key": "limit",
															"value": "20"
														},
														{
															"key": "page",
															"value": "4"
														}
													],
													"variable": [
														{
															"key": "protocol",
															"value": "{{protocol}}",
															"description": "HTTP schema (This can only be one of http,https)"
														},
														{
															"key": "server",
															"value": "{{server}}",
															"description": "IP address or hostname of Centreon server"
														},
														{
															"key": "port",
															"value": "{{port}}",
															"description": "Port used by HTTP server"
														},
														{
															"key": "version",
															"value": "{{version}}",
															"description": "Version of the API"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"result\": [\n    {\n      \"id\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"alias\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"display_name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"state\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"services\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"poller_id\": 1,\n      \"acknowledged\": false,\n      \"address_ip\": \"127.0.0.1\",\n      \"check_attempt\": 1,\n      \"checked\": true,\n      \"execution_time\": 0.070906,\n      \"icon_image\": \"ppm/operatingsystems-linux-snmp-linux-128.png\",\n      \"icon_image_alt\": \"\",\n      \"last_check\": \"1980-02-02T05:43:34.625Z\",\n      \"last_hard_state_change\": \"2022-08-05T10:43:02.077Z\",\n      \"last_state_change\": \"1948-11-25T13:12:41.089Z\",\n      \"last_time_down\": \"1945-06-23T19:43:00.867Z\",\n      \"last_time_unreachable\": \"2022-07-05T17:47:46.217Z\",\n      \"last_time_up\": \"1952-11-26T09:19:35.799Z\",\n      \"last_update\": \"2002-02-11T22:28:18.621Z\",\n      \"max_check_attempts\": 3,\n      \"output\": \"OK - 127.0.0.1 rta 0.100ms lost 0%\\n\",\n      \"passive_checks\": false,\n      \"state_type\": 0,\n      \"timezone\": \":Europe/Paris\",\n      \"scheduled_downtime_depth\": 0,\n      \"criticality\": 10\n    },\n    {\n      \"id\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"alias\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"display_name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"state\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"services\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"poller_id\": 1,\n      \"acknowledged\": false,\n      \"address_ip\": \"127.0.0.1\",\n      \"check_attempt\": 1,\n      \"checked\": true,\n      \"execution_time\": 0.070906,\n      \"icon_image\": \"ppm/operatingsystems-linux-snmp-linux-128.png\",\n      \"icon_image_alt\": \"\",\n      \"last_check\": \"2014-11-11T02:07:25.915Z\",\n      \"last_hard_state_change\": \"1966-04-15T04:04:02.849Z\",\n      \"last_state_change\": \"1962-12-26T10:26:12.593Z\",\n      \"last_time_down\": \"2004-09-19T21:36:42.944Z\",\n      \"last_time_unreachable\": \"1951-05-24T08:52:34.057Z\",\n      \"last_time_up\": \"1990-04-26T07:43:26.231Z\",\n      \"last_update\": \"1971-01-30T15:22:21.380Z\",\n      \"max_check_attempts\": 3,\n      \"output\": \"OK - 127.0.0.1 rta 0.100ms lost 0%\\n\",\n      \"passive_checks\": false,\n      \"state_type\": 0,\n      \"timezone\": \":Europe/Paris\",\n      \"scheduled_downtime_depth\": 0,\n      \"criticality\": 10\n    }\n  ],\n  \"meta\": {\n    \"page\": 1,\n    \"limit\": 10,\n    \"search\": {},\n    \"sort_by\": {},\n    \"total\": 1\n  }\n}"
										},
										{
											"name": "Forbidden",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "X-AUTH-TOKEN",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/monitoring/hosts?show_service=true&search=cillum quis commodo&limit=20&page=4",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"monitoring",
														"hosts"
													],
													"query": [
														{
															"key": "show_service",
															"value": "true"
														},
														{
															"key": "search",
															"value": "cillum quis commodo"
														},
														{
															"key": "limit",
															"value": "20"
														},
														{
															"key": "page",
															"value": "4"
														}
													],
													"variable": [
														{
															"key": "protocol",
															"value": "{{protocol}}",
															"description": "HTTP schema (This can only be one of http,https)"
														},
														{
															"key": "server",
															"value": "{{server}}",
															"description": "IP address or hostname of Centreon server"
														},
														{
															"key": "port",
															"value": "{{port}}",
															"description": "Port used by HTTP server"
														},
														{
															"key": "version",
															"value": "{{version}}",
															"description": "Version of the API"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"code\": 403,\n  \"message\": \"You are not authorized to access this resource\"\n}"
										},
										{
											"name": "Internal Server Error",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "X-AUTH-TOKEN",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/monitoring/hosts?show_service=true&search=cillum quis commodo&limit=20&page=4",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"monitoring",
														"hosts"
													],
													"query": [
														{
															"key": "show_service",
															"value": "true"
														},
														{
															"key": "search",
															"value": "cillum quis commodo"
														},
														{
															"key": "limit",
															"value": "20"
														},
														{
															"key": "page",
															"value": "4"
														}
													],
													"variable": [
														{
															"key": "protocol",
															"value": "{{protocol}}",
															"description": "HTTP schema (This can only be one of http,https)"
														},
														{
															"key": "server",
															"value": "{{server}}",
															"description": "IP address or hostname of Centreon server"
														},
														{
															"key": "port",
															"value": "{{port}}",
															"description": "Port used by HTTP server"
														},
														{
															"key": "version",
															"value": "{{version}}",
															"description": "Version of the API"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"code\": 500,\n  \"message\": \"Internal Server Error\"\n}"
										}
									]
								},
								{
									"name": "Get the future acknowledged host",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/monitoring/hosts/{{acknowledged_host_id}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"monitoring",
												"hosts",
												"{{acknowledged_host_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Add an acknowledgement on down host",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});\r",
													"setTimeout(function(){}, [2000]);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.sendRequest(\"https://cdnjs.cloudflare.com/ajax/libs/dayjs/1.11.6/dayjs.min.js\", (err, res) => {\r",
													"    dayjs_code = res.text();\r",
													"    eval(dayjs_code);\r",
													"    new Function(dayjs_code)();\r",
													"    pm.collectionVariables.set(\"entry_time\", dayjs().format(\"YYYY-MM-DDTHH:mm:ssZ\"));\r",
													"    pm.collectionVariables.set(\"acknowledgement_comment\", \"Acknowledged by admin.\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"comment\": \"{{acknowledgement_comment}}\",\r\n    \"is_notify_contacts\": false,\r\n    \"is_persistent_comment\": true,\r\n    \"is_sticky\": true,\r\n    \"with_services\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/monitoring/hosts/{{acknowledged_host_id}}/acknowledgements",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"monitoring",
												"hosts",
												"{{acknowledged_host_id}}",
												"acknowledgements"
											]
										}
									},
									"response": []
								},
								{
									"name": "List all acknowledgements",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"A list of acknowledgements has been successfully fetched.\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.sendRequest(\"https://cdnjs.cloudflare.com/ajax/libs/dayjs/1.11.6/dayjs.min.js\", (err, res) => {\r",
													"    dayjs_code = res.text();\r",
													"    eval(dayjs_code);\r",
													"    new Function(dayjs_code)();\r",
													"    const responseJson = pm.response.json();\r",
													"    for (var i = 0; i < responseJson.result.length; i++) {\r",
													"        if(Math.abs(dayjs(responseJson.result[i].entry_time).diff(pm.collectionVariables.get(\"entry_time\"),\"s\")) < 5) {\r",
													"            pm.test(\"This is the acknowledgement that has just been set.\", function() {\r",
													"                pm.expect(pm.collectionVariables.get(\"acknowledgement_comment\")).to.eql(responseJson.result[i].comment);\r",
													"                pm.expect(pm.collectionVariables.get(\"current_user_id\")).to.eql(responseJson.result[i].author_id);\r",
													"            })\r",
													"        }\r",
													"    }\r",
													"});\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/monitoring/acknowledgements?limit=20",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"monitoring",
												"acknowledgements"
											],
											"query": [
												{
													"key": "search",
													"value": "cillum quis commodo",
													"description": "Retrieve only data matching the defined search value.\nSimple search can be done like the following example: ``` search={\"host.name\":\"Central\"} ```\nComplex search can be done with aggregators and operators.\nAvailable search aggregators are:\n  * `$or`\n  * `$and`\n\nAvailable search operators are:\n  * `$eq` → equal\n  * `$neq` → not equal\n  * `$lt` → less than\n  * `$le` → less or equal than\n  * `$gt` → greater than\n  * `$ge` → greater or equal than\n  * `$lk` → like\n  * `$nk` → not like\n  * `$in` → in\n  * `$ni` → not in\n\nExamples without nested aggregators:\n  ```\n  search={\n    \"$or\":[\n      {\"host.name\":{\"$eq\":\"name_1\"}},\n      {\"host.name\":{\"$eq\":\"name_2\"}}\n    ]\n  }\n  ```\n  ```\n  search={\n    \"$and\":[\n      {\"host.address\":{\"$rg\":\"^10\\.0\\.0\\.\\d+$\"}},\n      {\"host.name\":{\"$lk\":\"fr%\"}}\n    ]\n  }\n  ```\n\nExample with nested aggregators:\n  ```\n  search={\n    \"$or\":[\n      {\n        \"$and\":[\n          {\"host.address\":{\"$rg\":\"^10\\.0\\.0\\.\\d+$\"}},\n          {\"host.name\":{\"$lk\":\"fr%\"}}\n        ]\n      },\n      {\n        \"$and\":[\n          {\"host.address\":{\"$rg\":\"^192\\.168\\.0\\.\\d+$\"}},\n          {\"host.name\":{\"$lk\":\"us%\"}}\n        ]\n      }\n    ]\n  }\n  ```\n",
													"disabled": true
												},
												{
													"key": "limit",
													"value": "20",
													"description": "Number of items per pages"
												},
												{
													"key": "page",
													"value": "4",
													"description": "Number of the requested page",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"response": [
										{
											"name": "OK",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "X-AUTH-TOKEN",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/monitoring/acknowledgements?search=cillum quis commodo&limit=20&page=4",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"monitoring",
														"acknowledgements"
													],
													"query": [
														{
															"key": "search",
															"value": "cillum quis commodo"
														},
														{
															"key": "limit",
															"value": "20"
														},
														{
															"key": "page",
															"value": "4"
														}
													],
													"variable": [
														{
															"key": "protocol",
															"value": "{{protocol}}",
															"description": "HTTP schema (This can only be one of http,https)"
														},
														{
															"key": "server",
															"value": "{{server}}",
															"description": "IP address or hostname of Centreon server"
														},
														{
															"key": "port",
															"value": "{{port}}",
															"description": "Port used by HTTP server"
														},
														{
															"key": "version",
															"value": "{{version}}",
															"description": "Version of the API"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"result\": [\n    {\n      \"id\": 34,\n      \"author_id\": 3,\n      \"author_name\": \"admin\",\n      \"comment\": \"Acknowledged by admin\",\n      \"deletion_time\": \"2018-11-11T18:30:11.478Z\",\n      \"entry_time\": \"1972-10-24T21:08:14.231Z\",\n      \"host_id\": 12,\n      \"poller_id\": 1,\n      \"is_notify_contacts\": false,\n      \"is_persistent_comment\": true,\n      \"is_sticky\": true,\n      \"state\": 1,\n      \"service_id\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    {\n      \"id\": 34,\n      \"author_id\": 3,\n      \"author_name\": \"admin\",\n      \"comment\": \"Acknowledged by admin\",\n      \"deletion_time\": \"1980-07-14T18:43:06.037Z\",\n      \"entry_time\": \"2019-06-04T15:34:06.223Z\",\n      \"host_id\": 12,\n      \"poller_id\": 1,\n      \"is_notify_contacts\": false,\n      \"is_persistent_comment\": true,\n      \"is_sticky\": true,\n      \"state\": 1,\n      \"service_id\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    }\n  ],\n  \"meta\": {\n    \"page\": 1,\n    \"limit\": 10,\n    \"search\": {},\n    \"sort_by\": {},\n    \"total\": 1\n  }\n}"
										},
										{
											"name": "Forbidden",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "X-AUTH-TOKEN",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/monitoring/acknowledgements?search=cillum quis commodo&limit=20&page=4",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"monitoring",
														"acknowledgements"
													],
													"query": [
														{
															"key": "search",
															"value": "cillum quis commodo"
														},
														{
															"key": "limit",
															"value": "20"
														},
														{
															"key": "page",
															"value": "4"
														}
													],
													"variable": [
														{
															"key": "protocol",
															"value": "{{protocol}}",
															"description": "HTTP schema (This can only be one of http,https)"
														},
														{
															"key": "server",
															"value": "{{server}}",
															"description": "IP address or hostname of Centreon server"
														},
														{
															"key": "port",
															"value": "{{port}}",
															"description": "Port used by HTTP server"
														},
														{
															"key": "version",
															"value": "{{version}}",
															"description": "Version of the API"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"code\": 403,\n  \"message\": \"You are not authorized to access this resource\"\n}"
										},
										{
											"name": "Internal Server Error",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "X-AUTH-TOKEN",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/monitoring/acknowledgements?search=cillum quis commodo&limit=20&page=4",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"monitoring",
														"acknowledgements"
													],
													"query": [
														{
															"key": "search",
															"value": "cillum quis commodo"
														},
														{
															"key": "limit",
															"value": "20"
														},
														{
															"key": "page",
															"value": "4"
														}
													],
													"variable": [
														{
															"key": "protocol",
															"value": "{{protocol}}",
															"description": "HTTP schema (This can only be one of http,https)"
														},
														{
															"key": "server",
															"value": "{{server}}",
															"description": "IP address or hostname of Centreon server"
														},
														{
															"key": "port",
															"value": "{{port}}",
															"description": "Port used by HTTP server"
														},
														{
															"key": "version",
															"value": "{{version}}",
															"description": "Version of the API"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"code\": 500,\n  \"message\": \"Internal Server Error\"\n}"
										}
									]
								},
								{
									"name": "Disacknowledge host",
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/monitoring/hosts/{{acknowledged_host_id}}/acknowledgements",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"monitoring",
												"hosts",
												"{{acknowledged_host_id}}",
												"acknowledgements"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Edge Cases",
							"item": []
						}
					]
				},
				{
					"name": "Service Acknowedgement Management",
					"item": [
						{
							"name": "Critical Path",
							"item": [
								{
									"name": "List all services before acknowledgement",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"const responseJson = pm.response.json();\r",
													"\r",
													"var i = 0;\r",
													"while (i < responseJson.result.length) {\r",
													"    if((responseJson.result[i].acknowledged == false) && ((responseJson.result[i].state == 1) ||(responseJson.result[i].state == 2))) {\r",
													"        pm.collectionVariables.set(\"acknowledged_service_id\", responseJson.result[i].id);\r",
													"        break;\r",
													"    }\r",
													"    i++;\r",
													"}\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/monitoring/services?limit=20&service.state=2",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"monitoring",
												"services"
											],
											"query": [
												{
													"key": "limit",
													"value": "20"
												},
												{
													"key": "page",
													"value": "",
													"description": "Number of the requested page",
													"disabled": true
												},
												{
													"key": "service.state",
													"value": "2"
												}
											]
										},
										"description": "List all the hosts in real-time monitoring.\n\nThe available parameters to **search** / **sort_by** are:\n\n* host.id\n* host.name\n* host.alias\n* host.address\n* host.state\n* poller.id\n* service.display_name\n* host_group.id\n* host.is_acknowledged\n* host.downtime\n* host.criticality\n"
									},
									"response": [
										{
											"name": "OK",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "X-AUTH-TOKEN",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/monitoring/hosts?show_service=true&search=cillum quis commodo&limit=20&page=4",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"monitoring",
														"hosts"
													],
													"query": [
														{
															"key": "show_service",
															"value": "true"
														},
														{
															"key": "search",
															"value": "cillum quis commodo"
														},
														{
															"key": "limit",
															"value": "20"
														},
														{
															"key": "page",
															"value": "4"
														}
													],
													"variable": [
														{
															"key": "protocol",
															"value": "{{protocol}}",
															"description": "HTTP schema (This can only be one of http,https)"
														},
														{
															"key": "server",
															"value": "{{server}}",
															"description": "IP address or hostname of Centreon server"
														},
														{
															"key": "port",
															"value": "{{port}}",
															"description": "Port used by HTTP server"
														},
														{
															"key": "version",
															"value": "{{version}}",
															"description": "Version of the API"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"result\": [\n    {\n      \"id\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"alias\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"display_name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"state\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"services\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"poller_id\": 1,\n      \"acknowledged\": false,\n      \"address_ip\": \"127.0.0.1\",\n      \"check_attempt\": 1,\n      \"checked\": true,\n      \"execution_time\": 0.070906,\n      \"icon_image\": \"ppm/operatingsystems-linux-snmp-linux-128.png\",\n      \"icon_image_alt\": \"\",\n      \"last_check\": \"1980-02-02T05:43:34.625Z\",\n      \"last_hard_state_change\": \"2022-08-05T10:43:02.077Z\",\n      \"last_state_change\": \"1948-11-25T13:12:41.089Z\",\n      \"last_time_down\": \"1945-06-23T19:43:00.867Z\",\n      \"last_time_unreachable\": \"2022-07-05T17:47:46.217Z\",\n      \"last_time_up\": \"1952-11-26T09:19:35.799Z\",\n      \"last_update\": \"2002-02-11T22:28:18.621Z\",\n      \"max_check_attempts\": 3,\n      \"output\": \"OK - 127.0.0.1 rta 0.100ms lost 0%\\n\",\n      \"passive_checks\": false,\n      \"state_type\": 0,\n      \"timezone\": \":Europe/Paris\",\n      \"scheduled_downtime_depth\": 0,\n      \"criticality\": 10\n    },\n    {\n      \"id\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"alias\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"display_name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"state\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"services\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"poller_id\": 1,\n      \"acknowledged\": false,\n      \"address_ip\": \"127.0.0.1\",\n      \"check_attempt\": 1,\n      \"checked\": true,\n      \"execution_time\": 0.070906,\n      \"icon_image\": \"ppm/operatingsystems-linux-snmp-linux-128.png\",\n      \"icon_image_alt\": \"\",\n      \"last_check\": \"2014-11-11T02:07:25.915Z\",\n      \"last_hard_state_change\": \"1966-04-15T04:04:02.849Z\",\n      \"last_state_change\": \"1962-12-26T10:26:12.593Z\",\n      \"last_time_down\": \"2004-09-19T21:36:42.944Z\",\n      \"last_time_unreachable\": \"1951-05-24T08:52:34.057Z\",\n      \"last_time_up\": \"1990-04-26T07:43:26.231Z\",\n      \"last_update\": \"1971-01-30T15:22:21.380Z\",\n      \"max_check_attempts\": 3,\n      \"output\": \"OK - 127.0.0.1 rta 0.100ms lost 0%\\n\",\n      \"passive_checks\": false,\n      \"state_type\": 0,\n      \"timezone\": \":Europe/Paris\",\n      \"scheduled_downtime_depth\": 0,\n      \"criticality\": 10\n    }\n  ],\n  \"meta\": {\n    \"page\": 1,\n    \"limit\": 10,\n    \"search\": {},\n    \"sort_by\": {},\n    \"total\": 1\n  }\n}"
										},
										{
											"name": "Forbidden",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "X-AUTH-TOKEN",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/monitoring/hosts?show_service=true&search=cillum quis commodo&limit=20&page=4",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"monitoring",
														"hosts"
													],
													"query": [
														{
															"key": "show_service",
															"value": "true"
														},
														{
															"key": "search",
															"value": "cillum quis commodo"
														},
														{
															"key": "limit",
															"value": "20"
														},
														{
															"key": "page",
															"value": "4"
														}
													],
													"variable": [
														{
															"key": "protocol",
															"value": "{{protocol}}",
															"description": "HTTP schema (This can only be one of http,https)"
														},
														{
															"key": "server",
															"value": "{{server}}",
															"description": "IP address or hostname of Centreon server"
														},
														{
															"key": "port",
															"value": "{{port}}",
															"description": "Port used by HTTP server"
														},
														{
															"key": "version",
															"value": "{{version}}",
															"description": "Version of the API"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"code\": 403,\n  \"message\": \"You are not authorized to access this resource\"\n}"
										},
										{
											"name": "Internal Server Error",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "X-AUTH-TOKEN",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/monitoring/hosts?show_service=true&search=cillum quis commodo&limit=20&page=4",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"monitoring",
														"hosts"
													],
													"query": [
														{
															"key": "show_service",
															"value": "true"
														},
														{
															"key": "search",
															"value": "cillum quis commodo"
														},
														{
															"key": "limit",
															"value": "20"
														},
														{
															"key": "page",
															"value": "4"
														}
													],
													"variable": [
														{
															"key": "protocol",
															"value": "{{protocol}}",
															"description": "HTTP schema (This can only be one of http,https)"
														},
														{
															"key": "server",
															"value": "{{server}}",
															"description": "IP address or hostname of Centreon server"
														},
														{
															"key": "port",
															"value": "{{port}}",
															"description": "Port used by HTTP server"
														},
														{
															"key": "version",
															"value": "{{version}}",
															"description": "Version of the API"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"code\": 500,\n  \"message\": \"Internal Server Error\"\n}"
										}
									]
								},
								{
									"name": "Get the future acknowledged service",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/monitoring/services/{{acknowledged_service_id}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"monitoring",
												"services",
												"{{acknowledged_service_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Add an acknowledgement on down service",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.collectionVariables.set(\"acknowledgement_comment\", \"Acknowledged by admin.\");\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"comment\": \"{{acknowledgement_comment}}\",\r\n    \"is_notify_contacts\": false,\r\n    \"is_persistent_comment\": true,\r\n    \"is_sticky\": true,\r\n    \"with_services\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/monitoring/hosts/{{acknowledged_host_id}}/acknowledgements",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"monitoring",
												"hosts",
												"{{acknowledged_host_id}}",
												"acknowledgements"
											]
										}
									},
									"response": []
								},
								{
									"name": "List all acknowledgements",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"const responseJson = pm.response.json();\r",
													"\r",
													"var i = 0;\r",
													"while (i < responseJson.result.length) {\r",
													"    if (responseJson.result[i].host_id == pm.collectionVariables.get(\"acknowledged_host_id\")) {\r",
													"            if (pm.test(\"Features of the set acknowledgement have been successfully implemented.\", function() {\r",
													"                pm.expect(pm.collectionVariables.get(\"acknowledgement_comment\")).to.eql(responseJson.result[i].comment.replace(/[\\'\"]+/g, ''));\r",
													"            })) \r",
													"        {\r",
													"            pm.collectionVariables.set(\"acknowledgement_id\", responseJson.result[i].id);\r",
													"            pm.collectionVariables.unset(\"acknowledgement_comment\");\r",
													"        }\r",
													"        break;\r",
													"        }\r",
													"    i++;\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/monitoring/acknowledgements?limit=20",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"monitoring",
												"acknowledgements"
											],
											"query": [
												{
													"key": "search",
													"value": "cillum quis commodo",
													"description": "Retrieve only data matching the defined search value.\nSimple search can be done like the following example: ``` search={\"host.name\":\"Central\"} ```\nComplex search can be done with aggregators and operators.\nAvailable search aggregators are:\n  * `$or`\n  * `$and`\n\nAvailable search operators are:\n  * `$eq` → equal\n  * `$neq` → not equal\n  * `$lt` → less than\n  * `$le` → less or equal than\n  * `$gt` → greater than\n  * `$ge` → greater or equal than\n  * `$lk` → like\n  * `$nk` → not like\n  * `$in` → in\n  * `$ni` → not in\n\nExamples without nested aggregators:\n  ```\n  search={\n    \"$or\":[\n      {\"host.name\":{\"$eq\":\"name_1\"}},\n      {\"host.name\":{\"$eq\":\"name_2\"}}\n    ]\n  }\n  ```\n  ```\n  search={\n    \"$and\":[\n      {\"host.address\":{\"$rg\":\"^10\\.0\\.0\\.\\d+$\"}},\n      {\"host.name\":{\"$lk\":\"fr%\"}}\n    ]\n  }\n  ```\n\nExample with nested aggregators:\n  ```\n  search={\n    \"$or\":[\n      {\n        \"$and\":[\n          {\"host.address\":{\"$rg\":\"^10\\.0\\.0\\.\\d+$\"}},\n          {\"host.name\":{\"$lk\":\"fr%\"}}\n        ]\n      },\n      {\n        \"$and\":[\n          {\"host.address\":{\"$rg\":\"^192\\.168\\.0\\.\\d+$\"}},\n          {\"host.name\":{\"$lk\":\"us%\"}}\n        ]\n      }\n    ]\n  }\n  ```\n",
													"disabled": true
												},
												{
													"key": "limit",
													"value": "20",
													"description": "Number of items per pages"
												},
												{
													"key": "page",
													"value": "4",
													"description": "Number of the requested page",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"response": [
										{
											"name": "OK",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "X-AUTH-TOKEN",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/monitoring/acknowledgements?search=cillum quis commodo&limit=20&page=4",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"monitoring",
														"acknowledgements"
													],
													"query": [
														{
															"key": "search",
															"value": "cillum quis commodo"
														},
														{
															"key": "limit",
															"value": "20"
														},
														{
															"key": "page",
															"value": "4"
														}
													],
													"variable": [
														{
															"key": "protocol",
															"value": "{{protocol}}",
															"description": "HTTP schema (This can only be one of http,https)"
														},
														{
															"key": "server",
															"value": "{{server}}",
															"description": "IP address or hostname of Centreon server"
														},
														{
															"key": "port",
															"value": "{{port}}",
															"description": "Port used by HTTP server"
														},
														{
															"key": "version",
															"value": "{{version}}",
															"description": "Version of the API"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"result\": [\n    {\n      \"id\": 34,\n      \"author_id\": 3,\n      \"author_name\": \"admin\",\n      \"comment\": \"Acknowledged by admin\",\n      \"deletion_time\": \"2018-11-11T18:30:11.478Z\",\n      \"entry_time\": \"1972-10-24T21:08:14.231Z\",\n      \"host_id\": 12,\n      \"poller_id\": 1,\n      \"is_notify_contacts\": false,\n      \"is_persistent_comment\": true,\n      \"is_sticky\": true,\n      \"state\": 1,\n      \"service_id\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    {\n      \"id\": 34,\n      \"author_id\": 3,\n      \"author_name\": \"admin\",\n      \"comment\": \"Acknowledged by admin\",\n      \"deletion_time\": \"1980-07-14T18:43:06.037Z\",\n      \"entry_time\": \"2019-06-04T15:34:06.223Z\",\n      \"host_id\": 12,\n      \"poller_id\": 1,\n      \"is_notify_contacts\": false,\n      \"is_persistent_comment\": true,\n      \"is_sticky\": true,\n      \"state\": 1,\n      \"service_id\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    }\n  ],\n  \"meta\": {\n    \"page\": 1,\n    \"limit\": 10,\n    \"search\": {},\n    \"sort_by\": {},\n    \"total\": 1\n  }\n}"
										},
										{
											"name": "Forbidden",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "X-AUTH-TOKEN",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/monitoring/acknowledgements?search=cillum quis commodo&limit=20&page=4",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"monitoring",
														"acknowledgements"
													],
													"query": [
														{
															"key": "search",
															"value": "cillum quis commodo"
														},
														{
															"key": "limit",
															"value": "20"
														},
														{
															"key": "page",
															"value": "4"
														}
													],
													"variable": [
														{
															"key": "protocol",
															"value": "{{protocol}}",
															"description": "HTTP schema (This can only be one of http,https)"
														},
														{
															"key": "server",
															"value": "{{server}}",
															"description": "IP address or hostname of Centreon server"
														},
														{
															"key": "port",
															"value": "{{port}}",
															"description": "Port used by HTTP server"
														},
														{
															"key": "version",
															"value": "{{version}}",
															"description": "Version of the API"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"code\": 403,\n  \"message\": \"You are not authorized to access this resource\"\n}"
										},
										{
											"name": "Internal Server Error",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "X-AUTH-TOKEN",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/monitoring/acknowledgements?search=cillum quis commodo&limit=20&page=4",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"monitoring",
														"acknowledgements"
													],
													"query": [
														{
															"key": "search",
															"value": "cillum quis commodo"
														},
														{
															"key": "limit",
															"value": "20"
														},
														{
															"key": "page",
															"value": "4"
														}
													],
													"variable": [
														{
															"key": "protocol",
															"value": "{{protocol}}",
															"description": "HTTP schema (This can only be one of http,https)"
														},
														{
															"key": "server",
															"value": "{{server}}",
															"description": "IP address or hostname of Centreon server"
														},
														{
															"key": "port",
															"value": "{{port}}",
															"description": "Port used by HTTP server"
														},
														{
															"key": "version",
															"value": "{{version}}",
															"description": "Version of the API"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"code\": 500,\n  \"message\": \"Internal Server Error\"\n}"
										}
									]
								},
								{
									"name": "Disacknowledge host",
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/monitoring/hosts/{{acknowledged_host_id}}/acknowledgements",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"monitoring",
												"hosts",
												"{{acknowledged_host_id}}",
												"acknowledgements"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Edge Cases",
							"item": []
						}
					]
				}
			]
		},
		{
			"name": "80 - Comment management",
			"item": [
				{
					"name": "Add a command on a resource",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.sendRequest(\"https://cdnjs.cloudflare.com/ajax/libs/dayjs/1.11.6/dayjs.min.js\", (err, res) => {\r",
									"    dayjs_code = res.text();\r",
									"    eval(dayjs_code);\r",
									"    console.log(dayjs_code);\r",
									"    new Function(dayjs_code)();\r",
									"    pm.collectionVariables.set(\"comment_date\", dayjs().format(\"YYYY-MM-DDTHH:mm:ssZ\"));\r",
									"    pm.collectionVariables.set(\"comment_contents\", \"This command has been set using the API v2 dedicated endpoint.\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Comment has been set.\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"resources\": [\r\n    {\r\n    \"type\": \"host\",\r\n    \"id\": {{child_host_id}},\r\n    \"parent\": {\r\n        \"id\": {{parent_host_id}}\r\n        },\r\n    \"date\": \"{{comment_date}}\",\r\n    \"comment\": \"{{comment_contents}}\"\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/monitoring/resources/comments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"monitoring",
								"resources",
								"comments"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "90 - ACL management",
			"item": [
				{
					"name": "Critical Path",
					"item": [
						{
							"name": "Login on admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Login successful\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Account displayed in response corresponds to credentials\", function (){\r",
											"    pm.expect(responseJson.contact.alias).to.eql(pm.collectionVariables.get('api_login'));\r",
											"});\r",
											"\r",
											"pm.collectionVariables.set(\"token\", responseJson.security.token);\r",
											"pm.collectionVariables.set(\"user\", responseJson.contact.alias);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"security\": {\n    \"credentials\": {\n      \"login\": \"{{api_login}}\",\n      \"password\": \"{{api_password}}\"\n    }\n  }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								},
								"description": "Entry point to retrieve an authentication token."
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"security\": {\n    \"credentials\": {\n      \"login\": \"admin\",\n      \"password\": \"centreon\"\n    }\n  }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"login"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"contact\": {\n    \"id\": 3,\n    \"name\": \"Admin\",\n    \"alias\": \"admin\",\n    \"email\": \"01A@CrLEnzWrYdgVBaUzldbG.wutx\",\n    \"is_admin\": true\n  },\n  \"security\": {\n    \"token\": \"9ed937d3911d212eae59300ac6977352\"\n  }\n}"
								},
								{
									"name": "Indicates that the server cannot or will not process the request due to something that is perceived to be\na client error (e.g., malformed request syntax, invalid request message framing)\n",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"security\": {\n    \"credentials\": {\n      \"login\": \"admin\",\n      \"password\": \"centreon\"\n    }\n  }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"login"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 400,\n  \"message\": \"Property 'name' not found\"\n}"
								},
								{
									"name": "Unauthorized",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"security\": {\n    \"credentials\": {\n      \"login\": \"admin\",\n      \"password\": \"centreon\"\n    }\n  }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"login"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 401,\n  \"message\": \"exercitation sit\"\n}"
								},
								{
									"name": "Internal Server Error",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"security\": {\n    \"credentials\": {\n      \"login\": \"admin\",\n      \"password\": \"centreon\"\n    }\n  }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"login"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 500,\n  \"message\": \"Internal Server Error\"\n}"
								}
							]
						},
						{
							"name": "List ACL groups",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();",
											"",
											"pm.test(\"Existing ACL groups have been listed\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"try {",
											"    var i = 0;",
											"    while (i < responseJson.result.length) {",
											"        if (responseJson.result[i].name == \"ALL\") {",
											"            pm.test(\"Default 'ALL' ACL group exists and is active\", function () {",
											"                pm.expect(responseJson.result[i].name).to.eql(\"ALL\");",
											"                pm.expect(responseJson.result[i].alias).to.eql(\"ALL\");",
											"                pm.expect(responseJson.result[i].activate).to.eql(\"1\");",
											"            });",
											"            break;",
											"        }",
											"        i++;",
											"    }",
											"    if (i == responseJson.result.length) {",
											"        pm.test(\"Default 'ALL' ACL group exists and is active\", function() {",
											"            pm.expect(true).to.eql(false);",
											"        });",
											"    }",
											"} catch (e) { }",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"show\",\n  \"object\": \"aclgroup\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Reload",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"reload\",\n  \"object\": \"acl\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Add ACL group",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"acl_group_name\", \"ACL-TEST\");\r",
											"pm.collectionVariables.set(\"acl_group_alias\", \"ACL-TEST-ALIAS\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"A new ACL group has been created\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "centreon-auth-token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"action\": \"add\",\r\n  \"object\": \"ACLGROUP\",\r\n  \"values\": \"{{acl_group_name}};{{acl_group_alias}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "List ACL groups after new group creation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();",
											"",
											"pm.test(\"Existing ACL groups have been listed\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"try {",
											"    var i = 0;",
											"    while (i < responseJson.result.length) {",
											"        if (responseJson.result[i].name == pm.collectionVariables.get(\"acl_group_name\")) {",
											"            pm.test(\"New '\" + pm.collectionVariables.get(\"acl_group_name\") + \"' ACL group exists and is active\", function () {",
											"                pm.expect(responseJson.result[i].name).to.eql(pm.collectionVariables.get(\"acl_group_name\"));",
											"                pm.expect(responseJson.result[i].alias).to.eql(pm.collectionVariables.get(\"acl_group_alias\"));",
											"                pm.expect(responseJson.result[i].activate).to.eql(\"1\");",
											"            });",
											"            break;",
											"        }",
											"        i++;",
											"    }",
											"    if (i == responseJson.result.length) {",
											"        pm.test(\"Default 'ALL' ACL group exists and is active\", function() {",
											"            pm.expect(true).to.eql(false);",
											"        });",
											"    }",
											"} catch (e) { }",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"show\",\n  \"object\": \"aclgroup\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Add test user to ACL group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"addcontact\",\n  \"object\": \"aclgroup\",\n  \"values\": \"{{acl_group_name}};{{testuser_login}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Add resource ACL",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"ACL Resource has been created.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"resource_acl_name\", \"ACL-TEST-RESOURCE\");\r",
											"pm.collectionVariables.set(\"resource_acl_alias\", \"ACL-TEST-RESOURCE-ALIAS\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"add\",\n  \"object\": \"aclresource\",\n  \"values\": \"{{resource_acl_name}};{{resource_acl_alias}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "List ACL resources after new group creation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();",
											"",
											"pm.test(\"Existing ACL groups have been listed\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"try {",
											"    for (var i = 0; i < responseJson.result.length; i++) {",
											"        if (responseJson.result[i].name == pm.collectionVariables.get(\"resource_acl_name\")) {",
											"            pm.test(\"New '\" + pm.collectionVariables.get(\"resource_acl_name\") + \"' ACL group exists and is active\", function () {",
											"                pm.expect(responseJson.result[i].name).to.eql(pm.collectionVariables.get(\"resource_acl_name\"));",
											"                pm.expect(responseJson.result[i].alias).to.eql(pm.collectionVariables.get(\"resource_acl_alias\"));",
											"                pm.expect(responseJson.result[i].activate).to.eql(\"1\");",
											"            });",
											"            break;",
											"        }",
											"    }",
											"    if (i == responseJson.result.length) {",
											"        pm.test(\"Default 'ALL' ACL group exists and is active\", function() {",
											"            pm.expect(true).to.eql(false);",
											"        });",
											"    }",
											"} catch (e) { }",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"show\",\n  \"object\": \"ACLRESOURCE\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Grant resources to new ACL Resource",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"New resource \" + pm.collectionVariables.get(\"current_acl_host\") + \" has been granted to ACL group.\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const list_of_acl_hosts = pm.collectionVariables.get(\"list_of_acl_hosts\");",
											"",
											"if (list_of_acl_hosts && list_of_acl_hosts.length > 0) {",
											"    postman.setNextRequest(\"Grant resources to new ACL Resource\");",
											"} else {",
											"    pm.collectionVariables.unset(\"list_of_acl_hosts\");",
											"    pm.collectionVariables.unset(\"current_acl_host\");",
											"",
											"    postman.setNextRequest(\"Add ACL Resource to ACL Group\");",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let list_of_acl_hosts = pm.collectionVariables.get(\"list_of_acl_hosts\");\r",
											"\r",
											"if (!list_of_acl_hosts || list_of_acl_hosts.length == 0) {\r",
											"    list_of_acl_hosts = [pm.collectionVariables.get(\"host_acl_downtimes_name\"), pm.collectionVariables.get(\"acknowledged_host_name\")];\r",
											"}\r",
											"\r",
											"let current_acl_host = list_of_acl_hosts.shift();\r",
											"console.log(current_acl_host);\r",
											"pm.collectionVariables.set(\"current_acl_host\", current_acl_host);\r",
											"pm.collectionVariables.set(\"list_of_acl_hosts\", list_of_acl_hosts);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"grant_host\",\n  \"object\": \"ACLRESOURCE\",\n  \"values\": \"{{resource_acl_name}};{{current_acl_host}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Add ACL Resource to ACL Group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"ACL Resource has been added to ACL Group.\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"addresource\",\n  \"object\": \"aclgroup\",\n  \"values\": \"{{acl_group_name}};{{resource_acl_name}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Add menu ACL",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"ACL Menu has been created.\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"menu_acl_name\", \"ACL-TEST-MENU\");\r",
											"pm.collectionVariables.set(\"menu_acl_alias\", \"ACL-TEST-MENU-ALIAS\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"add\",\n  \"object\": \"aclmenu\",\n  \"values\": \"{{menu_acl_name}};{{menu_acl_alias}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "List ACL menus after new group creation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();",
											"",
											"pm.test(\"Existing ACL menus have been listed\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"try {",
											"    for (var i = 0; i < responseJson.result.length; i++) {",
											"        if (responseJson.result[i].name == pm.collectionVariables.get(\"menu_acl_name\")) {",
											"            pm.test(\"New '\" + pm.collectionVariables.get(\"menu_acl_name\") + \"' ACL group exists and is active\", function () {",
											"                pm.expect(responseJson.result[i].name).to.eql(pm.collectionVariables.get(\"menu_acl_name\"));",
											"                pm.expect(responseJson.result[i].alias).to.eql(pm.collectionVariables.get(\"menu_acl_alias\"));",
											"                pm.expect(responseJson.result[i].activate).to.eql(\"1\");",
											"            });",
											"            break;",
											"        }",
											"    }",
											"    if (i == responseJson.result.length) {",
											"        pm.test(\"Default 'ALL' ACL group exists and is active\", function() {",
											"            pm.expect(true).to.eql(false);",
											"        });",
											"    }",
											"} catch (e) { }",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"show\",\n  \"object\": \"ACLMENU\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Grant menus to new ACL Menus",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let menus = pm.collectionVariables.get(\"list_of_menus\");\r",
											"let submenus = pm.collectionVariables.get(\"list_of_submenus\");\r",
											"\r",
											"if (!menus || menus.length == 0) {\r",
											"    menus = [\"Monitoring\", \"Configuration\"];\r",
											"    submenus = [\"Resources Status\", \"Hosts\"];\r",
											"}\r",
											"\r",
											"let current_menu = menus.shift();\r",
											"pm.collectionVariables.set(\"current_menu\", current_menu);\r",
											"pm.collectionVariables.set(\"list_of_menus\", menus);\r",
											"let current_submenu = submenus.shift();\r",
											"pm.collectionVariables.set(\"current_submenu\", current_submenu);\r",
											"pm.collectionVariables.set(\"list_of_submenus\", submenus);\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"New menu has been granted to ACL group.\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const menus = pm.collectionVariables.get(\"list_of_menus\");",
											"",
											"if (menus && menus.length > 0) {",
											"    postman.setNextRequest(\"Grant menus to new ACL Menus\");",
											"} else {",
											"    pm.collectionVariables.unset(\"current_menu\");",
											"    pm.collectionVariables.unset(\"current_submenu\");",
											"    pm.collectionVariables.unset(\"list_of_menus\");",
											"    pm.collectionVariables.unset(\"list_of_submenus\");",
											"    postman.setNextRequest(\"Add ACL Menu to ACL Group\");",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"grantrw\",\n  \"object\": \"ACLMENU\",\n  \"values\": \"{{menu_acl_name}};1;{{current_menu}};{{current_submenu}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Add ACL Menu to ACL Group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"ACL Menu has been added to ACL Group.\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"addmenu\",\n  \"object\": \"aclgroup\",\n  \"values\": \"{{acl_group_name}};{{menu_acl_name}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Add actions ACL",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"ACL Action has been created.\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"action_acl_name\", \"ACL-TEST-ACTION\");\r",
											"pm.collectionVariables.set(\"action_acl_alias\", \"ACL-TEST-ACTION-ALIAS\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"add\",\n  \"object\": \"ACLACTION\",\n  \"values\": \"{{action_acl_name}};{{action_acl_alias}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "List ACL actions after new group creation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();",
											"",
											"pm.test(\"Existing ACL menus have been listed\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"try {",
											"    for (var i = 0; i < responseJson.result.length; i++) {",
											"        if (responseJson.result[i].name == pm.collectionVariables.get(\"action_acl_name\")) {",
											"            pm.test(\"New '\" + pm.collectionVariables.get(\"action_acl_name\") + \"' ACL group exists and is active\", function () {",
											"                pm.expect(responseJson.result[i].name).to.eql(pm.collectionVariables.get(\"action_acl_name\"));",
											"                pm.expect(responseJson.result[i].description).to.eql(pm.collectionVariables.get(\"action_acl_alias\"));",
											"                pm.expect(responseJson.result[i].activate).to.eql(\"1\");",
											"            });",
											"            break;",
											"        }",
											"    }",
											"    if (i == responseJson.result.length) {",
											"        pm.test(\"Default 'ALL' ACL group exists and is active\", function() {",
											"            pm.expect(true).to.eql(false);",
											"        });",
											"    }",
											"} catch (e) { }",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"show\",\n  \"object\": \"ACLACTION\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Grant actions to new ACL Actions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"New actions have been granted to ACL group.\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"grant\",\n  \"object\": \"ACLACTION\",\n  \"values\": \"{{action_acl_name}};top_counter|host_comment|host_schedule_downtime|host_acknowledgement|host_disacknowledgement\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Add ACL Actions to ACL Group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"ACL Action has been added to ACL Group.\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"addaction\",\n  \"object\": \"aclgroup\",\n  \"values\": \"{{acl_group_name}};{{action_acl_name}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Login on non-admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Connection successful\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Account displayed in response corresponds to credentials\", function (){\r",
											"    pm.expect(responseJson.contact.alias).to.eql(pm.collectionVariables.get('testuser_login'));\r",
											"});\r",
											"\r",
											"pm.collectionVariables.set(\"token\", responseJson.security.token);\r",
											"pm.collectionVariables.set(\"user\", responseJson.contact.alias);\r",
											"pm.collectionVariables.set(\"current_user_id\", responseJson.contact.id);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"security\": {\n    \"credentials\": {\n      \"login\": \"{{testuser_login}}\",\n      \"password\": \"{{testuser_password}}\"\n    }\n  }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								},
								"description": "Entry point to retrieve an authentication token."
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"security\": {\n    \"credentials\": {\n      \"login\": \"admin\",\n      \"password\": \"centreon\"\n    }\n  }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"login"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"contact\": {\n    \"id\": 3,\n    \"name\": \"Admin\",\n    \"alias\": \"admin\",\n    \"email\": \"01A@CrLEnzWrYdgVBaUzldbG.wutx\",\n    \"is_admin\": true\n  },\n  \"security\": {\n    \"token\": \"9ed937d3911d212eae59300ac6977352\"\n  }\n}"
								},
								{
									"name": "Indicates that the server cannot or will not process the request due to something that is perceived to be\na client error (e.g., malformed request syntax, invalid request message framing)\n",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"security\": {\n    \"credentials\": {\n      \"login\": \"admin\",\n      \"password\": \"centreon\"\n    }\n  }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"login"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 400,\n  \"message\": \"Property 'name' not found\"\n}"
								},
								{
									"name": "Unauthorized",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"security\": {\n    \"credentials\": {\n      \"login\": \"admin\",\n      \"password\": \"centreon\"\n    }\n  }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"login"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 401,\n  \"message\": \"exercitation sit\"\n}"
								},
								{
									"name": "Internal Server Error",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"security\": {\n    \"credentials\": {\n      \"login\": \"admin\",\n      \"password\": \"centreon\"\n    }\n  }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"login"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 500,\n  \"message\": \"Internal Server Error\"\n}"
								}
							]
						},
						{
							"name": "Check actions on non-admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Actions on non-admin user successfully fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"responseJson = pm.response.json();\r",
											"const valuesHosts = Object.values(responseJson.host);\r",
											"const valuesServices = Object.values(responseJson.service);\r",
											"const valuesMetaservices = Object.values(responseJson.metaservice);\r",
											"\r",
											"pm.test(\"User has access to all the host-related actions that were previously configured.\", function() {\r",
											"    pm.expect(responseJson.host.acknowledgement).to.eql(true);\r",
											"    pm.expect(responseJson.host.disacknowledgement).to.eql(true);\r",
											"    pm.expect(responseJson.host.downtime).to.eql(true);\r",
											"    pm.expect(responseJson.host.comment).to.eql(true);\r",
											"})\r",
											"\r",
											"pm.test(\"User has not access to all the other actions.\", function() {\r",
											"    pm.expect(responseJson.host.check).to.eql(false);\r",
											"    pm.expect(responseJson.host.submit_status).to.eql(false);\r",
											"    pm.expect(valuesServices).to.not.include(true);\r",
											"    pm.expect(valuesMetaservices).to.not.include(true);    \r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "centreon-auth-token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users/acl/actions",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"acl",
										"actions"
									]
								}
							},
							"response": []
						},
						{
							"name": "List the two single hosts the user has access to",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"A list of hosts has been fetched.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"\r",
											"pm.test(\"User has access to only two hosts.\", function() {\r",
											"    pm.expect(responseJson.meta.total).to.eql(2);\r",
											"});\r",
											"\r",
											"pm.test(\"These hosts are precisely the ones it is supposed to have access to.\", function() {\r",
											"    pm.expect(responseJson.result[0].id).to.eql(pm.collectionVariables.get(\"host_acl_downtimes_id\"));\r",
											"    pm.expect(responseJson.result[0].address_ip).to.eql(pm.collectionVariables.get(\"host_acl_downtimes_address_ip\"));\r",
											"    pm.expect(responseJson.result[0].name).to.eql(pm.collectionVariables.get(\"host_acl_downtimes_name\"));\r",
											"    pm.expect(responseJson.result[1].id).to.eql(pm.collectionVariables.get(\"host_acl_acknowledgements_id\"));\r",
											"    pm.expect(responseJson.result[1].address_ip).to.eql(pm.collectionVariables.get(\"host_acl_acknowledgements_address_ip\"));\r",
											"    pm.expect(responseJson.result[1].name).to.eql(pm.collectionVariables.get(\"host_acl_acknowledgements_name\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/monitoring/hosts",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"monitoring",
										"hosts"
									],
									"query": [
										{
											"key": "page",
											"value": "",
											"description": "Number of the requested page",
											"disabled": true
										},
										{
											"key": "search",
											"value": "",
											"description": "Retrieve only data matching the defined search value.\nSimple search can be done like the following example: ``` search={\"host.name\":\"Central\"} ```\nComplex search can be done with aggregators and operators.\nAvailable search aggregators are:\n  * `$or`\n  * `$and`\n\nAvailable search operators are:\n  * `$eq` → equal\n  * `$neq` → not equal\n  * `$lt` → less than\n  * `$le` → less or equal than\n  * `$gt` → greater than\n  * `$ge` → greater or equal than\n  * `$lk` → like\n  * `$nk` → not like\n  * `$in` → in\n  * `$ni` → not in\n\nExamples without nested aggregators:\n  ```\n  search={\n    \"$or\":[\n      {\"host.name\":{\"$eq\":\"name_1\"}},\n      {\"host.name\":{\"$eq\":\"name_2\"}}\n    ]\n  }\n  ```\n  ```\n  search={\n    \"$and\":[\n      {\"host.address\":{\"$rg\":\"^10\\.0\\.0\\.\\d+$\"}},\n      {\"host.name\":{\"$lk\":\"fr%\"}}\n    ]\n  }\n  ```\n\nExample with nested aggregators:\n  ```\n  search={\n    \"$or\":[\n      {\n        \"$and\":[\n          {\"host.address\":{\"$rg\":\"^10\\.0\\.0\\.\\d+$\"}},\n          {\"host.name\":{\"$lk\":\"fr%\"}}\n        ]\n      },\n      {\n        \"$and\":[\n          {\"host.address\":{\"$rg\":\"^192\\.168\\.0\\.\\d+$\"}},\n          {\"host.name\":{\"$lk\":\"us%\"}}\n        ]\n      }\n    ]\n  }\n  ```\n",
											"disabled": true
										}
									]
								},
								"description": "List all the hosts in real-time monitoring.\n\nThe available parameters to **search** / **sort_by** are:\n\n* host.id\n* host.name\n* host.alias\n* host.address\n* host.state\n* poller.id\n* service.display_name\n* host_group.id\n* host.is_acknowledged\n* host.downtime\n* host.criticality\n"
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/monitoring/hosts?show_service=true&search=cillum quis commodo&limit=20&page=4",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"monitoring",
												"hosts"
											],
											"query": [
												{
													"key": "show_service",
													"value": "true"
												},
												{
													"key": "search",
													"value": "cillum quis commodo"
												},
												{
													"key": "limit",
													"value": "20"
												},
												{
													"key": "page",
													"value": "4"
												}
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"result\": [\n    {\n      \"id\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"alias\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"display_name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"state\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"services\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"poller_id\": 1,\n      \"acknowledged\": false,\n      \"address_ip\": \"127.0.0.1\",\n      \"check_attempt\": 1,\n      \"checked\": true,\n      \"execution_time\": 0.070906,\n      \"icon_image\": \"ppm/operatingsystems-linux-snmp-linux-128.png\",\n      \"icon_image_alt\": \"\",\n      \"last_check\": \"1980-02-02T05:43:34.625Z\",\n      \"last_hard_state_change\": \"2022-08-05T10:43:02.077Z\",\n      \"last_state_change\": \"1948-11-25T13:12:41.089Z\",\n      \"last_time_down\": \"1945-06-23T19:43:00.867Z\",\n      \"last_time_unreachable\": \"2022-07-05T17:47:46.217Z\",\n      \"last_time_up\": \"1952-11-26T09:19:35.799Z\",\n      \"last_update\": \"2002-02-11T22:28:18.621Z\",\n      \"max_check_attempts\": 3,\n      \"output\": \"OK - 127.0.0.1 rta 0.100ms lost 0%\\n\",\n      \"passive_checks\": false,\n      \"state_type\": 0,\n      \"timezone\": \":Europe/Paris\",\n      \"scheduled_downtime_depth\": 0,\n      \"criticality\": 10\n    },\n    {\n      \"id\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"alias\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"display_name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"state\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"services\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"poller_id\": 1,\n      \"acknowledged\": false,\n      \"address_ip\": \"127.0.0.1\",\n      \"check_attempt\": 1,\n      \"checked\": true,\n      \"execution_time\": 0.070906,\n      \"icon_image\": \"ppm/operatingsystems-linux-snmp-linux-128.png\",\n      \"icon_image_alt\": \"\",\n      \"last_check\": \"2014-11-11T02:07:25.915Z\",\n      \"last_hard_state_change\": \"1966-04-15T04:04:02.849Z\",\n      \"last_state_change\": \"1962-12-26T10:26:12.593Z\",\n      \"last_time_down\": \"2004-09-19T21:36:42.944Z\",\n      \"last_time_unreachable\": \"1951-05-24T08:52:34.057Z\",\n      \"last_time_up\": \"1990-04-26T07:43:26.231Z\",\n      \"last_update\": \"1971-01-30T15:22:21.380Z\",\n      \"max_check_attempts\": 3,\n      \"output\": \"OK - 127.0.0.1 rta 0.100ms lost 0%\\n\",\n      \"passive_checks\": false,\n      \"state_type\": 0,\n      \"timezone\": \":Europe/Paris\",\n      \"scheduled_downtime_depth\": 0,\n      \"criticality\": 10\n    }\n  ],\n  \"meta\": {\n    \"page\": 1,\n    \"limit\": 10,\n    \"search\": {},\n    \"sort_by\": {},\n    \"total\": 1\n  }\n}"
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/monitoring/hosts?show_service=true&search=cillum quis commodo&limit=20&page=4",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"monitoring",
												"hosts"
											],
											"query": [
												{
													"key": "show_service",
													"value": "true"
												},
												{
													"key": "search",
													"value": "cillum quis commodo"
												},
												{
													"key": "limit",
													"value": "20"
												},
												{
													"key": "page",
													"value": "4"
												}
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 403,\n  \"message\": \"You are not authorized to access this resource\"\n}"
								},
								{
									"name": "Internal Server Error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/monitoring/hosts?show_service=true&search=cillum quis commodo&limit=20&page=4",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"monitoring",
												"hosts"
											],
											"query": [
												{
													"key": "show_service",
													"value": "true"
												},
												{
													"key": "search",
													"value": "cillum quis commodo"
												},
												{
													"key": "limit",
													"value": "20"
												},
												{
													"key": "page",
													"value": "4"
												}
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 500,\n  \"message\": \"Internal Server Error\"\n}"
								}
							]
						},
						{
							"name": "Add downtime on selected host [v2]",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var moment = require('moment');",
											"datetime_start = moment().format(\"YYYY-MM-DDTHH:mm:ssZ\");",
											"pm.collectionVariables.set(\"start_time\", datetime_start);",
											"datetime_end = moment().add(5, 'minutes').format(\"YYYY-MM-DDTHH:mm:ssZ\");",
											"pm.collectionVariables.set(\"end_time\", datetime_end);",
											"",
											"pm.collectionVariables.set(\"downtime_comment\", \"Ceci est un commentaire.\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Downtime implemented.\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											"setTimeout(function(){}, [2000]);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"start_time\": \"{{start_time}}\",\n    \"end_time\": \"{{end_time}}\",\n    \"is_fixed\": true,\n    \"duration\": 300,\n    \"author_id\": {{current_user_id}},\n    \"comment\": \"{{downtime_comment}}\",\n    \"with_services\": true\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/monitoring/hosts/{{host_acl_downtimes_id}}/downtimes",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"monitoring",
										"hosts",
										"{{host_acl_downtimes_id}}",
										"downtimes"
									]
								}
							},
							"response": []
						},
						{
							"name": "Show active host downtimes",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"try {\r",
											"    var i = 0;\r",
											"    console.log(pm.collectionVariables.get(\"start_time\"));\r",
											"    while (i < responseJson.result.length) {\r",
											"        console.log(responseJson.result[i].start_time);\r",
											"        if (pm.collectionVariables.get(\"start_time\") == responseJson.result[i].start_time)\r",
											"        {\r",
											"            pm.test(\"Features of the set downtime have been successfully implemented.\", function() {\r",
											"                pm.expect(pm.collectionVariables.get(\"start_time\")).to.eql(responseJson.result[i].start_time);\r",
											"                pm.expect(pm.collectionVariables.get(\"end_time\")).to.eql(responseJson.result[i].end_time);\r",
											"                pm.expect(pm.collectionVariables.get(\"downtime_comment\")).to.eql(responseJson.result[i].comment.replace(/[\\'\"]+/g, ''));\r",
											"            });\r",
											"            pm.test(\"Downtime has been added by \" + pm.collectionVariables.get(\"testuser_login\"), function() {\r",
											"                pm.expect(pm.collectionVariables.get(\"testuser_login\")).to.eql(responseJson.result[i].author_name);\r",
											"            });\r",
											"            break;\r",
											"        }\r",
											"        i++;\r",
											"    }\r",
											"    if (i == responseJson.result.length) {\r",
											"        pm.test(\"Added realtime downtime was found\", function() {\r",
											"            pm.expect(true).to.eql(false);\r",
											"        });\r",
											"    }\r",
											"} \r",
											"catch (e) {}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/monitoring/hosts/{{host_acl_downtimes_id}}/downtimes",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"monitoring",
										"hosts",
										"{{host_acl_downtimes_id}}",
										"downtimes"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add an acknowledgement on host",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"acknowledgement_comment\", \"Acknowledged by \" + pm.collectionVariables.get(\"testuser_login\") + \".\");\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"comment\": \"{{acknowledgement_comment}}\",\r\n    \"is_notify_contacts\": false,\r\n    \"is_persistent_comment\": true,\r\n    \"is_sticky\": true,\r\n    \"with_services\": false\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/monitoring/hosts/{{host_acl_downtimes_id}}/acknowledgements",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"monitoring",
										"hosts",
										"{{host_acl_downtimes_id}}",
										"acknowledgements"
									]
								}
							},
							"response": []
						},
						{
							"name": "List all acknowledgements",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"\r",
											"for (var i = 0; i < responseJson.result.length; i++) {\r",
											"    if (responseJson.result[i].host_id == pm.collectionVariables.get(\"acknowledged_host_id\")) {\r",
											"        pm.test(\"Features of the set acknowledgement have been successfully implemented.\", function() {\r",
											"            pm.expect(pm.collectionVariables.get(\"acknowledgement_comment\")).to.eql(responseJson.result[i].comment.replace(/[\\'\"]+/g, ''));\r",
											"            pm.collectionVariables.set(\"acknowledgement_id\", responseJson.result[i].id);\r",
											"            pm.collectionVariables.unset(\"acknowledgement_comment\");\r",
											"        })\r",
											"        break;\r",
											"    }\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/monitoring/acknowledgements?limit=20",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"monitoring",
										"acknowledgements"
									],
									"query": [
										{
											"key": "search",
											"value": "cillum quis commodo",
											"description": "Retrieve only data matching the defined search value.\nSimple search can be done like the following example: ``` search={\"host.name\":\"Central\"} ```\nComplex search can be done with aggregators and operators.\nAvailable search aggregators are:\n  * `$or`\n  * `$and`\n\nAvailable search operators are:\n  * `$eq` → equal\n  * `$neq` → not equal\n  * `$lt` → less than\n  * `$le` → less or equal than\n  * `$gt` → greater than\n  * `$ge` → greater or equal than\n  * `$lk` → like\n  * `$nk` → not like\n  * `$in` → in\n  * `$ni` → not in\n\nExamples without nested aggregators:\n  ```\n  search={\n    \"$or\":[\n      {\"host.name\":{\"$eq\":\"name_1\"}},\n      {\"host.name\":{\"$eq\":\"name_2\"}}\n    ]\n  }\n  ```\n  ```\n  search={\n    \"$and\":[\n      {\"host.address\":{\"$rg\":\"^10\\.0\\.0\\.\\d+$\"}},\n      {\"host.name\":{\"$lk\":\"fr%\"}}\n    ]\n  }\n  ```\n\nExample with nested aggregators:\n  ```\n  search={\n    \"$or\":[\n      {\n        \"$and\":[\n          {\"host.address\":{\"$rg\":\"^10\\.0\\.0\\.\\d+$\"}},\n          {\"host.name\":{\"$lk\":\"fr%\"}}\n        ]\n      },\n      {\n        \"$and\":[\n          {\"host.address\":{\"$rg\":\"^192\\.168\\.0\\.\\d+$\"}},\n          {\"host.name\":{\"$lk\":\"us%\"}}\n        ]\n      }\n    ]\n  }\n  ```\n",
											"disabled": true
										},
										{
											"key": "limit",
											"value": "20",
											"description": "Number of items per pages"
										},
										{
											"key": "page",
											"value": "4",
											"description": "Number of the requested page",
											"disabled": true
										}
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								}
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/monitoring/acknowledgements?search=cillum quis commodo&limit=20&page=4",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"monitoring",
												"acknowledgements"
											],
											"query": [
												{
													"key": "search",
													"value": "cillum quis commodo"
												},
												{
													"key": "limit",
													"value": "20"
												},
												{
													"key": "page",
													"value": "4"
												}
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"result\": [\n    {\n      \"id\": 34,\n      \"author_id\": 3,\n      \"author_name\": \"admin\",\n      \"comment\": \"Acknowledged by admin\",\n      \"deletion_time\": \"2018-11-11T18:30:11.478Z\",\n      \"entry_time\": \"1972-10-24T21:08:14.231Z\",\n      \"host_id\": 12,\n      \"poller_id\": 1,\n      \"is_notify_contacts\": false,\n      \"is_persistent_comment\": true,\n      \"is_sticky\": true,\n      \"state\": 1,\n      \"service_id\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    {\n      \"id\": 34,\n      \"author_id\": 3,\n      \"author_name\": \"admin\",\n      \"comment\": \"Acknowledged by admin\",\n      \"deletion_time\": \"1980-07-14T18:43:06.037Z\",\n      \"entry_time\": \"2019-06-04T15:34:06.223Z\",\n      \"host_id\": 12,\n      \"poller_id\": 1,\n      \"is_notify_contacts\": false,\n      \"is_persistent_comment\": true,\n      \"is_sticky\": true,\n      \"state\": 1,\n      \"service_id\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    }\n  ],\n  \"meta\": {\n    \"page\": 1,\n    \"limit\": 10,\n    \"search\": {},\n    \"sort_by\": {},\n    \"total\": 1\n  }\n}"
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/monitoring/acknowledgements?search=cillum quis commodo&limit=20&page=4",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"monitoring",
												"acknowledgements"
											],
											"query": [
												{
													"key": "search",
													"value": "cillum quis commodo"
												},
												{
													"key": "limit",
													"value": "20"
												},
												{
													"key": "page",
													"value": "4"
												}
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 403,\n  \"message\": \"You are not authorized to access this resource\"\n}"
								},
								{
									"name": "Internal Server Error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/monitoring/acknowledgements?search=cillum quis commodo&limit=20&page=4",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"monitoring",
												"acknowledgements"
											],
											"query": [
												{
													"key": "search",
													"value": "cillum quis commodo"
												},
												{
													"key": "limit",
													"value": "20"
												},
												{
													"key": "page",
													"value": "4"
												}
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 500,\n  \"message\": \"Internal Server Error\"\n}"
								}
							]
						},
						{
							"name": "Disacknowledge host",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/monitoring/hosts/{{host_acl_acknowledgements_id}}/acknowledgements",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"monitoring",
										"hosts",
										"{{host_acl_acknowledgements_id}}",
										"acknowledgements"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Edge cases",
					"item": []
				}
			]
		},
		{
			"name": "[DEBUG] Variables Clean",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.collectionVariables.clear();\r",
							"pm.collectionVariables.set(\"protocol\",\"http\");\r",
							"pm.collectionVariables.set(\"server\",\"10.25.10.75\");\r",
							"pm.collectionVariables.set(\"port\",\"80\");\r",
							"pm.collectionVariables.set(\"version\", \"latest\");\r",
							"pm.collectionVariables.set(\"api_login\", \"admin\");\r",
							"pm.collectionVariables.set(\"api_password\", \"Centreon!2021\");\r",
							"pm.collectionVariables.set(\"baseUrl\", \"{{protocol}}://{{server}}:{{port}}/centreon/api/{{version}}\");\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/monitoring/hosts?limit=20",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"monitoring",
						"hosts"
					],
					"query": [
						{
							"key": "limit",
							"value": "20"
						}
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "apikey",
		"apikey": [
			{
				"key": "key",
				"value": "X-AUTH-TOKEN",
				"type": "string"
			},
			{
				"key": "in",
				"value": "header",
				"type": "string"
			},
			{
				"key": "value",
				"value": "{{token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "protocol",
			"value": "http",
			"type": "any"
		},
		{
			"key": "server",
			"value": "",
			"type": "any"
		},
		{
			"key": "port",
			"value": "80",
			"type": "any"
		},
		{
			"key": "version",
			"value": "latest",
			"type": "any"
		},
		{
			"key": "baseUrl",
			"value": "{{protocol}}://{{server}}:{{port}}/centreon/api/{{version}}",
			"type": "string"
		},
		{
			"key": "api_login",
			"value": "admin",
			"type": "string"
		},
		{
			"key": "api_password",
			"value": "Centreon!2021",
			"type": "string"
		}
	]
}