{
	"info": {
		"_postman_id": "03148344-675f-4d45-95bd-4ceea8efabd8",
		"name": "Centreon Web Rest API - Relevant test scripts",
		"description": "# New features\n+ Added real-time monitoring for hosts and services\n+ Added acknowledgement for hosts and services\n+ Added downtimes for hosts and services\n+ Added the list of monitoring server configurations\n+ Added the proxy configuration\n# Information\nAll dates are in **ISO 8601** format\n# Authentication\nThere are two modes of authentication:\n* By token: after identification with your login credentials\n* By cookie: by reusing a valid session ID\n\n\nContact Support:\n Name: Centreon",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "22770334"
	},
	"item": [
		{
			"name": "Authentication",
			"item": [
				{
					"name": "Critical Path",
					"item": [
						{
							"name": "Login",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Login successful\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Account displayed in response corresponds to credentials\", function (){\r",
											"    pm.expect(responseJson.contact.alias).to.eql(pm.collectionVariables.get('api_login'));\r",
											"});\r",
											"\r",
											"pm.collectionVariables.set(\"token\", responseJson.security.token);\r",
											"pm.collectionVariables.set(\"user\", responseJson.contact.alias);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"{{api_login}}\",\r\n      \"password\": \"{{api_password}}\"\r\n    }\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Edge cases",
					"item": [
						{
							"name": "Update user's password with incorrect password format",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Status code is 500\", function () {\r",
											"    pm.response.to.have.status(500);\r",
											"});\r",
											"\r",
											"pm.test(\"Displayed error message is the one that's expected\", function() {\r",
											"    pm.expect(responseJson.message).to.eql(\"[UserPassword::passwordValue] The value ({{currentPassword}}) doesn't match the regex '/[0-9]/'\");\r",
											"});\r",
											"\r",
											"const incorrect_passwords = pm.collectionVariables.get(\"incorrect_passwords_list\");\r",
											"\r",
											"if(incorrect_passwords && incorrect_passwords.length > 0) {\r",
											"    postman.setNextRequest(\"Update user's password with incorrect password format\");\r",
											"} else {\r",
											"    postman.setNextRequest(\"Update user's with correct password format\");\r",
											"    pm.collectionVariables.unset(\"current_password\");\r",
											"    pm.collectionVariables.unset(\"incorrect_passwords_list\");\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let incorrect_passwords = pm.collectionVariables.get(\"incorrect_passwords_list\");\r",
											"if (!incorrect_passwords || incorrect_passwords.length == 0){\r",
											"    incorrect_passwords = [\"Centreon2021\", \"centreon!2021\", \"2021010203\", \"\", \"CentreonTwoThousandTwentyOne\", \"centreon\"];\r",
											"}\r",
											"\r",
											"let current_password = incorrect_passwords.shift();\r",
											"pm.collectionVariables.set(\"current_password\", current_password);\r",
											"pm.collectionVariables.set(\"incorrect_passwords_list\", incorrect_passwords);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n \"old_password\": \"Centreon!2021\",\n  \"new_password\": \"{{currentPassword}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/authentication/users/:alias/password",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"authentication",
										"users",
										":alias",
										"password"
									],
									"variable": [
										{
											"key": "alias",
											"value": "{{user}}"
										}
									]
								}
							},
							"response": [
								{
									"name": "Password changed",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"old_password\": \"Centreon!2021\",\n  \"new_password\": \"Centreon!2022\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/authentication/users/:alias/password",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"authentication",
												"users",
												":alias",
												"password"
											],
											"variable": [
												{
													"key": "alias",
													"value": "{{user}}"
												}
											]
										}
									},
									"status": "No Content",
									"code": 204,
									"_postman_previewlanguage": null,
									"header": null,
									"cookie": [],
									"body": null
								}
							]
						},
						{
							"name": "Update user's with correct password format",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"old_password\": \"{{api_password}}\",\n  \"new_password\": \"Centreon!2022\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/authentication/users/:alias/password",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"authentication",
										"users",
										":alias",
										"password"
									],
									"variable": [
										{
											"key": "alias",
											"value": "{{user}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Attempt to revert back to old password directly",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Status code is 500\", function () {\r",
											"    pm.response.to.have.status(500);\r",
											"});\r",
											"\r",
											"pm.test(\"Displayed error message is the one that's expected\", function() {\r",
											"    pm.expect(responseJson.message).to.eql(\"Old password usage is disable\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"old_password\": \"Centreon!2024\",\n  \"new_password\": \"{{api_password}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/authentication/users/:alias/password",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"authentication",
										"users",
										":alias",
										"password"
									],
									"variable": [
										{
											"key": "alias",
											"value": "{{user}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Revert to old password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const buffer_passwords = pm.collectionVariables.get(\"buffer_passwords\");\r",
											"\r",
											"if(buffer_passwords && buffer_passwords.length > 0) {\r",
											"    postman.setNextRequest(\"Revert to old password\");\r",
											"} else {\r",
											"    pm.collectionVariables.unset(\"current_password\");\r",
											"    pm.collectionVariables.unset(\"buffer_passwords\");\r",
											"    pm.collectionVariables.unset(\"old_password\");\r",
											"    postman.setNextRequest(\"Logout\");\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let buffer_passwords = pm.collectionVariables.get(\"buffer_passwords\");\r",
											"if (!buffer_passwords || buffer_passwords.length == 0){\r",
											"    buffer_passwords = [\"Centreon!2022\", \"Centreon!2023\", \"Centreon!2024\", pm.collectionVariables.get(\"api_password\")];\r",
											"}\r",
											"let old_password = pm.collectionVariables.get(\"current_password\");\r",
											"if(!old_password) {old_password = buffer_passwords.shift();}\r",
											"current_password = buffer_passwords.shift();\r",
											"pm.collectionVariables.set(\"old_password\", old_password);\r",
											"pm.collectionVariables.set(\"current_password\", current_password);\r",
											"pm.collectionVariables.set(\"buffer_passwords\", buffer_passwords);\r",
											"// console.log(current_password);\r",
											"console.log(buffer_passwords);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"old_password\": \"{{old_password}}\",\n  \"new_password\": \"{{current_password}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/authentication/users/:alias/password",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"authentication",
										"users",
										":alias",
										"password"
									],
									"variable": [
										{
											"key": "alias",
											"value": "{{user}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Logout",
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "X-AUTH-TOKEN",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"logout"
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								},
								"description": "Entry point to delete an existing authentication token."
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logout"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Successful logout\"\n}"
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logout"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 403,\n  \"message\": \"You are not authorized to access this resource\"\n}"
								},
								{
									"name": "Internal Server Error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logout"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 500,\n  \"message\": \"Internal Server Error\"\n}"
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "Time period management",
			"item": [
				{
					"name": "Critical Path",
					"item": [
						{
							"name": "Login",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Login successful\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Account displayed in response corresponds to credentials\", function (){\r",
											"    pm.expect(responseJson.contact.alias).to.eql(pm.collectionVariables.get('api_login'));\r",
											"});\r",
											"\r",
											"pm.collectionVariables.set(\"token\", responseJson.security.token);\r",
											"pm.collectionVariables.set(\"user\", responseJson.contact.alias);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"security\": {\n    \"credentials\": {\n      \"login\": \"{{api_login}}\",\n      \"password\": \"{{api_password}}\"\n    }\n  }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								},
								"description": "Entry point to retrieve an authentication token."
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"security\": {\n    \"credentials\": {\n      \"login\": \"admin\",\n      \"password\": \"centreon\"\n    }\n  }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"login"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"contact\": {\n    \"id\": 3,\n    \"name\": \"Admin\",\n    \"alias\": \"admin\",\n    \"email\": \"01A@CrLEnzWrYdgVBaUzldbG.wutx\",\n    \"is_admin\": true\n  },\n  \"security\": {\n    \"token\": \"9ed937d3911d212eae59300ac6977352\"\n  }\n}"
								},
								{
									"name": "Indicates that the server cannot or will not process the request due to something that is perceived to be\na client error (e.g., malformed request syntax, invalid request message framing)\n",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"security\": {\n    \"credentials\": {\n      \"login\": \"admin\",\n      \"password\": \"centreon\"\n    }\n  }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"login"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 400,\n  \"message\": \"Property 'name' not found\"\n}"
								},
								{
									"name": "Unauthorized",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"security\": {\n    \"credentials\": {\n      \"login\": \"admin\",\n      \"password\": \"centreon\"\n    }\n  }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"login"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 401,\n  \"message\": \"exercitation sit\"\n}"
								},
								{
									"name": "Internal Server Error",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"security\": {\n    \"credentials\": {\n      \"login\": \"admin\",\n      \"password\": \"centreon\"\n    }\n  }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"login"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 500,\n  \"message\": \"Internal Server Error\"\n}"
								}
							]
						},
						{
							"name": "Add time period",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"time_period_name\", \"timeperiod_testing\");\r",
											"pm.collectionVariables.set(\"time_period_alias\", \"Time period used for tests\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"add\",\n  \"object\": \"tp\",\n  \"values\": \"{{time_period_name}};{{time_period_alias}};\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Show available time periods after time period creation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"\r",
											"try {\r",
											"    var i = 0;\r",
											"        while (i < responseJson.result.length) {\r",
											"        if (pm.collectionVariables.get(\"time_period_name\") == responseJson.result[i].name)\r",
											"        {\r",
											"            pm.test(\"Body contains added test period's name\", function() {\r",
											"                pm.expect(pm.collectionVariables.get(\"time_period_name\")).to.eql(responseJson.result[i].name);\r",
											"            });\r",
											"            pm.test(\"Body contains added test period's alias\", function() {\r",
											"                pm.expect(pm.collectionVariables.get(\"time_period_alias\")).to.eql(responseJson.result[i].alias);\r",
											"            });\r",
											"            break;\r",
											"        }\r",
											"        i++;\r",
											"    }\r",
											"    if (i == responseJson.result.length)\r",
											"        pm.test(\"Added time period was found\", function() {\r",
											"            false;\r",
											"        });\r",
											"} \r",
											"catch (e) {}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "centreon-auth-token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"action\": \"show\",\r\n  \"object\": \"tp\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Set parameters for newly created time period",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Parameter \" + pm.collectionVariables.get(\"current_parameter\") + \" was updated with \" + pm.collectionVariables.get(\"current_value\"), function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const parameters = pm.collectionVariables.get(\"list_of_parameters\");\r",
											"\r",
											"if (pm.collectionVariables.get(\"name\") && pm.collectionVariables.get(\"name\") != pm.collectionVariables.get(\"time_period_name\")) {\r",
											"    pm.collectionVariables.set(\"time_period_name\", pm.collectionVariables.get(\"name\"));\r",
											"}\r",
											"\r",
											"if (pm.collectionVariables.get(\"alias\") && pm.collectionVariables.get(\"alias\") != pm.collectionVariables.get(\"time_period_alias\")) {\r",
											"    pm.collectionVariables.set(\"time_period_alias\", pm.collectionVariables.get(\"alias\"));\r",
											"}\r",
											"\r",
											"if (parameters && parameters.length > 0) {\r",
											"    postman.setNextRequest(\"Set parameters for newly created time period\");\r",
											"} else {\r",
											"    pm.collectionVariables.unset(\"current_parameter\");\r",
											"    pm.collectionVariables.unset(\"current_value\");\r",
											"    pm.collectionVariables.unset(\"list_of_parameters\");\r",
											"    pm.collectionVariables.unset(\"list_of_values\");\r",
											"    postman.setNextRequest(\"Show available time periods after time period update\");\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let parameters = pm.collectionVariables.get(\"list_of_parameters\");\r",
											"let parameters_to_check = pm.collectionVariables.get(\"parameters_to_check\");\r",
											"let values = pm.collectionVariables.get(\"list_of_values\");\r",
											"\r",
											"if (!parameters || parameters.length == 0) {\r",
											"    parameters = [\"alias\", \"sunday\", \"monday\", \"tuesday\", \"wednesday\", \"thursday\", \"friday\", \"saturday\"];\r",
											"    values = [\"my_new_tp_alias\", \"00:00-24:00\", \"09:00-17:00\", \"09:00-17:00\", \"09:00-17:00\", \"09:17-24:00\", \"09:00-17:00\", \"09:00-13:30\"];\r",
											"    parameters_to_check = [];\r",
											"}\r",
											"\r",
											"let current_parameter = parameters.shift();\r",
											"pm.collectionVariables.set(\"current_parameter\", current_parameter);\r",
											"pm.collectionVariables.set(\"list_of_parameters\", parameters);\r",
											"let current_value = values.shift();\r",
											"pm.collectionVariables.set(\"current_value\", current_value);\r",
											"pm.collectionVariables.set(\"list_of_values\", values);\r",
											"\r",
											"pm.collectionVariables.set(current_parameter, current_value);\r",
											"\r",
											"parameters_to_check.push(current_parameter);\r",
											"pm.collectionVariables.set(\"parameters_to_check\", parameters_to_check);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\":\"setparam\",\n  \"object\":\"tp\",\n  \"values\": \"{{time_period_name}};{{current_parameter}};{{current_value}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Show available time periods after time period update",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"\r",
											"var parameters_to_check = pm.collectionVariables.get(\"parameters_to_check\");\r",
											"const number_of_parameters = parameters_to_check.length;\r",
											"var i = 0;\r",
											"\r",
											"for(let l = 0; l < responseJson.result.length; l++) {\r",
											"    if(responseJson.result[l].name == pm.collectionVariables.get(\"time_period_name\")) {\r",
											"        const keys = Object.keys(responseJson.result[l]);\r",
											"        const values = Object.values(responseJson.result[l]);\r",
											"        while(i < number_of_parameters) {\r",
											"            var j = keys.indexOf(parameters_to_check[i]);\r",
											"            if(j != -1) {\r",
											"                if(pm.test(\"The value \" + pm.collectionVariables.get(parameters_to_check[i])  + \" was found for \" + pm.collectionVariables.get(\"time_period_name\") + \"'s parameter \" + parameters_to_check[i], function() {\r",
											"                pm.expect(pm.collectionVariables.get(parameters_to_check[i])).to.eql(values[j]);\r",
											"                })) {\r",
											"                    pm.collectionVariables.unset(parameters_to_check[i]);\r",
											"                }\r",
											"            }\r",
											"        i++;   \r",
											"        }\r",
											"        pm.collectionVariables.unset(\"parameters_to_check\");\r",
											"        break;\r",
											"    }\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "centreon-auth-token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"action\": \"show\",\r\n  \"object\": \"tp\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Set exceptions on newly created time period",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const exception_dates = pm.collectionVariables.get(\"list_of_exception_dates\");\r",
											"\r",
											"pm.test(\"An exception has been set on \" + pm.collectionVariables.get(\"current_exception_date\") + \" (Timerange: \" + pm.collectionVariables.get(\"current_exception_timerange\") + \")\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"if (exception_dates && exception_dates.length > 0) {\r",
											"    postman.setNextRequest(\"Set exceptions on newly created time period\");\r",
											"} else {\r",
											"    pm.collectionVariables.unset(\"current_exception_date\");\r",
											"    pm.collectionVariables.unset(\"current_exception_timerange\");\r",
											"    pm.collectionVariables.unset(\"list_of_exception_dates\");\r",
											"    pm.collectionVariables.unset(\"list_of_exception_timeranges\");\r",
											"    postman.setNextRequest(\"Get exceptions on newly created time period\");\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let exception_dates = pm.collectionVariables.get(\"list_of_exception_dates\");\r",
											"let exception_timeranges = pm.collectionVariables.get(\"list_of_exception_timeranges\");\r",
											"var passed = false; \r",
											"var count = 0;\r",
											"\r",
											"if (!exception_dates || exception_dates.length == 0) {\r",
											"    exception_dates = [\"January 1\", \"December 25\", \"August 15\"];\r",
											"    exception_timeranges = [\"00:00-24:00\", \"00:00-24:00\", \"07:00-19:00\"];\r",
											"    pm.collectionVariables.set(\"total_number_of_exceptions\", exception_dates.length);\r",
											"}\r",
											"\r",
											"let current_date = exception_dates.shift();\r",
											"pm.collectionVariables.set(\"current_exception_date\", current_date);\r",
											"pm.collectionVariables.set(\"list_of_exception_dates\", exception_dates);\r",
											"\r",
											"let current_timerange = exception_timeranges.shift();\r",
											"pm.collectionVariables.set(\"current_exception_timerange\", current_timerange);\r",
											"pm.collectionVariables.set(\"list_of_exception_timeranges\", exception_timeranges);\r",
											"\r",
											"\r",
											"while ((count < pm.collectionVariables.get(\"total_number_of_exceptions\")) && passed == false) {\r",
											"    var count = pm.collectionVariables.get(\"count\");\r",
											"    let date_name = \"exception_date_\" + count;\r",
											"    let timerange_name = \"exception_timerange_\" + count;\r",
											"    pm.collectionVariables.set(date_name, current_date);\r",
											"    pm.collectionVariables.set(timerange_name, current_timerange);\r",
											"    count++;\r",
											"    passed = true;\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"setexception\",\n  \"object\": \"tp\",\n  \"values\": \"{{time_period_name}};{{current_exception_date}};{{current_exception_timerange}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get exceptions on newly created time period",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();",
											"var exceptions_found = 0;",
											"",
											"pm.test(\"A list of exceptions has been returned.\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"try {",
											"    var i = 0;",
											"    while (i < responseJson.result.length) {",
											"        j = 0;",
											"        while(j < pm.collectionVariables.get(\"total_number_of_exceptions\")) {",
											"            var current_date_string = \"exception_date_\" + j;",
											"            var current_exception_date = pm.collectionVariables.get(current_date_string);",
											"            var current_timerange_string = \"exception_timerange_\" + j;",
											"            var current_exception_timerange = pm.collectionVariables.get(current_timerange_string);",
											"            if(responseJson.result[i].days == current_exception_date) {",
											"                pm.test(\"Exception date \" + current_exception_date + \" has been found.\", function() {true;})",
											"                pm.test(\"Exception timerange for \" + current_exception_date + \" (\" + current_exception_timerange + \") has been found.\", function() {",
											"                    pm.expect(current_exception_timerange).to.eql(responseJson.result[i].timerange);",
											"                    exceptions_found++;",
											"                    pm.collectionVariables.unset(current_date_string);",
											"                    pm.collectionVariables.unset(current_timerange_string);",
											"                })",
											"",
											"            }",
											"        j++;",
											"        }",
											"    i++;",
											"    }",
											"    pm.test(\"All exceptions have been found.\", function() {",
											"        pm.expect(pm.collectionVariables.get(\"total_number_of_exceptions\")).to.eql(exceptions_found);",
											"        pm.collectionVariables.unset(\"count\");",
											"        pm.collectionVariables.unset(\"total_number_of_exceptions\");",
											"    })",
											"} catch (e) {}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\":\"getexception\",\n  \"object\":\"tp\",\n  \"values\": \"{{time_period_name}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Edge Cases",
					"item": [
						{
							"name": "Attempt to set non-compliant time range on time period",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Parameter \" + pm.collectionVariables.get(\"current_parameter\") + \" was updated with \" + pm.collectionVariables.get(\"current_value\"), function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\":\"setparam\",\n  \"object\":\"tp\",\n  \"values\": \"{{time_period_name}};sunday;00:00-27:00\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Attempt to set non-compliant exception on newly created time period",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Non-compliant exception has not been set on time period.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"setexception\",\n  \"object\": \"tp\",\n  \"values\": \"{{time_period_name}};Mysterious 13th Month;Dark Hour\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "ACL management",
			"item": [
				{
					"name": "Critical Path",
					"item": [
						{
							"name": "List ACL groups",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();",
											"",
											"pm.test(\"Existing ACL groups have been listed\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"try {",
											"    var i = 0;",
											"    while (i < responseJson.result.length) {",
											"        if (responseJson.result[i].name == \"ALL\") {",
											"            pm.test(\"Default 'ALL' ACL group exists and is active\", function () {",
											"                pm.expect(responseJson.result[i].name).to.eql(\"ALL\");",
											"                pm.expect(responseJson.result[i].alias).to.eql(\"ALL\");",
											"                pm.expect(responseJson.result[i].activate).to.eql(\"1\");",
											"            });",
											"            break;",
											"        }",
											"        i++;",
											"    }",
											"    if (i == responseJson.result.length) {",
											"        pm.test(\"Default 'ALL' ACL group exists and is active\", function() {",
											"            pm.expect(true).to.eql(false);",
											"        });",
											"    }",
											"} catch (e) { }",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"show\",\n  \"object\": \"aclgroup\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Reload",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Status code is 200\"] = responseCode.code === 200;"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"reload\",\n  \"object\": \"acl\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Add ACL group",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"acl_group_name\", \"ACL-TEST\");\r",
											"pm.collectionVariables.set(\"acl_group_alias\", \"ACL-TEST-ALIAS\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"A new ACL group has been created\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"action\": \"add\",\r\n  \"object\": \"ACLGROUP\",\r\n  \"values\": \"{{acl_group_name}};{{acl_group_alias}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "List ACL groups after new group creation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();",
											"",
											"pm.test(\"Existing ACL groups have been listed\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"try {",
											"    var i = 0;",
											"    while (i < responseJson.result.length) {",
											"        if (responseJson.result[i].name == pm.collectionVariables.get(\"acl_group_name\")) {",
											"            pm.test(\"New '\" + pm.collectionVariables.get(\"acl_group_name\") + \"' ACL group exists and is active\", function () {",
											"                pm.expect(responseJson.result[i].name).to.eql(pm.collectionVariables.get(\"acl_group_name\"));",
											"                pm.expect(responseJson.result[i].alias).to.eql(pm.collectionVariables.get(\"acl_group_alias\"));",
											"                pm.expect(responseJson.result[i].activate).to.eql(\"1\");",
											"            });",
											"            break;",
											"        }",
											"        i++;",
											"    }",
											"    if (i == responseJson.result.length) {",
											"        pm.test(\"Default 'ALL' ACL group exists and is active\", function() {",
											"            pm.expect(true).to.eql(false);",
											"        });",
											"    }",
											"} catch (e) { }",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"show\",\n  \"object\": \"aclgroup\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Edge cases",
					"item": []
				}
			]
		},
		{
			"name": "Command management",
			"item": [
				{
					"name": "Critical Path",
					"item": [
						{
							"name": "List commands",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();",
											"pm.collectionVariables.set(\"number_of_commands_before_creation\", responseJson.result.length);",
											"",
											"try {",
											"pm.test(\"Response body features a list of commands\", function () {",
											"    if(responseJson.result[0].id && responseJson.result[0].name && responseJson.result[0].type && responseJson.result[0].line) {true}",
											"    else {false}",
											"});",
											"    var i = 0;",
											"    while (i < responseJson.result.length) {",
											"        if (postman.getEnvironmentVariable(\"command_name\") == commandData[i].name) {",
											"            tests[\"Body contains added command_name\"] = postman.getEnvironmentVariable(\"command_name\") == commandData[i].name;",
											"            tests[\"Body contains added command_type\"] = postman.getEnvironmentVariable(\"command_type\") == commandData[i].type;",
											"            tests[\"Body contains added command_line\"] = postman.getEnvironmentVariable(\"command_line\") == commandData[i].line;",
											"            break;",
											"        }",
											"        i++;",
											"    }",
											"    if (i == commandData.length)",
											"        tests[\"command_name was found\"] = false;",
											"} catch (e) {}",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"show\",\n  \"object\": \"cmd\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Add command",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Command successfully created.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"command_name\", \"my_command\");\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"add\",\n  \"object\": \"cmd\",\n  \"values\": \"cmd-test;misc;{{command_name}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Set parameters for newly created command",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"if (pm.collectionVariables.get(\"name\") && pm.collectionVariables.get(\"name\") != pm.collectionVariables.get(\"command_name\")) {\r",
											"    pm.collectionVariables.set(\"command_name\", pm.collectionVariables.get(\"name\"));\r",
											"}\r",
											"\r",
											"\r",
											"if (parameters && parameters.length > 0) {\r",
											"    postman.setNextRequest(\"Set parameters for newly created command\");\r",
											"} else {\r",
											"    pm.collectionVariables.unset(\"current_parameter\");\r",
											"    pm.collectionVariables.unset(\"current_value\");\r",
											"    pm.collectionVariables.unset(\"list_of_parameters\");\r",
											"    pm.collectionVariables.unset(\"list_of_values\");\r",
											"    postman.setNextRequest(\"List commands after creation and update\");\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let parameters = pm.collectionVariables.get(\"list_of_parameters\");\r",
											"let values = pm.collectionVariables.get(\"list_of_values\");\r",
											"\r",
											"if (!parameters || parameters.length == 0) {\r",
											"    parameters = [\"name\", \"line\", \"type\", \"graph\", \"example\", \"comment\", \"argument\"];\r",
											"    values = [\"new_command_name\", \"$USER1$/check_icmp -H $HOSTADDRESS$ -w 3000.0,80% -c 5000.0,100% -p 1\", \"check\", \"memory\", \"80\", \"comment for command\", \"my_command_argument\"];\r",
											"}\r",
											"\r",
											"let current_parameter = parameters.shift();\r",
											"pm.collectionVariables.set(\"current_parameter\", current_parameter);\r",
											"pm.collectionVariables.set(\"list_of_parameters\", parameters);\r",
											"let current_value = values.shift();\r",
											"pm.collectionVariables.set(\"current_value\", current_value);\r",
											"pm.collectionVariables.set(\"list_of_values\", values);\r",
											"\r",
											"pm.collectionVariables.set(current_parameter, current_value);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"setparam\",\n  \"object\": \"cmd\",\n  \"values\": \"cmd-test;{{current_parameter}};{{current_value}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "List commands after creation and update",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();",
											"",
											"pm.test(\"Command created.\", function() {",
											"    pm.expect(responseJson.result.length).to.eql(pm.collectionVariables.get(\"number_of_commands_before_creation\") + 1);",
											"});",
											"",
											"try {",
											"pm.test(\"Response body features a list of commands\", function () {",
											"    if(responseJson.result[0].id && responseJson.result[0].name && responseJson.result[0].type && responseJson.result[0].line) {true}",
											"    else {false}",
											"});",
											"    var i = 0;",
											"    while (i < responseJson.result.length) {",
											"        if (postman.getEnvironmentVariable(\"command_name\") == commandData[i].name) {",
											"            tests[\"Body contains added command_name\"] = postman.getEnvironmentVariable(\"command_name\") == commandData[i].name;",
											"            tests[\"Body contains added command_type\"] = postman.getEnvironmentVariable(\"command_type\") == commandData[i].type;",
											"            tests[\"Body contains added command_line\"] = postman.getEnvironmentVariable(\"command_line\") == commandData[i].line;",
											"            break;",
											"        }",
											"        i++;",
											"    }",
											"    if (i == commandData.length)",
											"        tests[\"command_name was found\"] = false;",
											"} catch (e) {}",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"show\",\n  \"object\": \"cmd\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Edge Cases",
					"item": []
				}
			]
		},
		{
			"name": "Contact management",
			"item": [
				{
					"name": "Critical Path",
					"item": [
						{
							"name": "Login on admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Login successful\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Account displayed in response corresponds to credentials\", function (){\r",
											"    pm.expect(responseJson.contact.alias).to.eql(pm.collectionVariables.get('api_login'));\r",
											"});\r",
											"\r",
											"pm.collectionVariables.set(\"token\", responseJson.security.token);\r",
											"pm.collectionVariables.set(\"user\", responseJson.contact.alias);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"security\": {\n    \"credentials\": {\n      \"login\": \"{{api_login}}\",\n      \"password\": \"{{api_password}}\"\n    }\n  }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								},
								"description": "Entry point to retrieve an authentication token."
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"security\": {\n    \"credentials\": {\n      \"login\": \"admin\",\n      \"password\": \"centreon\"\n    }\n  }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"login"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"contact\": {\n    \"id\": 3,\n    \"name\": \"Admin\",\n    \"alias\": \"admin\",\n    \"email\": \"01A@CrLEnzWrYdgVBaUzldbG.wutx\",\n    \"is_admin\": true\n  },\n  \"security\": {\n    \"token\": \"9ed937d3911d212eae59300ac6977352\"\n  }\n}"
								},
								{
									"name": "Indicates that the server cannot or will not process the request due to something that is perceived to be\na client error (e.g., malformed request syntax, invalid request message framing)\n",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"security\": {\n    \"credentials\": {\n      \"login\": \"admin\",\n      \"password\": \"centreon\"\n    }\n  }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"login"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 400,\n  \"message\": \"Property 'name' not found\"\n}"
								},
								{
									"name": "Unauthorized",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"security\": {\n    \"credentials\": {\n      \"login\": \"admin\",\n      \"password\": \"centreon\"\n    }\n  }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"login"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 401,\n  \"message\": \"exercitation sit\"\n}"
								},
								{
									"name": "Internal Server Error",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"security\": {\n    \"credentials\": {\n      \"login\": \"admin\",\n      \"password\": \"centreon\"\n    }\n  }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"login"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 500,\n  \"message\": \"Internal Server Error\"\n}"
								}
							]
						},
						{
							"name": "Check admin's actions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"responseJson = pm.response.json();\r",
											"const valuesHosts = Object.values(responseJson.host);\r",
											"const valuesServices = Object.values(responseJson.service);\r",
											"const valuesMetaservices = Object.values(responseJson.metaservice);\r",
											"\r",
											"pm.test(\"Admin user has access to all available actions.\", function() {\r",
											"    pm.expect(valuesHosts).to.not.include(false);\r",
											"    pm.expect(valuesServices).to.not.include(false);\r",
											"    pm.expect(valuesMetaservices).to.not.include(false);\r",
											"})\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/acl/actions",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"acl",
										"actions"
									]
								}
							},
							"response": []
						},
						{
							"name": "List all users",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"responseJson = pm.response.json();\r",
											"pm.collectionVariables.set(\"number_of_users\", responseJson.result.length);\r",
											"var i = 0;\r",
											"while (i < pm.collectionVariables.get(\"number_of_users\")) {\r",
											"    if(responseJson.result[i].id == pm.collectionVariables.get(\"current_user_id\")) {\r",
											"        pm.test(\"Current admin user is registered in the list.\", function() {\r",
											"            pm.expect(pm.collectionVariables.get(\"current_user_id\")).to.eql(responseJson.result[i].id);\r",
											"            pm.expect(pm.collectionVariables.get(\"api_login\")).to.eql(responseJson.result[i].alias);\r",
											"            pm.expect(pm.collectionVariables.get(\"current_user_email\")).to.eql(responseJson.result[i].email);\r",
											"            pm.expect(responseJson.result[i].is_admin).to.eql(true);\r",
											"        });\r",
											"    }\r",
											"    i++;\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/configuration/users",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configuration",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add new non-admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"testuser_name\", \"User Test\");\r",
											"pm.collectionVariables.set(\"testuser_login\", \"testuser\");\r",
											"pm.collectionVariables.set(\"testuser_email\", \"testuser@localhost\");\r",
											"pm.collectionVariables.set(\"testuser_password\", \"Centreon!2021\");\r",
											"pm.collectionVariables.set(\"testuser_admin\", 0);\r",
											"pm.collectionVariables.set(\"testuser_GUI_access\", 0);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"add\",\n  \"object\": \"contact\",\n  \"values\": \"{{testuser_name}};{{testuser_login}};{{testuser_email}};{{testuser_password}};{{testuser_admin}};{{testuser_GUI_access}};en_US;local\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "List all users after user creation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"responseJson = pm.response.json();\r",
											"\r",
											"pm.test(\"One user has been added since the last list request.\", function() {\r",
											"    pm.expect(responseJson.result.length).to.eql(pm.collectionVariables.get(\"number_of_users\") + 1);\r",
											"})\r",
											"\r",
											"var i = 0;\r",
											"while (i < responseJson.result.length) {\r",
											"    if(responseJson.result[i].name == pm.collectionVariables.get(\"testuser_name\")) {\r",
											"        pm.test(\"Newly created user is registered in the list.\", function() {\r",
											"            pm.expect(responseJson.result[i].alias).to.eql(pm.collectionVariables.get(\"testuser_login\"));\r",
											"            pm.expect(responseJson.result[i].email).to.eql(pm.collectionVariables.get(\"testuser_email\"));\r",
											"            pm.expect(responseJson.result[i].is_admin).to.eql(false);\r",
											"        });\r",
											"    }\r",
											"    i++;\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/configuration/users",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configuration",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add access to API configuration & realtime to the new user",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let parameters = pm.collectionVariables.get(\"list_of_parameters\");\r",
											"let values = pm.collectionVariables.get(\"list_of_values\");\r",
											"let parameters_to_check = pm.collectionVariables.get(\"parameters_to_check\");\r",
											"\r",
											"if (!parameters || parameters.length == 0) {\r",
											"    parameters = [\"timezone\", \"reach_api\", \"reach_api_rt\"];\r",
											"    values = [\"Europe/Paris\", 1, 1];\r",
											"}\r",
											"\r",
											"let current_parameter = parameters.shift();\r",
											"pm.collectionVariables.set(\"current_parameter\", current_parameter);\r",
											"pm.collectionVariables.set(\"list_of_parameters\", parameters);\r",
											"let current_value = values.shift();\r",
											"pm.collectionVariables.set(\"current_value\", current_value);\r",
											"pm.collectionVariables.set(\"list_of_values\", values);\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const parameters = pm.collectionVariables.get(\"list_of_parameters\");\r",
											"\r",
											"pm.test(\"Parameter \" + pm.collectionVariables.get(\"current_parameter\") + \" was updated with \" + pm.collectionVariables.get(\"current_value\"), function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"if (parameters && parameters.length > 0) {\r",
											"    postman.setNextRequest(\"Add access to API configuration & realtime to the new user\");\r",
											"} else {\r",
											"    pm.collectionVariables.unset(\"current_parameter\");\r",
											"    pm.collectionVariables.unset(\"current_value\");\r",
											"    pm.collectionVariables.unset(\"list_of_parameters\");\r",
											"    pm.collectionVariables.unset(\"list_of_values\");\r",
											"    postman.setNextRequest(\"Log out from admin user\");\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "centreon-auth-token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"action\":\"setparam\",\r\n  \"object\":\"contact\",\r\n  \"values\": \"{{testuser_login}};{{current_parameter}};{{current_value}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Log out from admin user",
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{token}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "X-AUTH-TOKEN",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"logout"
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								},
								"description": "Entry point to delete an existing authentication token."
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logout"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"Successful logout\"\n}"
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logout"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 403,\n  \"message\": \"You are not authorized to access this resource\"\n}"
								},
								{
									"name": "Internal Server Error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"logout"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 500,\n  \"message\": \"Internal Server Error\"\n}"
								}
							]
						},
						{
							"name": "Login on newly created user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Connection successful\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Account displayed in response corresponds to credentials\", function (){\r",
											"    pm.expect(responseJson.contact.alias).to.eql(pm.collectionVariables.get('testuser_login'));\r",
											"});\r",
											"\r",
											"pm.collectionVariables.set(\"token\", responseJson.security.token);\r",
											"pm.collectionVariables.set(\"user\", responseJson.contact.alias);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"security\": {\n    \"credentials\": {\n      \"login\": \"{{testuser_login}}\",\n      \"password\": \"{{testuser_password}}\"\n    }\n  }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								},
								"description": "Entry point to retrieve an authentication token."
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"security\": {\n    \"credentials\": {\n      \"login\": \"admin\",\n      \"password\": \"centreon\"\n    }\n  }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"login"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"contact\": {\n    \"id\": 3,\n    \"name\": \"Admin\",\n    \"alias\": \"admin\",\n    \"email\": \"01A@CrLEnzWrYdgVBaUzldbG.wutx\",\n    \"is_admin\": true\n  },\n  \"security\": {\n    \"token\": \"9ed937d3911d212eae59300ac6977352\"\n  }\n}"
								},
								{
									"name": "Indicates that the server cannot or will not process the request due to something that is perceived to be\na client error (e.g., malformed request syntax, invalid request message framing)\n",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"security\": {\n    \"credentials\": {\n      \"login\": \"admin\",\n      \"password\": \"centreon\"\n    }\n  }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"login"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 400,\n  \"message\": \"Property 'name' not found\"\n}"
								},
								{
									"name": "Unauthorized",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"security\": {\n    \"credentials\": {\n      \"login\": \"admin\",\n      \"password\": \"centreon\"\n    }\n  }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"login"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 401,\n  \"message\": \"exercitation sit\"\n}"
								},
								{
									"name": "Internal Server Error",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"security\": {\n    \"credentials\": {\n      \"login\": \"admin\",\n      \"password\": \"centreon\"\n    }\n  }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"login"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 500,\n  \"message\": \"Internal Server Error\"\n}"
								}
							]
						},
						{
							"name": "Check admin's actions on non-admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"responseJson = pm.response.json();\r",
											"const valuesHosts = Object.values(responseJson.host);\r",
											"const valuesServices = Object.values(responseJson.service);\r",
											"const valuesMetaservices = Object.values(responseJson.metaservice);\r",
											"\r",
											"pm.test(\"Admin user has access to all available actions.\", function() {\r",
											"    pm.expect(valuesHosts).to.not.include(false);\r",
											"    pm.expect(valuesServices).to.not.include(false);\r",
											"    pm.expect(valuesMetaservices).to.not.include(false);\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/acl/actions",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"acl",
										"actions"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Edge cases",
					"item": [
						{
							"name": "New Folder",
							"item": []
						}
					]
				}
			]
		},
		{
			"name": "Host group management",
			"item": [
				{
					"name": "Critical Path",
					"item": [
						{
							"name": "Login",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Account displayed in response corresponds to credentials\", function (){\r",
											"    pm.expect(responseJson.contact.alias).to.eql(pm.collectionVariables.get('api_login'));\r",
											"});\r",
											"\r",
											"pm.collectionVariables.set(\"token\", responseJson.security.token);\r",
											"pm.collectionVariables.set(\"user\", responseJson.contact.alias);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"security\": {\n    \"credentials\": {\n      \"login\": \"{{api_login}}\",\n      \"password\": \"{{api_password}}\"\n    }\n  }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									]
								},
								"description": "Entry point to retrieve an authentication token."
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"security\": {\n    \"credentials\": {\n      \"login\": \"admin\",\n      \"password\": \"centreon\"\n    }\n  }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"login"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"contact\": {\n    \"id\": 3,\n    \"name\": \"Admin\",\n    \"alias\": \"admin\",\n    \"email\": \"01A@CrLEnzWrYdgVBaUzldbG.wutx\",\n    \"is_admin\": true\n  },\n  \"security\": {\n    \"token\": \"9ed937d3911d212eae59300ac6977352\"\n  }\n}"
								},
								{
									"name": "Indicates that the server cannot or will not process the request due to something that is perceived to be\na client error (e.g., malformed request syntax, invalid request message framing)\n",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"security\": {\n    \"credentials\": {\n      \"login\": \"admin\",\n      \"password\": \"centreon\"\n    }\n  }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"login"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 400,\n  \"message\": \"Property 'name' not found\"\n}"
								},
								{
									"name": "Unauthorized",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"security\": {\n    \"credentials\": {\n      \"login\": \"admin\",\n      \"password\": \"centreon\"\n    }\n  }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"login"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 401,\n  \"message\": \"exercitation sit\"\n}"
								},
								{
									"name": "Internal Server Error",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"security\": {\n    \"credentials\": {\n      \"login\": \"admin\",\n      \"password\": \"centreon\"\n    }\n  }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"login"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 500,\n  \"message\": \"Internal Server Error\"\n}"
								}
							]
						},
						{
							"name": "List all host groups before host group creation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"\r",
											"pm.collectionVariables.set(\"host_groups_before_creation\", responseJson.meta.total);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/configuration/hosts/groups",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configuration",
										"hosts",
										"groups"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add host group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"let value = pm.collectionVariables.get(\"count_host_group\");\r",
											"if (!value) {value = 0;}\r",
											"value++;\r",
											"pm.collectionVariables.set(\"count_host_group\", value);\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"host_group_name\", \"Host Group 01\");\r",
											"pm.collectionVariables.set(\"host_group_alias\", \"Host Group 01 Alias\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"add\",\n  \"object\": \"hg\",\n  \"values\": \"{{host_group_name}};{{host_group_alias}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "List all host groups after host group creation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"if (pm.test(\"The correct number of host groups has been added.\", function() {\r",
											"    pm.expect(responseJson.meta.total).to.eql(pm.collectionVariables.get(\"host_groups_before_creation\") + pm.collectionVariables.get(\"count_host_group\"));\r",
											"})) {\r",
											"    pm.collectionVariables.set(\"count_host_group\", responseJson.meta.total);\r",
											"    pm.collectionVariables.unset(\"host_groups_before_creation\");\r",
											"}\r",
											"\r",
											"try {\r",
											"    var i = 0;\r",
											"        while (i < responseJson.meta.total) {\r",
											"        if (pm.collectionVariables.get(\"host_group_name\") == responseJson.result[i].name)\r",
											"        {\r",
											"            pm.test(\"Body contains added host group's name\", function() {\r",
											"                pm.expect(pm.collectionVariables.get(\"host_group_name\")).to.eql(responseJson.result[i].name);\r",
											"            });\r",
											"            pm.test(\"Body contains added host group's alias\", function() {\r",
											"                pm.expect(pm.collectionVariables.get(\"host_group_alias\")).to.eql(responseJson.result[i].alias);\r",
											"            });\r",
											"            break;\r",
											"        }\r",
											"        i++;\r",
											"    }\r",
											"    if (i == responseJson.meta.total)\r",
											"        pm.test(\"Added host group was found\", function() {\r",
											"            false;\r",
											"        });\r",
											"}\r",
											"catch (e) {}\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/configuration/hosts/groups",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configuration",
										"hosts",
										"groups"
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								},
								"description": "Return all host group configurations.\n\nThe available parameters to **search** / **sort_by** are:\n\n* id\n* name\n* alias\n* is_activated\n"
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/configuration/hosts/groups",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"configuration",
												"hosts",
												"groups"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"result\": [\n    {\n      \"id\": 1,\n      \"name\": \"MySQL-Servers\",\n      \"alias\": \"All MySQL Servers\",\n      \"notes\": \"my notes\",\n      \"notes_url\": \"notes url\",\n      \"action_url\": \"action url\",\n      \"icon\": {\n        \"id\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"name\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"path\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"comment\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"icon_map\": {\n        \"id\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"name\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"path\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"comment\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"geo_coords\": \"48.51,2.20\",\n      \"rrd\": 2,\n      \"comment\": \"incididunt sint quis\",\n      \"is_activated\": false\n    },\n    {\n      \"id\": 1,\n      \"name\": \"MySQL-Servers\",\n      \"alias\": \"All MySQL Servers\",\n      \"notes\": \"my notes\",\n      \"notes_url\": \"notes url\",\n      \"action_url\": \"action url\",\n      \"icon\": {\n        \"id\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"name\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"path\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"comment\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"icon_map\": {\n        \"id\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"name\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"path\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"comment\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"geo_coords\": \"48.51,2.20\",\n      \"rrd\": 2,\n      \"comment\": \"voluptate eu\",\n      \"is_activated\": true\n    }\n  ],\n  \"meta\": {\n    \"page\": 1,\n    \"limit\": 10,\n    \"search\": {},\n    \"sort_by\": {},\n    \"total\": 1\n  }\n}"
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/configuration/hosts/groups",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"configuration",
												"hosts",
												"groups"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 403,\n  \"message\": \"You are not authorized to access this resource\"\n}"
								},
								{
									"name": "Internal Server Error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/configuration/hosts/groups",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"configuration",
												"hosts",
												"groups"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 500,\n  \"message\": \"Internal Server Error\"\n}"
								}
							]
						},
						{
							"name": "Set parameters for newly created host group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const parameters = pm.collectionVariables.get(\"list_of_parameters\");\r",
											"\r",
											"pm.test(\"Parameter \" + pm.collectionVariables.get(\"current_parameter\") + \" was updated with \" + pm.collectionVariables.get(\"current_value\"), function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"if (pm.collectionVariables.get(\"name\") && pm.collectionVariables.get(\"name\") != pm.collectionVariables.get(\"host_group_name\")) {\r",
											"    pm.collectionVariables.set(\"host_group_name\", pm.collectionVariables.get(\"name\"));\r",
											"}\r",
											"\r",
											"if (pm.collectionVariables.get(\"alias\") && pm.collectionVariables.get(\"alias\") != pm.collectionVariables.get(\"host_group_alias\")) {\r",
											"    pm.collectionVariables.set(\"host_group_alias\", pm.collectionVariables.get(\"alias\"));\r",
											"}\r",
											"\r",
											"if (parameters && parameters.length > 0) {\r",
											"    postman.setNextRequest(\"Set parameters for newly created host group\");\r",
											"} else {\r",
											"    pm.collectionVariables.unset(\"current_parameter\");\r",
											"    pm.collectionVariables.unset(\"current_value\");\r",
											"    pm.collectionVariables.unset(\"list_of_parameters\");\r",
											"    pm.collectionVariables.unset(\"list_of_values\");\r",
											"    postman.setNextRequest(\"List all host groups with updated parameters\");\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let parameters = pm.collectionVariables.get(\"list_of_parameters\");\r",
											"let values = pm.collectionVariables.get(\"list_of_values\");\r",
											"let parameters_to_check = pm.collectionVariables.get(\"parameters_to_check\");\r",
											"\r",
											"if (!parameters || parameters.length == 0) {\r",
											"    parameters = [\"alias\", \"comment\", \"activate\", \"notes\", \"notes_url\", \"action_url\", \"icon_image\", \"map_icon_image\"];\r",
											"    values = [\"Host Group 01 Alias v2\",\"my_comment\", true, \"my_notes\",\"my_note_url\",\"my_action_url\",\"ppm/applications-monitoring-centreon-poller-centreon-128-2.png\",\"ppm/applications-monitoring-centreon-poller-centreon-128-2.png\"];\r",
											"    parameters_to_check = [];\r",
											"}\r",
											"\r",
											"let current_parameter = parameters.shift();\r",
											"pm.collectionVariables.set(\"current_parameter\", current_parameter);\r",
											"pm.collectionVariables.set(\"list_of_parameters\", parameters);\r",
											"let current_value = values.shift();\r",
											"pm.collectionVariables.set(\"current_value\", current_value);\r",
											"pm.collectionVariables.set(\"list_of_values\", values);\r",
											"\r",
											"pm.collectionVariables.set(current_parameter, current_value);\r",
											"\r",
											"parameters_to_check.push(current_parameter);\r",
											"pm.collectionVariables.set(\"parameters_to_check\", parameters_to_check);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"setparam\",\n  \"object\": \"hg\",\n  \"values\": \"{{host_group_name}};{{current_parameter}};{{current_value}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "List all host groups with updated parameters",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"var parameters_to_check = pm.collectionVariables.get(\"parameters_to_check\");\r",
											"\r",
											"if(parameters_to_check) {\r",
											"    for(let l = 0; l < responseJson.result.length; l++) {\r",
											"        if(responseJson.result[l].name == pm.collectionVariables.get(\"host_group_name\")) {\r",
											"            const keys = Object.keys(responseJson.result[l]);\r",
											"            const values = Object.values(responseJson.result[l]);\r",
											"            for(let i = 0; i < parameters_to_check.length; i++) {\r",
											"                var j = keys.indexOf(parameters_to_check[i]);\r",
											"                if(j != -1) {\r",
											"                    pm.test(\"The value \" + pm.collectionVariables.get(parameters_to_check[i])  + \" was found for \" + pm.collectionVariables.get(\"host_group_name\") + \"'s parameter \" + parameters_to_check[i], function() {pm.expect(pm.collectionVariables.get(parameters_to_check[i])).to.eql(values[j]);}) \r",
											"                } else {\r",
											"                    switch (parameters_to_check[i]) {\r",
											"                        case 'icon_image':\r",
											"                            pm.test(\"The value \" + pm.collectionVariables.get(parameters_to_check[i]) + \" was found for \" + pm.collectionVariables.get(\"host_group_name\") + \"'s parameter \" + parameters_to_check[i], function() {pm.expect(responseJson.result[l].icon.path).to.contain(pm.collectionVariables.get(parameters_to_check[i]))})\r",
											"                            break;\r",
											"                        case 'map_icon_image':\r",
											"                            pm.test(\"The value \" + pm.collectionVariables.get(parameters_to_check[i]) + \" was found for \" + pm.collectionVariables.get(\"host_group_name\") + \"'s parameter \" + parameters_to_check[i], function() {pm.expect(responseJson.result[l].icon_map.path).to.contain(pm.collectionVariables.get(parameters_to_check[i]))})\r",
											"                            break;                       \r",
											"                    }\r",
											"                }\r",
											"            pm.collectionVariables.unset(parameters_to_check[i]);\r",
											"            }\r",
											"        pm.collectionVariables.unset(\"parameters_to_check\");           \r",
											"        }\r",
											"    }\r",
											"}\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let parameters_to_check = pm.collectionVariables.get(\"parameters_to_check\");\r",
											"\r",
											"if(parameters_to_check) {\r",
											"    for (let i = 0; i < parameters_to_check.length; i++) {\r",
											"        switch (parameters_to_check[i]) {\r",
											"            case 'activate': \r",
											"                pm.collectionVariables.set(\"is_activated\", pm.collectionVariables.get(\"activate\"));\r",
											"                pm.collectionVariables.unset(\"activate\");\r",
											"                parameters_to_check[i] = \"is_activated\";\r",
											"                break;\r",
											"        }\r",
											"    }\r",
											"}\r",
											"\r",
											"\r",
											"pm.collectionVariables.set(\"parameters_to_check\", parameters_to_check);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/configuration/hosts/groups",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configuration",
										"hosts",
										"groups"
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								},
								"description": "Return all host group configurations.\n\nThe available parameters to **search** / **sort_by** are:\n\n* id\n* name\n* alias\n* is_activated\n"
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/configuration/hosts/groups",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"configuration",
												"hosts",
												"groups"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"result\": [\n    {\n      \"id\": 1,\n      \"name\": \"MySQL-Servers\",\n      \"alias\": \"All MySQL Servers\",\n      \"notes\": \"my notes\",\n      \"notes_url\": \"notes url\",\n      \"action_url\": \"action url\",\n      \"icon\": {\n        \"id\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"name\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"path\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"comment\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"icon_map\": {\n        \"id\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"name\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"path\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"comment\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"geo_coords\": \"48.51,2.20\",\n      \"rrd\": 2,\n      \"comment\": \"incididunt sint quis\",\n      \"is_activated\": false\n    },\n    {\n      \"id\": 1,\n      \"name\": \"MySQL-Servers\",\n      \"alias\": \"All MySQL Servers\",\n      \"notes\": \"my notes\",\n      \"notes_url\": \"notes url\",\n      \"action_url\": \"action url\",\n      \"icon\": {\n        \"id\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"name\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"path\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"comment\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"icon_map\": {\n        \"id\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"name\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"path\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"comment\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"geo_coords\": \"48.51,2.20\",\n      \"rrd\": 2,\n      \"comment\": \"voluptate eu\",\n      \"is_activated\": true\n    }\n  ],\n  \"meta\": {\n    \"page\": 1,\n    \"limit\": 10,\n    \"search\": {},\n    \"sort_by\": {},\n    \"total\": 1\n  }\n}"
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/configuration/hosts/groups",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"configuration",
												"hosts",
												"groups"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 403,\n  \"message\": \"You are not authorized to access this resource\"\n}"
								},
								{
									"name": "Internal Server Error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/configuration/hosts/groups",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"configuration",
												"hosts",
												"groups"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 500,\n  \"message\": \"Internal Server Error\"\n}"
								}
							]
						}
					]
				},
				{
					"name": "Edge cases",
					"item": [
						{
							"name": "Add duplicate host group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 409\", function () {\r",
											"    pm.response.to.have.status(409);\r",
											"});\r",
											"\r",
											"pm.test(\"Displayed error message is the one that's expected\", function() {\r",
											"    pm.expect(pm.response.text()).to.include(\"Object already exists\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"add\",\n  \"object\": \"hg\",\n  \"values\": \"{{host_group_name}};{{host_group_alias}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "List all host groups after duplicate host group creation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"if(!pm.test(\"A duplicate host group has not been added.\", function() {\r",
											"    pm.expect(pm.collectionVariables.get(\"count_host_group\")).to.eql(responseJson.meta.total)\r",
											"})) {\r",
											"    postman.setNextRequest(\"Delete duplicate host group\");\r",
											"} else {\r",
											"    postman.setNextRequest(\"Add nameless host group\");\r",
											"}\r",
											"\r",
											"try {\r",
											"    var i = 0;\r",
											"        while (i < responseJson.meta.total) {\r",
											"        if (pm.collectionVariables.get(\"host_group_name\") == responseJson.result[i].name)\r",
											"        {\r",
											"            pm.test(\"Body contains added host group's name\", function() {\r",
											"                pm.expect(pm.collectionVariables.get(\"host_group_name\")).to.eql(responseJson.result[i].name);\r",
											"            });\r",
											"            pm.test(\"Body contains added host group's alias\", function() {\r",
											"                pm.expect(pm.collectionVariables.get(\"host_group_alias\")).to.eql(responseJson.result[i].alias);\r",
											"            });\r",
											"            break;\r",
											"        }\r",
											"        i++;\r",
											"    }\r",
											"    if (i == responseJson.meta.total)\r",
											"        pm.test(\"host_group_name was found\", function() {\r",
											"            false;\r",
											"        });\r",
											"}\r",
											"catch (e) {}\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/configuration/hosts/groups",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configuration",
										"hosts",
										"groups"
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								},
								"description": "Return all host group configurations.\n\nThe available parameters to **search** / **sort_by** are:\n\n* id\n* name\n* alias\n* is_activated\n"
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/configuration/hosts/groups",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"configuration",
												"hosts",
												"groups"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"result\": [\n    {\n      \"id\": 1,\n      \"name\": \"MySQL-Servers\",\n      \"alias\": \"All MySQL Servers\",\n      \"notes\": \"my notes\",\n      \"notes_url\": \"notes url\",\n      \"action_url\": \"action url\",\n      \"icon\": {\n        \"id\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"name\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"path\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"comment\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"icon_map\": {\n        \"id\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"name\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"path\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"comment\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"geo_coords\": \"48.51,2.20\",\n      \"rrd\": 2,\n      \"comment\": \"incididunt sint quis\",\n      \"is_activated\": false\n    },\n    {\n      \"id\": 1,\n      \"name\": \"MySQL-Servers\",\n      \"alias\": \"All MySQL Servers\",\n      \"notes\": \"my notes\",\n      \"notes_url\": \"notes url\",\n      \"action_url\": \"action url\",\n      \"icon\": {\n        \"id\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"name\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"path\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"comment\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"icon_map\": {\n        \"id\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"name\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"path\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"comment\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"geo_coords\": \"48.51,2.20\",\n      \"rrd\": 2,\n      \"comment\": \"voluptate eu\",\n      \"is_activated\": true\n    }\n  ],\n  \"meta\": {\n    \"page\": 1,\n    \"limit\": 10,\n    \"search\": {},\n    \"sort_by\": {},\n    \"total\": 1\n  }\n}"
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/configuration/hosts/groups",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"configuration",
												"hosts",
												"groups"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 403,\n  \"message\": \"You are not authorized to access this resource\"\n}"
								},
								{
									"name": "Internal Server Error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/configuration/hosts/groups",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"configuration",
												"hosts",
												"groups"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 500,\n  \"message\": \"Internal Server Error\"\n}"
								}
							]
						},
						{
							"name": "Delete duplicate host group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"del\",\n  \"object\": \"hg\",\n  \"values\": \"{{host_group_name}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Add nameless host group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Nameless host has not been created.\", function() {\r",
											"    pm.response.to.have.status(500);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"add\",\n  \"object\": \"hg\",\n  \"values\": \";nameless_host\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "List all host groups after nameless host group creation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"try {\r",
											"    var flag = 0;\r",
											"    var j = 0;\r",
											"    while (j < responseJson.result.length) {\r",
											"        if(responseJson.result[j].name == \"\") {\r",
											"            pm.test(\"A nameless host group has not been added.\", function() {false;});\r",
											"            flag = 1;\r",
											"        }\r",
											"    j++;\r",
											"    }\r",
											"\r",
											"    if (flag == 1) {\r",
											"        postman.setNextRequest(\"Delete nameless host group\");\r",
											"    } else {\r",
											"        postman.setNextRequest(null);\r",
											"    }\r",
											"}\r",
											"catch (e) {}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/configuration/hosts/groups",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configuration",
										"hosts",
										"groups"
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								},
								"description": "Return all host group configurations.\n\nThe available parameters to **search** / **sort_by** are:\n\n* id\n* name\n* alias\n* is_activated\n"
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/configuration/hosts/groups",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"configuration",
												"hosts",
												"groups"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"result\": [\n    {\n      \"id\": 1,\n      \"name\": \"MySQL-Servers\",\n      \"alias\": \"All MySQL Servers\",\n      \"notes\": \"my notes\",\n      \"notes_url\": \"notes url\",\n      \"action_url\": \"action url\",\n      \"icon\": {\n        \"id\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"name\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"path\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"comment\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"icon_map\": {\n        \"id\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"name\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"path\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"comment\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"geo_coords\": \"48.51,2.20\",\n      \"rrd\": 2,\n      \"comment\": \"incididunt sint quis\",\n      \"is_activated\": false\n    },\n    {\n      \"id\": 1,\n      \"name\": \"MySQL-Servers\",\n      \"alias\": \"All MySQL Servers\",\n      \"notes\": \"my notes\",\n      \"notes_url\": \"notes url\",\n      \"action_url\": \"action url\",\n      \"icon\": {\n        \"id\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"name\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"path\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"comment\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"icon_map\": {\n        \"id\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"name\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"path\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"comment\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"geo_coords\": \"48.51,2.20\",\n      \"rrd\": 2,\n      \"comment\": \"voluptate eu\",\n      \"is_activated\": true\n    }\n  ],\n  \"meta\": {\n    \"page\": 1,\n    \"limit\": 10,\n    \"search\": {},\n    \"sort_by\": {},\n    \"total\": 1\n  }\n}"
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/configuration/hosts/groups",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"configuration",
												"hosts",
												"groups"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 403,\n  \"message\": \"You are not authorized to access this resource\"\n}"
								},
								{
									"name": "Internal Server Error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/configuration/hosts/groups",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"configuration",
												"hosts",
												"groups"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 500,\n  \"message\": \"Internal Server Error\"\n}"
								}
							]
						},
						{
							"name": "Delete nameless host group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"postman.setNextRequest(\"List all host groups after nameless host group deletion\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"del\",\n  \"object\": \"hg\",\n  \"values\": \"\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "List all host groups after nameless host group deletion",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"The nameless host group has been deleted.\", function() {\r",
											"    pm.expect(pm.collectionVariables.get(\"count_host_group\")).to.eql(responseJson.meta.total);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/configuration/hosts/groups",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configuration",
										"hosts",
										"groups"
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								},
								"description": "Return all host group configurations.\n\nThe available parameters to **search** / **sort_by** are:\n\n* id\n* name\n* alias\n* is_activated\n"
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/configuration/hosts/groups",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"configuration",
												"hosts",
												"groups"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"result\": [\n    {\n      \"id\": 1,\n      \"name\": \"MySQL-Servers\",\n      \"alias\": \"All MySQL Servers\",\n      \"notes\": \"my notes\",\n      \"notes_url\": \"notes url\",\n      \"action_url\": \"action url\",\n      \"icon\": {\n        \"id\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"name\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"path\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"comment\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"icon_map\": {\n        \"id\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"name\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"path\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"comment\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"geo_coords\": \"48.51,2.20\",\n      \"rrd\": 2,\n      \"comment\": \"incididunt sint quis\",\n      \"is_activated\": false\n    },\n    {\n      \"id\": 1,\n      \"name\": \"MySQL-Servers\",\n      \"alias\": \"All MySQL Servers\",\n      \"notes\": \"my notes\",\n      \"notes_url\": \"notes url\",\n      \"action_url\": \"action url\",\n      \"icon\": {\n        \"id\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"name\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"path\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"comment\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"icon_map\": {\n        \"id\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"name\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"path\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"comment\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"geo_coords\": \"48.51,2.20\",\n      \"rrd\": 2,\n      \"comment\": \"voluptate eu\",\n      \"is_activated\": true\n    }\n  ],\n  \"meta\": {\n    \"page\": 1,\n    \"limit\": 10,\n    \"search\": {},\n    \"sort_by\": {},\n    \"total\": 1\n  }\n}"
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/configuration/hosts/groups",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"configuration",
												"hosts",
												"groups"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 403,\n  \"message\": \"You are not authorized to access this resource\"\n}"
								},
								{
									"name": "Internal Server Error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/configuration/hosts/groups",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"configuration",
												"hosts",
												"groups"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 500,\n  \"message\": \"Internal Server Error\"\n}"
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "Host management",
			"item": [
				{
					"name": "Critical Path",
					"item": [
						{
							"name": "List all hosts before host creation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.collectionVariables.set(\"number_of_hosts_before_creation\", responseJson.meta.total);\r",
											"pm.collectionVariables.set(\"hosts_created\", 0);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/monitoring/hosts?limit=20",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"monitoring",
										"hosts"
									],
									"query": [
										{
											"key": "page",
											"value": "",
											"description": "Number of the requested page",
											"disabled": true
										},
										{
											"key": "search",
											"value": "",
											"description": "Retrieve only data matching the defined search value.\nSimple search can be done like the following example: ``` search={\"host.name\":\"Central\"} ```\nComplex search can be done with aggregators and operators.\nAvailable search aggregators are:\n  * `$or`\n  * `$and`\n\nAvailable search operators are:\n  * `$eq` → equal\n  * `$neq` → not equal\n  * `$lt` → less than\n  * `$le` → less or equal than\n  * `$gt` → greater than\n  * `$ge` → greater or equal than\n  * `$lk` → like\n  * `$nk` → not like\n  * `$in` → in\n  * `$ni` → not in\n\nExamples without nested aggregators:\n  ```\n  search={\n    \"$or\":[\n      {\"host.name\":{\"$eq\":\"name_1\"}},\n      {\"host.name\":{\"$eq\":\"name_2\"}}\n    ]\n  }\n  ```\n  ```\n  search={\n    \"$and\":[\n      {\"host.address\":{\"$rg\":\"^10\\.0\\.0\\.\\d+$\"}},\n      {\"host.name\":{\"$lk\":\"fr%\"}}\n    ]\n  }\n  ```\n\nExample with nested aggregators:\n  ```\n  search={\n    \"$or\":[\n      {\n        \"$and\":[\n          {\"host.address\":{\"$rg\":\"^10\\.0\\.0\\.\\d+$\"}},\n          {\"host.name\":{\"$lk\":\"fr%\"}}\n        ]\n      },\n      {\n        \"$and\":[\n          {\"host.address\":{\"$rg\":\"^192\\.168\\.0\\.\\d+$\"}},\n          {\"host.name\":{\"$lk\":\"us%\"}}\n        ]\n      }\n    ]\n  }\n  ```\n",
											"disabled": true
										},
										{
											"key": "limit",
											"value": "20"
										}
									]
								},
								"description": "List all the hosts in real-time monitoring.\n\nThe available parameters to **search** / **sort_by** are:\n\n* host.id\n* host.name\n* host.alias\n* host.address\n* host.state\n* poller.id\n* service.display_name\n* host_group.id\n* host.is_acknowledged\n* host.downtime\n* host.criticality\n"
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/monitoring/hosts?show_service=true&search=cillum quis commodo&limit=20&page=4",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"monitoring",
												"hosts"
											],
											"query": [
												{
													"key": "show_service",
													"value": "true"
												},
												{
													"key": "search",
													"value": "cillum quis commodo"
												},
												{
													"key": "limit",
													"value": "20"
												},
												{
													"key": "page",
													"value": "4"
												}
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"result\": [\n    {\n      \"id\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"alias\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"display_name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"state\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"services\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"poller_id\": 1,\n      \"acknowledged\": false,\n      \"address_ip\": \"127.0.0.1\",\n      \"check_attempt\": 1,\n      \"checked\": true,\n      \"execution_time\": 0.070906,\n      \"icon_image\": \"ppm/operatingsystems-linux-snmp-linux-128.png\",\n      \"icon_image_alt\": \"\",\n      \"last_check\": \"1980-02-02T05:43:34.625Z\",\n      \"last_hard_state_change\": \"2022-08-05T10:43:02.077Z\",\n      \"last_state_change\": \"1948-11-25T13:12:41.089Z\",\n      \"last_time_down\": \"1945-06-23T19:43:00.867Z\",\n      \"last_time_unreachable\": \"2022-07-05T17:47:46.217Z\",\n      \"last_time_up\": \"1952-11-26T09:19:35.799Z\",\n      \"last_update\": \"2002-02-11T22:28:18.621Z\",\n      \"max_check_attempts\": 3,\n      \"output\": \"OK - 127.0.0.1 rta 0.100ms lost 0%\\n\",\n      \"passive_checks\": false,\n      \"state_type\": 0,\n      \"timezone\": \":Europe/Paris\",\n      \"scheduled_downtime_depth\": 0,\n      \"criticality\": 10\n    },\n    {\n      \"id\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"alias\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"display_name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"state\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"services\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"poller_id\": 1,\n      \"acknowledged\": false,\n      \"address_ip\": \"127.0.0.1\",\n      \"check_attempt\": 1,\n      \"checked\": true,\n      \"execution_time\": 0.070906,\n      \"icon_image\": \"ppm/operatingsystems-linux-snmp-linux-128.png\",\n      \"icon_image_alt\": \"\",\n      \"last_check\": \"2014-11-11T02:07:25.915Z\",\n      \"last_hard_state_change\": \"1966-04-15T04:04:02.849Z\",\n      \"last_state_change\": \"1962-12-26T10:26:12.593Z\",\n      \"last_time_down\": \"2004-09-19T21:36:42.944Z\",\n      \"last_time_unreachable\": \"1951-05-24T08:52:34.057Z\",\n      \"last_time_up\": \"1990-04-26T07:43:26.231Z\",\n      \"last_update\": \"1971-01-30T15:22:21.380Z\",\n      \"max_check_attempts\": 3,\n      \"output\": \"OK - 127.0.0.1 rta 0.100ms lost 0%\\n\",\n      \"passive_checks\": false,\n      \"state_type\": 0,\n      \"timezone\": \":Europe/Paris\",\n      \"scheduled_downtime_depth\": 0,\n      \"criticality\": 10\n    }\n  ],\n  \"meta\": {\n    \"page\": 1,\n    \"limit\": 10,\n    \"search\": {},\n    \"sort_by\": {},\n    \"total\": 1\n  }\n}"
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/monitoring/hosts?show_service=true&search=cillum quis commodo&limit=20&page=4",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"monitoring",
												"hosts"
											],
											"query": [
												{
													"key": "show_service",
													"value": "true"
												},
												{
													"key": "search",
													"value": "cillum quis commodo"
												},
												{
													"key": "limit",
													"value": "20"
												},
												{
													"key": "page",
													"value": "4"
												}
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 403,\n  \"message\": \"You are not authorized to access this resource\"\n}"
								},
								{
									"name": "Internal Server Error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/monitoring/hosts?show_service=true&search=cillum quis commodo&limit=20&page=4",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"monitoring",
												"hosts"
											],
											"query": [
												{
													"key": "show_service",
													"value": "true"
												},
												{
													"key": "search",
													"value": "cillum quis commodo"
												},
												{
													"key": "limit",
													"value": "20"
												},
												{
													"key": "page",
													"value": "4"
												}
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 500,\n  \"message\": \"Internal Server Error\"\n}"
								}
							]
						},
						{
							"name": "Add hosts",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const hosts = pm.collectionVariables.get(\"host_list\");\r",
											"\r",
											"if (hosts && hosts.length > 0) {\r",
											"    postman.setNextRequest(\"Add hosts\");\r",
											"} else {\r",
											"    pm.collectionVariables.unset(\"host_list\");\r",
											"    pm.collectionVariables.unset(\"currentHost\");\r",
											"    pm.collectionVariables.unset(\"host_group_list\");\r",
											"    pm.collectionVariables.unset(\"currentHostGroup\");\r",
											"    pm.collectionVariables.unset(\"ip_addr_list\");\r",
											"    pm.collectionVariables.unset(\"currentIpAddr\");\r",
											"    pm.collectionVariables.unset(\"host_templates\");\r",
											"    pm.collectionVariables.unset(\"currentHostTemplate\");\r",
											"    postman.setNextRequest(\"Export configuration\");\r",
											"}\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let hosts = pm.collectionVariables.get(\"host_list\");\r",
											"let ip_addresses = pm.collectionVariables.get(\"ip_addr_list\");\r",
											"let host_groups = pm.collectionVariables.get(\"host_group_list\");\r",
											"let host_templates = pm.collectionVariables.get(\"host_templates\");\r",
											"let hosts_to_be_found = pm.collectionVariables.get(\"hosts_to_be_found\");\r",
											"\r",
											"if(!hosts || hosts.length == 0) {\r",
											"    hosts = [\"central\",\"host_name_1\",\"host_name_2\",\"host_name_3\",\"host_name_4\", \"host_name_5\", \"host_name_6\", \"host_name_7\", \"host_name_8\", \"host_name_9\"];\r",
											"    hosts_to_be_found = [];\r",
											"    host_groups = [pm.collectionVariables.get(\"host_group_name\"), pm.collectionVariables.get(\"host_group_name\"), pm.collectionVariables.get(\"host_group_name\"), pm.collectionVariables.get(\"host_group_name\"), \"\", pm.collectionVariables.get(\"host_group_name\"), pm.collectionVariables.get(\"host_group_name\"), pm.collectionVariables.get(\"host_group_name\"), pm.collectionVariables.get(\"host_group_name\"), pm.collectionVariables.get(\"host_group_name\")];\r",
											"    ip_addresses = [pm.collectionVariables.get(\"server\"), \"127.0.0.0\", \"127.0.0.1\", \"127.0.0.2\", \"127.0.0.3\", \"127.0.0.4\", \"127.0.0.5\", \"127.0.0.6\", \"127.0.0.7\", \"127.0.0.8\"];\r",
											"    host_templates = [\"App-Monitoring-Centreon-Central-custom\", \"generic-active-host-custom\", \"generic-active-host-custom\", \"generic-active-host-custom\", \"generic-active-host-custom\", \"generic-active-host-custom\", \"generic-active-host-custom\", \"generic-active-host-custom\", \"generic-active-host-custom\", \"generic-active-host-custom\"];\r",
											"}\r",
											"\r",
											"let currentHost = hosts.shift();\r",
											"pm.collectionVariables.set(\"currentHost\", currentHost);\r",
											"pm.collectionVariables.set(\"host_list\", hosts);\r",
											"hosts_to_be_found.push(currentHost);\r",
											"pm.collectionVariables.set(\"hosts_to_be_found\", hosts_to_be_found);\r",
											"\r",
											"let currentIpAddr = ip_addresses.shift();\r",
											"pm.collectionVariables.set(\"currentIpAddr\", currentIpAddr);\r",
											"pm.collectionVariables.set(\"ip_addr_list\", ip_addresses);\r",
											"\r",
											"let currentHostGroup = host_groups.shift();\r",
											"pm.collectionVariables.set(\"currentHostGroup\", currentHostGroup);\r",
											"pm.collectionVariables.set(\"host_group_list\", host_groups);\r",
											"\r",
											"let currentTemplate = host_templates.shift();\r",
											"pm.collectionVariables.set(\"currentHostTemplate\", currentTemplate);\r",
											"pm.collectionVariables.set(\"host_templates\", host_templates);\r",
											"\r",
											"let hosts_created = pm.collectionVariables.get(\"hosts_created\");\r",
											"hosts_created++;\r",
											"pm.collectionVariables.set(\"hosts_created\", hosts_created);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"add\",\n  \"object\": \"host\",\n  \"values\": \"{{currentHost}};{{currentHost}};{{currentIpAddr}};{{currentHostTemplate}};central;{{currentHostGroup}};\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Export configuration",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"setTimeout(function(){}, [2000]);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"APPLYCFG\",\n  \"values\": \"Central\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "List all hosts",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"The correct number of hosts has been added.\", function() {\r",
											"    pm.expect(responseJson.meta.total).to.eql(pm.collectionVariables.get(\"number_of_hosts_before_creation\") + pm.collectionVariables.get(\"hosts_created\"));\r",
											"});\r",
											"hosts_to_be_found = pm.collectionVariables.get(\"hosts_to_be_found\");\r",
											"var number_of_hosts_to_be_found = hosts_to_be_found.length;\r",
											"\r",
											"var i = 0, j, hosts_found = 0;\r",
											"while (i < responseJson.meta.total) {\r",
											"    j = 0;\r",
											"    while(j < hosts_to_be_found.length) {\r",
											"        if(responseJson.result[i].name == hosts_to_be_found[j]) {\r",
											"            hosts_to_be_found.remove(hosts_to_be_found[j]);\r",
											"            hosts_found++;\r",
											"        }      \r",
											"    j++;\r",
											"    }\r",
											"    if (responseJson.result[i].name == \"host_name_2\") {\r",
											"        pm.collectionVariables.set(\"host_to_modify_name\", responseJson.result[i].name);\r",
											"        pm.collectionVariables.set(\"host_to_modify_id\", responseJson.result[i].id);\r",
											"    }\r",
											"    if (responseJson.result[i].name == \"host_name_3\") {\r",
											"        pm.collectionVariables.set(\"child_host_name\", responseJson.result[i].name);\r",
											"        pm.collectionVariables.set(\"child_host_id\", responseJson.result[i].id);\r",
											"    }\r",
											"    if (responseJson.result[i].name == \"host_name_4\") {\r",
											"        pm.collectionVariables.set(\"parent_host_name\", responseJson.result[i].name);\r",
											"        pm.collectionVariables.set(\"parent_host_id\", responseJson.result[i].id);\r",
											"    }\r",
											"i++;\r",
											"}\r",
											"\r",
											"if (pm.test(\"All newly created hosts' names have been found.\", function() {\r",
											"    pm.expect(number_of_hosts_to_be_found).to.eql(hosts_found);\r",
											"})) {\r",
											"    pm.collectionVariables.unset(\"number_of_hosts_before_creation\");\r",
											"    pm.collectionVariables.unset(\"hosts_to_be_found\");\r",
											"    pm.collectionVariables.unset(\"hosts_created\");\r",
											"}\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/monitoring/hosts?limit=20",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"monitoring",
										"hosts"
									],
									"query": [
										{
											"key": "limit",
											"value": "20",
											"description": "Number of displayed items per page"
										},
										{
											"key": "page",
											"value": "",
											"description": "Number of the requested page",
											"disabled": true
										},
										{
											"key": "search",
											"value": "",
											"description": "Retrieve only data matching the defined search value.\nSimple search can be done like the following example: ``` search={\"host.name\":\"Central\"} ```\nComplex search can be done with aggregators and operators.\nAvailable search aggregators are:\n  * `$or`\n  * `$and`\n\nAvailable search operators are:\n  * `$eq` → equal\n  * `$neq` → not equal\n  * `$lt` → less than\n  * `$le` → less or equal than\n  * `$gt` → greater than\n  * `$ge` → greater or equal than\n  * `$lk` → like\n  * `$nk` → not like\n  * `$in` → in\n  * `$ni` → not in\n\nExamples without nested aggregators:\n  ```\n  search={\n    \"$or\":[\n      {\"host.name\":{\"$eq\":\"name_1\"}},\n      {\"host.name\":{\"$eq\":\"name_2\"}}\n    ]\n  }\n  ```\n  ```\n  search={\n    \"$and\":[\n      {\"host.address\":{\"$rg\":\"^10\\.0\\.0\\.\\d+$\"}},\n      {\"host.name\":{\"$lk\":\"fr%\"}}\n    ]\n  }\n  ```\n\nExample with nested aggregators:\n  ```\n  search={\n    \"$or\":[\n      {\n        \"$and\":[\n          {\"host.address\":{\"$rg\":\"^10\\.0\\.0\\.\\d+$\"}},\n          {\"host.name\":{\"$lk\":\"fr%\"}}\n        ]\n      },\n      {\n        \"$and\":[\n          {\"host.address\":{\"$rg\":\"^192\\.168\\.0\\.\\d+$\"}},\n          {\"host.name\":{\"$lk\":\"us%\"}}\n        ]\n      }\n    ]\n  }\n  ```\n",
											"disabled": true
										}
									]
								},
								"description": "List all the hosts in real-time monitoring.\n\nThe available parameters to **search** / **sort_by** are:\n\n* host.id\n* host.name\n* host.alias\n* host.address\n* host.state\n* poller.id\n* service.display_name\n* host_group.id\n* host.is_acknowledged\n* host.downtime\n* host.criticality\n"
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/monitoring/hosts?show_service=true&search=cillum quis commodo&limit=20&page=4",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"monitoring",
												"hosts"
											],
											"query": [
												{
													"key": "show_service",
													"value": "true"
												},
												{
													"key": "search",
													"value": "cillum quis commodo"
												},
												{
													"key": "limit",
													"value": "20"
												},
												{
													"key": "page",
													"value": "4"
												}
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"result\": [\n    {\n      \"id\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"alias\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"display_name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"state\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"services\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"poller_id\": 1,\n      \"acknowledged\": false,\n      \"address_ip\": \"127.0.0.1\",\n      \"check_attempt\": 1,\n      \"checked\": true,\n      \"execution_time\": 0.070906,\n      \"icon_image\": \"ppm/operatingsystems-linux-snmp-linux-128.png\",\n      \"icon_image_alt\": \"\",\n      \"last_check\": \"1980-02-02T05:43:34.625Z\",\n      \"last_hard_state_change\": \"2022-08-05T10:43:02.077Z\",\n      \"last_state_change\": \"1948-11-25T13:12:41.089Z\",\n      \"last_time_down\": \"1945-06-23T19:43:00.867Z\",\n      \"last_time_unreachable\": \"2022-07-05T17:47:46.217Z\",\n      \"last_time_up\": \"1952-11-26T09:19:35.799Z\",\n      \"last_update\": \"2002-02-11T22:28:18.621Z\",\n      \"max_check_attempts\": 3,\n      \"output\": \"OK - 127.0.0.1 rta 0.100ms lost 0%\\n\",\n      \"passive_checks\": false,\n      \"state_type\": 0,\n      \"timezone\": \":Europe/Paris\",\n      \"scheduled_downtime_depth\": 0,\n      \"criticality\": 10\n    },\n    {\n      \"id\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"alias\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"display_name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"state\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"services\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"poller_id\": 1,\n      \"acknowledged\": false,\n      \"address_ip\": \"127.0.0.1\",\n      \"check_attempt\": 1,\n      \"checked\": true,\n      \"execution_time\": 0.070906,\n      \"icon_image\": \"ppm/operatingsystems-linux-snmp-linux-128.png\",\n      \"icon_image_alt\": \"\",\n      \"last_check\": \"2014-11-11T02:07:25.915Z\",\n      \"last_hard_state_change\": \"1966-04-15T04:04:02.849Z\",\n      \"last_state_change\": \"1962-12-26T10:26:12.593Z\",\n      \"last_time_down\": \"2004-09-19T21:36:42.944Z\",\n      \"last_time_unreachable\": \"1951-05-24T08:52:34.057Z\",\n      \"last_time_up\": \"1990-04-26T07:43:26.231Z\",\n      \"last_update\": \"1971-01-30T15:22:21.380Z\",\n      \"max_check_attempts\": 3,\n      \"output\": \"OK - 127.0.0.1 rta 0.100ms lost 0%\\n\",\n      \"passive_checks\": false,\n      \"state_type\": 0,\n      \"timezone\": \":Europe/Paris\",\n      \"scheduled_downtime_depth\": 0,\n      \"criticality\": 10\n    }\n  ],\n  \"meta\": {\n    \"page\": 1,\n    \"limit\": 10,\n    \"search\": {},\n    \"sort_by\": {},\n    \"total\": 1\n  }\n}"
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/monitoring/hosts?show_service=true&search=cillum quis commodo&limit=20&page=4",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"monitoring",
												"hosts"
											],
											"query": [
												{
													"key": "show_service",
													"value": "true"
												},
												{
													"key": "search",
													"value": "cillum quis commodo"
												},
												{
													"key": "limit",
													"value": "20"
												},
												{
													"key": "page",
													"value": "4"
												}
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 403,\n  \"message\": \"You are not authorized to access this resource\"\n}"
								},
								{
									"name": "Internal Server Error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/monitoring/hosts?show_service=true&search=cillum quis commodo&limit=20&page=4",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"monitoring",
												"hosts"
											],
											"query": [
												{
													"key": "show_service",
													"value": "true"
												},
												{
													"key": "search",
													"value": "cillum quis commodo"
												},
												{
													"key": "limit",
													"value": "20"
												},
												{
													"key": "page",
													"value": "4"
												}
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 500,\n  \"message\": \"Internal Server Error\"\n}"
								}
							]
						},
						{
							"name": "Set parameters for a specific newly created host",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const parameters = pm.collectionVariables.get(\"list_of_parameters\");\r",
											"\r",
											"pm.test(\"Parameter \" + pm.collectionVariables.get(\"current_parameter\") + \" was updated with \" + pm.collectionVariables.get(\"current_value\"), function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"if (pm.collectionVariables.get(\"name\") && pm.collectionVariables.get(\"name\") != pm.collectionVariables.get(\"host_to_modify_name\")) {\r",
											"    pm.collectionVariables.set(\"host_to_modify_name\", pm.collectionVariables.get(\"name\"));\r",
											"}\r",
											"\r",
											"if (pm.collectionVariables.get(\"alias\") && pm.collectionVariables.get(\"alias\") != pm.collectionVariables.get(\"host_to_modify_alias\")) {\r",
											"    pm.collectionVariables.set(\"host_to_modify_alias\", pm.collectionVariables.get(\"alias\"));\r",
											"}\r",
											"\r",
											"if (parameters && parameters.length > 0) {\r",
											"    postman.setNextRequest(\"Set parameters for a specific newly created host\");\r",
											"} else {\r",
											"    pm.collectionVariables.unset(\"current_parameter\");\r",
											"    pm.collectionVariables.unset(\"current_value\");\r",
											"    pm.collectionVariables.unset(\"list_of_parameters\");\r",
											"    pm.collectionVariables.unset(\"list_of_values\");\r",
											"    postman.setNextRequest(\"Export configuration after host update\");\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let parameters = pm.collectionVariables.get(\"list_of_parameters\");\r",
											"let values = pm.collectionVariables.get(\"list_of_values\");\r",
											"let parameters_to_check = pm.collectionVariables.get(\"parameters_to_check\");\r",
											"\r",
											"if (!parameters || parameters.length == 0) {\r",
											"    parameters = [\"name\", \"alias\", \"timezone\", \"active_checks_enabled\", \"check_period\", \"check_interval\", \"max_check_attempts\", \"retry_check_interval\", \"notifications_enabled\", \"host_notification_options\", \"notification_interval\", \"notification_period\", \"first_notification_delay\", \"recovery_notification_delay\"];\r",
											"    parameters_to_check = [];\r",
											"    pm.collectionVariables.set(\"parameters_to_check\", parameters_to_check);\r",
											"    values = [\"host_to_modify\", \"host_to_modify\", \"Europe/Paris\", 1, pm.collectionVariables.get(\"time_period_name\"), 5, 3, 1, 1, [\"d\",\"u\",\"r\",\"f\"], 5, pm.collectionVariables.get(\"time_period_name\"), 199, 263];\r",
											"}\r",
											"\r",
											"let current_parameter = parameters.shift();\r",
											"pm.collectionVariables.set(\"current_parameter\", current_parameter);\r",
											"pm.collectionVariables.set(\"list_of_parameters\", parameters);\r",
											"let current_value = values.shift();\r",
											"pm.collectionVariables.set(\"current_value\", current_value);\r",
											"pm.collectionVariables.set(\"list_of_values\", values);\r",
											"\r",
											"pm.collectionVariables.set(current_parameter, current_value);\r",
											"\r",
											"parameters_to_check.push(current_parameter);\r",
											"pm.collectionVariables.set(\"parameters_to_check\", parameters_to_check);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\":\"setparam\",\n  \"object\":\"host\",\n  \"values\": \"{{host_to_modify_name}};{{current_parameter}};{{current_value}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Export configuration after host update",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"setTimeout(function(){}, [2000]);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"APPLYCFG\",\n  \"values\": \"Central\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Check the updated host",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"const keys = Object.keys(responseJson);\r",
											"const values = Object.values(responseJson);\r",
											"var parameters_to_check = pm.collectionVariables.get(\"parameters_to_check\");\r",
											"\r",
											"for (let i = 0; i < parameters_to_check.length; i++) {\r",
											"    var j = keys.indexOf(parameters_to_check[i]);\r",
											"    if(j != -1) {\r",
											"        pm.test(\"Parameter \" + parameters_to_check[i] + \" now has value \" + pm.collectionVariables.get(parameters_to_check[i]), function() {pm.expect(pm.collectionVariables.get(parameters_to_check[i])).to.eql(values[j]);}) \r",
											"        pm.collectionVariables.unset(parameters_to_check[i]);\r",
											"    }\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let parameters_to_check = pm.collectionVariables.get(\"parameters_to_check\");\r",
											"\r",
											"console.log(parameters_to_check);\r",
											"if(parameters_to_check) {\r",
											"    for (let i = 0; i < parameters_to_check.length; i++) {\r",
											"        switch (parameters_to_check[i]) {\r",
											"            case 'active_checks_enabled': \r",
											"                pm.collectionVariables.set(\"active_checks\", pm.collectionVariables.get(\"active_checks_enabled\"));\r",
											"                pm.collectionVariables.unset(\"active_checks_enabled\");\r",
											"                parameters_to_check[i] = \"active_checks\";\r",
											"                if(pm.collectionVariables.get(\"active_checks\") == 1){pm.collectionVariables.set(\"active_checks\", true)} else {pm.collectionVariables.set(\"active_checks\", false)}\r",
											"                break;\r",
											"            case 'passive_checks_enabled': \r",
											"                pm.collectionVariables.set(\"passive_checks\", pm.collectionVariables.get(\"passive_checks_enabled\"));\r",
											"                pm.collectionVariables.unset(\"passive_checks_enabled\");\r",
											"                parameters_to_check[i] = \"passive_checks\";\r",
											"                if(pm.collectionVariables.get(\"passive_checks\") == 1){pm.collectionVariables.set(\"passive_checks\", true)} else {pm.collectionVariables.set(\"passive_checks\", false)}\r",
											"                break;\r",
											"            case 'notifications_enabled':\r",
											"                pm.collectionVariables.set(\"notify\", pm.collectionVariables.get(\"notifications_enabled\"));\r",
											"                pm.collectionVariables.unset(\"notifications_enabled\");\r",
											"                parameters_to_check[i] = \"notify\";\r",
											"                if(pm.collectionVariables.get(\"notify\") == 1){pm.collectionVariables.set(\"notify\", true)} else {pm.collectionVariables.set(\"notify\", false)}\r",
											"                break;\r",
											"            case 'host_notification_options':\r",
											"                host_notification_options = pm.collectionVariables.get(\"host_notification_options\");\r",
											"                console.log(host_notification_options);\r",
											"                for(let j = 0; j < host_notification_options.length; j++) {\r",
											"                    switch (host_notification_options[j]) {\r",
											"                        case 'd':\r",
											"                            pm.collectionVariables.set(\"notify_on_down\", true);\r",
											"                            parameters_to_check.push(\"notify_on_down\");\r",
											"                            break;\r",
											"                        case 'u':\r",
											"                            pm.collectionVariables.set(\"notify_on_unreachable\", true);\r",
											"                            parameters_to_check.push(\"notify_on_unreachable\");\r",
											"                            break;\r",
											"                        case 'r':\r",
											"                            pm.collectionVariables.set(\"notify_on_recovery\", true);\r",
											"                            parameters_to_check.push(\"notify_on_recovery\");\r",
											"                            break;\r",
											"                        case 'f':\r",
											"                            pm.collectionVariables.set(\"notify_on_flapping\", true);\r",
											"                            parameters_to_check.push(\"notify_on_flapping\");\r",
											"                            break;                                                                            \r",
											"                    }          \r",
											"                }\r",
											"                pm.collectionVariables.unset(\"host_notification_options\");\r",
											"                parameters_to_check.splice(parameters_to_check.indexOf(\"host_notification_options\"), 1);\r",
											"                break;\r",
											"        }\r",
											"    }\r",
											"}\r",
											"\r",
											"pm.collectionVariables.set(\"parameters_to_check\", parameters_to_check);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/monitoring/hosts/{{host_to_modify_id}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"monitoring",
										"hosts",
										"{{host_to_modify_id}}"
									],
									"query": [
										{
											"key": "page",
											"value": "",
											"description": "Number of the requested page",
											"disabled": true
										},
										{
											"key": "search",
											"value": "",
											"description": "Retrieve only data matching the defined search value.\nSimple search can be done like the following example: ``` search={\"host.name\":\"Central\"} ```\nComplex search can be done with aggregators and operators.\nAvailable search aggregators are:\n  * `$or`\n  * `$and`\n\nAvailable search operators are:\n  * `$eq` → equal\n  * `$neq` → not equal\n  * `$lt` → less than\n  * `$le` → less or equal than\n  * `$gt` → greater than\n  * `$ge` → greater or equal than\n  * `$lk` → like\n  * `$nk` → not like\n  * `$in` → in\n  * `$ni` → not in\n\nExamples without nested aggregators:\n  ```\n  search={\n    \"$or\":[\n      {\"host.name\":{\"$eq\":\"name_1\"}},\n      {\"host.name\":{\"$eq\":\"name_2\"}}\n    ]\n  }\n  ```\n  ```\n  search={\n    \"$and\":[\n      {\"host.address\":{\"$rg\":\"^10\\.0\\.0\\.\\d+$\"}},\n      {\"host.name\":{\"$lk\":\"fr%\"}}\n    ]\n  }\n  ```\n\nExample with nested aggregators:\n  ```\n  search={\n    \"$or\":[\n      {\n        \"$and\":[\n          {\"host.address\":{\"$rg\":\"^10\\.0\\.0\\.\\d+$\"}},\n          {\"host.name\":{\"$lk\":\"fr%\"}}\n        ]\n      },\n      {\n        \"$and\":[\n          {\"host.address\":{\"$rg\":\"^192\\.168\\.0\\.\\d+$\"}},\n          {\"host.name\":{\"$lk\":\"us%\"}}\n        ]\n      }\n    ]\n  }\n  ```\n",
											"disabled": true
										}
									]
								},
								"description": "List all the hosts in real-time monitoring.\n\nThe available parameters to **search** / **sort_by** are:\n\n* host.id\n* host.name\n* host.alias\n* host.address\n* host.state\n* poller.id\n* service.display_name\n* host_group.id\n* host.is_acknowledged\n* host.downtime\n* host.criticality\n"
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/monitoring/hosts?show_service=true&search=cillum quis commodo&limit=20&page=4",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"monitoring",
												"hosts"
											],
											"query": [
												{
													"key": "show_service",
													"value": "true"
												},
												{
													"key": "search",
													"value": "cillum quis commodo"
												},
												{
													"key": "limit",
													"value": "20"
												},
												{
													"key": "page",
													"value": "4"
												}
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"result\": [\n    {\n      \"id\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"alias\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"display_name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"state\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"services\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"poller_id\": 1,\n      \"acknowledged\": false,\n      \"address_ip\": \"127.0.0.1\",\n      \"check_attempt\": 1,\n      \"checked\": true,\n      \"execution_time\": 0.070906,\n      \"icon_image\": \"ppm/operatingsystems-linux-snmp-linux-128.png\",\n      \"icon_image_alt\": \"\",\n      \"last_check\": \"1980-02-02T05:43:34.625Z\",\n      \"last_hard_state_change\": \"2022-08-05T10:43:02.077Z\",\n      \"last_state_change\": \"1948-11-25T13:12:41.089Z\",\n      \"last_time_down\": \"1945-06-23T19:43:00.867Z\",\n      \"last_time_unreachable\": \"2022-07-05T17:47:46.217Z\",\n      \"last_time_up\": \"1952-11-26T09:19:35.799Z\",\n      \"last_update\": \"2002-02-11T22:28:18.621Z\",\n      \"max_check_attempts\": 3,\n      \"output\": \"OK - 127.0.0.1 rta 0.100ms lost 0%\\n\",\n      \"passive_checks\": false,\n      \"state_type\": 0,\n      \"timezone\": \":Europe/Paris\",\n      \"scheduled_downtime_depth\": 0,\n      \"criticality\": 10\n    },\n    {\n      \"id\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"alias\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"display_name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"state\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"services\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"poller_id\": 1,\n      \"acknowledged\": false,\n      \"address_ip\": \"127.0.0.1\",\n      \"check_attempt\": 1,\n      \"checked\": true,\n      \"execution_time\": 0.070906,\n      \"icon_image\": \"ppm/operatingsystems-linux-snmp-linux-128.png\",\n      \"icon_image_alt\": \"\",\n      \"last_check\": \"2014-11-11T02:07:25.915Z\",\n      \"last_hard_state_change\": \"1966-04-15T04:04:02.849Z\",\n      \"last_state_change\": \"1962-12-26T10:26:12.593Z\",\n      \"last_time_down\": \"2004-09-19T21:36:42.944Z\",\n      \"last_time_unreachable\": \"1951-05-24T08:52:34.057Z\",\n      \"last_time_up\": \"1990-04-26T07:43:26.231Z\",\n      \"last_update\": \"1971-01-30T15:22:21.380Z\",\n      \"max_check_attempts\": 3,\n      \"output\": \"OK - 127.0.0.1 rta 0.100ms lost 0%\\n\",\n      \"passive_checks\": false,\n      \"state_type\": 0,\n      \"timezone\": \":Europe/Paris\",\n      \"scheduled_downtime_depth\": 0,\n      \"criticality\": 10\n    }\n  ],\n  \"meta\": {\n    \"page\": 1,\n    \"limit\": 10,\n    \"search\": {},\n    \"sort_by\": {},\n    \"total\": 1\n  }\n}"
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/monitoring/hosts?show_service=true&search=cillum quis commodo&limit=20&page=4",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"monitoring",
												"hosts"
											],
											"query": [
												{
													"key": "show_service",
													"value": "true"
												},
												{
													"key": "search",
													"value": "cillum quis commodo"
												},
												{
													"key": "limit",
													"value": "20"
												},
												{
													"key": "page",
													"value": "4"
												}
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 403,\n  \"message\": \"You are not authorized to access this resource\"\n}"
								},
								{
									"name": "Internal Server Error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/monitoring/hosts?show_service=true&search=cillum quis commodo&limit=20&page=4",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"monitoring",
												"hosts"
											],
											"query": [
												{
													"key": "show_service",
													"value": "true"
												},
												{
													"key": "search",
													"value": "cillum quis commodo"
												},
												{
													"key": "limit",
													"value": "20"
												},
												{
													"key": "page",
													"value": "4"
												}
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 500,\n  \"message\": \"Internal Server Error\"\n}"
								}
							]
						},
						{
							"name": "Set parent hosts to chosen host",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"setparent\",\n  \"object\": \"htpl\",\n  \"values\": \"{{child_host_name}};{{parent_host_name}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get parent hosts of dedicated host",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();",
											"",
											"try {",
											"    var i = 0;",
											"    while (i < responseJson.result.length) {",
											"        if (pm.collectionVariables.get(\"parent_host_name\") == responseJson.result[i].name) {",
											"            pm.test(\"Parent host has been found for this child host\", function() {",
											"                pm.expect(responseJson.result[i].id).to.eql(pm.collectionVariables.get(\"parent_host_id\"));",
											"                pm.expect(responseJson.result[i].name).to.eql(pm.collectionVariables.get(\"parent_host_name\"));",
											"            })",
											"            break;",
											"        }",
											"        i++;",
											"    }",
											"    if (i == parentData.length)",
											"        tests[\"host_name2 was found\"] = false;",
											"} catch (e) {}",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\":\"getparent\",\n  \"object\":\"host\",\n  \"values\":\"{{child_host_name}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Edge Cases",
					"item": [
						{
							"name": "Parent Host Down Consequences on Child Host",
							"item": [
								{
									"name": "Add downtime on parent host",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var moment = require('moment');",
													"datetime_start = moment().format(\"YYYY-MM-DDTHH:mm:ssZ\");",
													"pm.collectionVariables.set(\"start_time\", datetime_start);",
													"datetime_end = moment().add(1, 'hours').format(\"YYYY-MM-DDTHH:mm:ssZ\");",
													"pm.collectionVariables.set(\"end_time\", datetime_end);",
													"",
													"pm.collectionVariables.set(\"downtime_comment\", \"Ceci est un commentaire.\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "centreon-auth-token",
												"value": "{{token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"action\": \"add\",\n  \"object\": \"RTDOWNTIME\",\n  \"values\": \"HOST;{{parent_host_id}};{{start_time}};{{end_time}};1;3600;Test Downtime Parent-Enfant;1\"\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
											"protocol": "{{protocol}}",
											"host": [
												"{{server}}"
											],
											"path": [
												"centreon",
												"api",
												"index.php"
											],
											"query": [
												{
													"key": "action",
													"value": "action"
												},
												{
													"key": "object",
													"value": "centreon_clapi"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Show active host downtimes for child host",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const responseJson = pm.response.json();",
													"",
													"try {",
													"    var i = 0;",
													"    while (i < responseJson.result.length) {",
													"        if (pm.collectionVariables.get(\"start_time\") == responseJson.result[i].start_time)",
													"        {",
													"            if (pm.test(\"Features of the set downtime have been successfully implemented.\", function() {",
													"                pm.expect(pm.collectionVariables.get(\"start_time\")).to.eql(responseJson.result[i].start_time);",
													"                pm.expect(pm.collectionVariables.get(\"end_time\")).to.eql(responseJson.result[i].end_time);",
													"                pm.expect(pm.collectionVariables.get(\"downtime_comment\")).to.eql(responseJson.result[i].comment.replace(/[\\'\"]+/g, ''));",
													"            })) ",
													"            {",
													"                pm.collectionVariables.set(\"downtime_id\", responseJson.result[i].id);",
													"                pm.collectionVariables.unset(start_time);",
													"                pm.collectionVariables.unset(end_time);",
													"                pm.collectionVariables.unset(downtime_comment);",
													"            }",
													"            break;",
													"        }",
													"        i++;",
													"    }",
													"    if (i == responseJson.result.length) {",
													"        pm.test(\"Added realtime downtime was found\", function() {",
													"            false;",
													"        });",
													"    }",
													"} ",
													"catch (e) {}"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "centreon-auth-token",
												"value": "{{token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{baseUrl}}/monitoring/hosts/{{child_host_id}}/downtimes",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"monitoring",
												"hosts",
												"{{child_host_id}}",
												"downtimes"
											]
										}
									},
									"response": []
								},
								{
									"name": "Cancel host downtime Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "centreon-auth-token",
												"value": "{{token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{baseUrl}}/monitoring/downtimes/{{downtime_id}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"monitoring",
												"downtimes",
												"{{downtime_id}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "API Cloud",
			"item": [
				{
					"name": "Login with Cloud Admin QA",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Login successful\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const responseJson = pm.response.json();\r",
									"pm.test(\"Account displayed in response corresponds to credentials\", function (){\r",
									"    pm.expect(responseJson.contact.alias).to.eql(pm.collectionVariables.get('api_login'));\r",
									"});\r",
									"\r",
									"pm.collectionVariables.set(\"token\", responseJson.security.token);\r",
									"pm.collectionVariables.set(\"user\", responseJson.contact.alias);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"cloud_admin_qa\",\r\n      \"password\": \"y@pP@0A@cKzb\"\r\n    }\r\n  }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrlCloud}}/latest/login",
							"host": [
								"{{baseUrlCloud}}"
							],
							"path": [
								"latest",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login with True Admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Login successful\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const responseJson = pm.response.json();\r",
									"pm.test(\"Account displayed in response corresponds to credentials\", function (){\r",
									"    pm.expect(responseJson.contact.alias).to.eql(pm.collectionVariables.get('api_login'));\r",
									"});\r",
									"\r",
									"pm.collectionVariables.set(\"token\", responseJson.security.token);\r",
									"pm.collectionVariables.set(\"user\", responseJson.contact.alias);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"security\": {\r\n    \"credentials\": {\r\n      \"login\": \"qa_admin\",\r\n      \"password\": \"!PwSE@Gr9JO8\"\r\n    }\r\n  }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrlCloud}}/latest/login",
							"host": [
								"{{baseUrlCloud}}"
							],
							"path": [
								"latest",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add host",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "centreon-auth-token",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"action\": \"add\",\n  \"object\": \"host\",\n  \"values\": \"host_test_api5;host_test_api;127.0.0.1;generic-active-host-custom;central;;\"\n}"
						},
						"url": {
							"raw": "{{baseUrlCloud}}/index.php?action=action&object=centreon_clapi",
							"host": [
								"{{baseUrlCloud}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "action",
									"value": "action"
								},
								{
									"key": "object",
									"value": "centreon_clapi"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Host deletion",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"del\",\r\n  \"object\": \"host\",\r\n  \"values\": \"host_test_api5\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrlCloud}}/index.php?action=action&object=centreon_clapi",
							"host": [
								"{{baseUrlCloud}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "action",
									"value": "action"
								},
								{
									"key": "object",
									"value": "centreon_clapi"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List all hosts before host creation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{baseUrlCloud}}/latest/monitoring/hosts",
							"host": [
								"{{baseUrlCloud}}"
							],
							"path": [
								"latest",
								"monitoring",
								"hosts"
							],
							"query": [
								{
									"key": "page",
									"value": "",
									"description": "Number of the requested page",
									"disabled": true
								},
								{
									"key": "search",
									"value": "",
									"description": "Retrieve only data matching the defined search value.\nSimple search can be done like the following example: ``` search={\"host.name\":\"Central\"} ```\nComplex search can be done with aggregators and operators.\nAvailable search aggregators are:\n  * `$or`\n  * `$and`\n\nAvailable search operators are:\n  * `$eq` → equal\n  * `$neq` → not equal\n  * `$lt` → less than\n  * `$le` → less or equal than\n  * `$gt` → greater than\n  * `$ge` → greater or equal than\n  * `$lk` → like\n  * `$nk` → not like\n  * `$in` → in\n  * `$ni` → not in\n\nExamples without nested aggregators:\n  ```\n  search={\n    \"$or\":[\n      {\"host.name\":{\"$eq\":\"name_1\"}},\n      {\"host.name\":{\"$eq\":\"name_2\"}}\n    ]\n  }\n  ```\n  ```\n  search={\n    \"$and\":[\n      {\"host.address\":{\"$rg\":\"^10\\.0\\.0\\.\\d+$\"}},\n      {\"host.name\":{\"$lk\":\"fr%\"}}\n    ]\n  }\n  ```\n\nExample with nested aggregators:\n  ```\n  search={\n    \"$or\":[\n      {\n        \"$and\":[\n          {\"host.address\":{\"$rg\":\"^10\\.0\\.0\\.\\d+$\"}},\n          {\"host.name\":{\"$lk\":\"fr%\"}}\n        ]\n      },\n      {\n        \"$and\":[\n          {\"host.address\":{\"$rg\":\"^192\\.168\\.0\\.\\d+$\"}},\n          {\"host.name\":{\"$lk\":\"us%\"}}\n        ]\n      }\n    ]\n  }\n  ```\n",
									"disabled": true
								}
							]
						},
						"description": "List all the hosts in real-time monitoring.\n\nThe available parameters to **search** / **sort_by** are:\n\n* host.id\n* host.name\n* host.alias\n* host.address\n* host.state\n* poller.id\n* service.display_name\n* host_group.id\n* host.is_acknowledged\n* host.downtime\n* host.criticality\n"
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "X-AUTH-TOKEN",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/monitoring/hosts?show_service=true&search=cillum quis commodo&limit=20&page=4",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"monitoring",
										"hosts"
									],
									"query": [
										{
											"key": "show_service",
											"value": "true"
										},
										{
											"key": "search",
											"value": "cillum quis commodo"
										},
										{
											"key": "limit",
											"value": "20"
										},
										{
											"key": "page",
											"value": "4"
										}
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"result\": [\n    {\n      \"id\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"alias\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"display_name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"state\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"services\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"poller_id\": 1,\n      \"acknowledged\": false,\n      \"address_ip\": \"127.0.0.1\",\n      \"check_attempt\": 1,\n      \"checked\": true,\n      \"execution_time\": 0.070906,\n      \"icon_image\": \"ppm/operatingsystems-linux-snmp-linux-128.png\",\n      \"icon_image_alt\": \"\",\n      \"last_check\": \"1980-02-02T05:43:34.625Z\",\n      \"last_hard_state_change\": \"2022-08-05T10:43:02.077Z\",\n      \"last_state_change\": \"1948-11-25T13:12:41.089Z\",\n      \"last_time_down\": \"1945-06-23T19:43:00.867Z\",\n      \"last_time_unreachable\": \"2022-07-05T17:47:46.217Z\",\n      \"last_time_up\": \"1952-11-26T09:19:35.799Z\",\n      \"last_update\": \"2002-02-11T22:28:18.621Z\",\n      \"max_check_attempts\": 3,\n      \"output\": \"OK - 127.0.0.1 rta 0.100ms lost 0%\\n\",\n      \"passive_checks\": false,\n      \"state_type\": 0,\n      \"timezone\": \":Europe/Paris\",\n      \"scheduled_downtime_depth\": 0,\n      \"criticality\": 10\n    },\n    {\n      \"id\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"alias\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"display_name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"state\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"services\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"poller_id\": 1,\n      \"acknowledged\": false,\n      \"address_ip\": \"127.0.0.1\",\n      \"check_attempt\": 1,\n      \"checked\": true,\n      \"execution_time\": 0.070906,\n      \"icon_image\": \"ppm/operatingsystems-linux-snmp-linux-128.png\",\n      \"icon_image_alt\": \"\",\n      \"last_check\": \"2014-11-11T02:07:25.915Z\",\n      \"last_hard_state_change\": \"1966-04-15T04:04:02.849Z\",\n      \"last_state_change\": \"1962-12-26T10:26:12.593Z\",\n      \"last_time_down\": \"2004-09-19T21:36:42.944Z\",\n      \"last_time_unreachable\": \"1951-05-24T08:52:34.057Z\",\n      \"last_time_up\": \"1990-04-26T07:43:26.231Z\",\n      \"last_update\": \"1971-01-30T15:22:21.380Z\",\n      \"max_check_attempts\": 3,\n      \"output\": \"OK - 127.0.0.1 rta 0.100ms lost 0%\\n\",\n      \"passive_checks\": false,\n      \"state_type\": 0,\n      \"timezone\": \":Europe/Paris\",\n      \"scheduled_downtime_depth\": 0,\n      \"criticality\": 10\n    }\n  ],\n  \"meta\": {\n    \"page\": 1,\n    \"limit\": 10,\n    \"search\": {},\n    \"sort_by\": {},\n    \"total\": 1\n  }\n}"
						},
						{
							"name": "Forbidden",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "X-AUTH-TOKEN",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/monitoring/hosts?show_service=true&search=cillum quis commodo&limit=20&page=4",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"monitoring",
										"hosts"
									],
									"query": [
										{
											"key": "show_service",
											"value": "true"
										},
										{
											"key": "search",
											"value": "cillum quis commodo"
										},
										{
											"key": "limit",
											"value": "20"
										},
										{
											"key": "page",
											"value": "4"
										}
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"code\": 403,\n  \"message\": \"You are not authorized to access this resource\"\n}"
						},
						{
							"name": "Internal Server Error",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "X-AUTH-TOKEN",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/monitoring/hosts?show_service=true&search=cillum quis commodo&limit=20&page=4",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"monitoring",
										"hosts"
									],
									"query": [
										{
											"key": "show_service",
											"value": "true"
										},
										{
											"key": "search",
											"value": "cillum quis commodo"
										},
										{
											"key": "limit",
											"value": "20"
										},
										{
											"key": "page",
											"value": "4"
										}
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"code\": 500,\n  \"message\": \"Internal Server Error\"\n}"
						}
					]
				},
				{
					"name": "List all users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"responseJson = pm.response.json();\r",
									"pm.collectionVariables.set(\"number_of_users\", responseJson.result.length);\r",
									"var i = 0;\r",
									"while (i < pm.collectionVariables.get(\"number_of_users\")) {\r",
									"    if(responseJson.result[i].id == pm.collectionVariables.get(\"current_user_id\")) {\r",
									"        pm.test(\"Current admin user is registered in the list.\", function() {\r",
									"            pm.expect(pm.collectionVariables.get(\"current_user_id\")).to.eql(responseJson.result[i].id);\r",
									"            pm.expect(pm.collectionVariables.get(\"api_login\")).to.eql(responseJson.result[i].alias);\r",
									"            pm.expect(pm.collectionVariables.get(\"current_user_email\")).to.eql(responseJson.result[i].email);\r",
									"            pm.expect(responseJson.result[i].is_admin).to.eql(true);\r",
									"        });\r",
									"    }\r",
									"    i++;\r",
									"}\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrlCloud}}/latest/configuration/users",
							"host": [
								"{{baseUrlCloud}}"
							],
							"path": [
								"latest",
								"configuration",
								"users"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Host category management",
			"item": [
				{
					"name": "Critical Path",
					"item": [
						{
							"name": "List all host categories",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/configuration/hosts/categories",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configuration",
										"hosts",
										"categories"
									],
									"variable": [
										{
											"key": "protocol",
											"value": "{{protocol}}",
											"description": "HTTP schema (This can only be one of http,https)"
										},
										{
											"key": "server",
											"value": "{{server}}",
											"description": "IP address or hostname of Centreon server"
										},
										{
											"key": "port",
											"value": "{{port}}",
											"description": "Port used by HTTP server"
										},
										{
											"key": "version",
											"value": "{{version}}",
											"description": "Version of the API"
										}
									]
								},
								"description": "List of all host category configurations\n"
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/configuration/hosts/categories",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"configuration",
												"hosts",
												"categories"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"result\": [\n    {\n      \"id\": 1,\n      \"name\": \"host-category\",\n      \"alias\": \"host-category\",\n      \"is_activated\": false,\n      \"comments\": \"minim laborum\"\n    },\n    {\n      \"id\": 1,\n      \"name\": \"host-category\",\n      \"alias\": \"host-category\",\n      \"is_activated\": true,\n      \"comments\": \"nisi Ut velit id\"\n    }\n  ],\n  \"meta\": {\n    \"page\": 1,\n    \"limit\": 10,\n    \"search\": {},\n    \"sort_by\": {},\n    \"total\": 1\n  }\n}"
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/configuration/hosts/categories",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"configuration",
												"hosts",
												"categories"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 403,\n  \"message\": \"You are not authorized to access this resource\"\n}"
								},
								{
									"name": "Internal Server Error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/configuration/hosts/categories",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"configuration",
												"hosts",
												"categories"
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 500,\n  \"message\": \"Internal Server Error\"\n}"
								}
							]
						},
						{
							"name": "Add host category",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"add\",\n  \"object\": \"hc\",\n  \"values\": \"host_category_name;host_category_alias\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Set members to newly created host category",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Status code is 200\"] = responseCode.code === 200;"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"setmember\",\n  \"object\": \"hc\",\n  \"values\": \"{{hc_name}};{{host_name}}|{{host_name2}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Edge Cases",
					"item": []
				}
			]
		},
		{
			"name": "Downtime Management",
			"item": [
				{
					"name": "Host Downtime Management",
					"item": [
						{
							"name": "Critical Path",
							"item": [
								{
									"name": "List all hosts before downtime creation",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"const responseJson = pm.response.json();\r",
													"\r",
													"var random = Math.floor(Math.random() * responseJson.meta.total);\r",
													"console.log(random);\r",
													"pm.collectionVariables.set(\"downtime_host_name\", responseJson.result[random].name);\r",
													"pm.collectionVariables.set(\"downtime_host_id\", responseJson.result[random].id);\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/monitoring/hosts?limit=20",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"monitoring",
												"hosts"
											],
											"query": [
												{
													"key": "limit",
													"value": "20",
													"description": "Number of displayed items per page"
												},
												{
													"key": "page",
													"value": "",
													"description": "Number of the requested page",
													"disabled": true
												},
												{
													"key": "search",
													"value": "",
													"description": "Retrieve only data matching the defined search value.\nSimple search can be done like the following example: ``` search={\"host.name\":\"Central\"} ```\nComplex search can be done with aggregators and operators.\nAvailable search aggregators are:\n  * `$or`\n  * `$and`\n\nAvailable search operators are:\n  * `$eq` → equal\n  * `$neq` → not equal\n  * `$lt` → less than\n  * `$le` → less or equal than\n  * `$gt` → greater than\n  * `$ge` → greater or equal than\n  * `$lk` → like\n  * `$nk` → not like\n  * `$in` → in\n  * `$ni` → not in\n\nExamples without nested aggregators:\n  ```\n  search={\n    \"$or\":[\n      {\"host.name\":{\"$eq\":\"name_1\"}},\n      {\"host.name\":{\"$eq\":\"name_2\"}}\n    ]\n  }\n  ```\n  ```\n  search={\n    \"$and\":[\n      {\"host.address\":{\"$rg\":\"^10\\.0\\.0\\.\\d+$\"}},\n      {\"host.name\":{\"$lk\":\"fr%\"}}\n    ]\n  }\n  ```\n\nExample with nested aggregators:\n  ```\n  search={\n    \"$or\":[\n      {\n        \"$and\":[\n          {\"host.address\":{\"$rg\":\"^10\\.0\\.0\\.\\d+$\"}},\n          {\"host.name\":{\"$lk\":\"fr%\"}}\n        ]\n      },\n      {\n        \"$and\":[\n          {\"host.address\":{\"$rg\":\"^192\\.168\\.0\\.\\d+$\"}},\n          {\"host.name\":{\"$lk\":\"us%\"}}\n        ]\n      }\n    ]\n  }\n  ```\n",
													"disabled": true
												}
											]
										},
										"description": "List all the hosts in real-time monitoring.\n\nThe available parameters to **search** / **sort_by** are:\n\n* host.id\n* host.name\n* host.alias\n* host.address\n* host.state\n* poller.id\n* service.display_name\n* host_group.id\n* host.is_acknowledged\n* host.downtime\n* host.criticality\n"
									},
									"response": [
										{
											"name": "OK",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "X-AUTH-TOKEN",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/monitoring/hosts?show_service=true&search=cillum quis commodo&limit=20&page=4",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"monitoring",
														"hosts"
													],
													"query": [
														{
															"key": "show_service",
															"value": "true"
														},
														{
															"key": "search",
															"value": "cillum quis commodo"
														},
														{
															"key": "limit",
															"value": "20"
														},
														{
															"key": "page",
															"value": "4"
														}
													],
													"variable": [
														{
															"key": "protocol",
															"value": "{{protocol}}",
															"description": "HTTP schema (This can only be one of http,https)"
														},
														{
															"key": "server",
															"value": "{{server}}",
															"description": "IP address or hostname of Centreon server"
														},
														{
															"key": "port",
															"value": "{{port}}",
															"description": "Port used by HTTP server"
														},
														{
															"key": "version",
															"value": "{{version}}",
															"description": "Version of the API"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"result\": [\n    {\n      \"id\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"alias\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"display_name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"state\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"services\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"poller_id\": 1,\n      \"acknowledged\": false,\n      \"address_ip\": \"127.0.0.1\",\n      \"check_attempt\": 1,\n      \"checked\": true,\n      \"execution_time\": 0.070906,\n      \"icon_image\": \"ppm/operatingsystems-linux-snmp-linux-128.png\",\n      \"icon_image_alt\": \"\",\n      \"last_check\": \"1980-02-02T05:43:34.625Z\",\n      \"last_hard_state_change\": \"2022-08-05T10:43:02.077Z\",\n      \"last_state_change\": \"1948-11-25T13:12:41.089Z\",\n      \"last_time_down\": \"1945-06-23T19:43:00.867Z\",\n      \"last_time_unreachable\": \"2022-07-05T17:47:46.217Z\",\n      \"last_time_up\": \"1952-11-26T09:19:35.799Z\",\n      \"last_update\": \"2002-02-11T22:28:18.621Z\",\n      \"max_check_attempts\": 3,\n      \"output\": \"OK - 127.0.0.1 rta 0.100ms lost 0%\\n\",\n      \"passive_checks\": false,\n      \"state_type\": 0,\n      \"timezone\": \":Europe/Paris\",\n      \"scheduled_downtime_depth\": 0,\n      \"criticality\": 10\n    },\n    {\n      \"id\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"alias\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"display_name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"state\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"services\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"poller_id\": 1,\n      \"acknowledged\": false,\n      \"address_ip\": \"127.0.0.1\",\n      \"check_attempt\": 1,\n      \"checked\": true,\n      \"execution_time\": 0.070906,\n      \"icon_image\": \"ppm/operatingsystems-linux-snmp-linux-128.png\",\n      \"icon_image_alt\": \"\",\n      \"last_check\": \"2014-11-11T02:07:25.915Z\",\n      \"last_hard_state_change\": \"1966-04-15T04:04:02.849Z\",\n      \"last_state_change\": \"1962-12-26T10:26:12.593Z\",\n      \"last_time_down\": \"2004-09-19T21:36:42.944Z\",\n      \"last_time_unreachable\": \"1951-05-24T08:52:34.057Z\",\n      \"last_time_up\": \"1990-04-26T07:43:26.231Z\",\n      \"last_update\": \"1971-01-30T15:22:21.380Z\",\n      \"max_check_attempts\": 3,\n      \"output\": \"OK - 127.0.0.1 rta 0.100ms lost 0%\\n\",\n      \"passive_checks\": false,\n      \"state_type\": 0,\n      \"timezone\": \":Europe/Paris\",\n      \"scheduled_downtime_depth\": 0,\n      \"criticality\": 10\n    }\n  ],\n  \"meta\": {\n    \"page\": 1,\n    \"limit\": 10,\n    \"search\": {},\n    \"sort_by\": {},\n    \"total\": 1\n  }\n}"
										},
										{
											"name": "Forbidden",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "X-AUTH-TOKEN",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/monitoring/hosts?show_service=true&search=cillum quis commodo&limit=20&page=4",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"monitoring",
														"hosts"
													],
													"query": [
														{
															"key": "show_service",
															"value": "true"
														},
														{
															"key": "search",
															"value": "cillum quis commodo"
														},
														{
															"key": "limit",
															"value": "20"
														},
														{
															"key": "page",
															"value": "4"
														}
													],
													"variable": [
														{
															"key": "protocol",
															"value": "{{protocol}}",
															"description": "HTTP schema (This can only be one of http,https)"
														},
														{
															"key": "server",
															"value": "{{server}}",
															"description": "IP address or hostname of Centreon server"
														},
														{
															"key": "port",
															"value": "{{port}}",
															"description": "Port used by HTTP server"
														},
														{
															"key": "version",
															"value": "{{version}}",
															"description": "Version of the API"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"code\": 403,\n  \"message\": \"You are not authorized to access this resource\"\n}"
										},
										{
											"name": "Internal Server Error",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "X-AUTH-TOKEN",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/monitoring/hosts?show_service=true&search=cillum quis commodo&limit=20&page=4",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"monitoring",
														"hosts"
													],
													"query": [
														{
															"key": "show_service",
															"value": "true"
														},
														{
															"key": "search",
															"value": "cillum quis commodo"
														},
														{
															"key": "limit",
															"value": "20"
														},
														{
															"key": "page",
															"value": "4"
														}
													],
													"variable": [
														{
															"key": "protocol",
															"value": "{{protocol}}",
															"description": "HTTP schema (This can only be one of http,https)"
														},
														{
															"key": "server",
															"value": "{{server}}",
															"description": "IP address or hostname of Centreon server"
														},
														{
															"key": "port",
															"value": "{{port}}",
															"description": "Port used by HTTP server"
														},
														{
															"key": "version",
															"value": "{{version}}",
															"description": "Version of the API"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"code\": 500,\n  \"message\": \"Internal Server Error\"\n}"
										}
									]
								},
								{
									"name": "Add downtime on selected host",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var moment = require('moment');",
													"datetime_start = moment().format(\"YYYY-MM-DDTHH:mm:ssZ\");",
													"pm.collectionVariables.set(\"start_time\", datetime_start);",
													"datetime_end = moment().add(2, 'hours').format(\"YYYY-MM-DDTHH:mm:ssZ\");",
													"pm.collectionVariables.set(\"end_time\", datetime_end);",
													"",
													"pm.collectionVariables.set(\"downtime_comment\", \"Ceci est un commentaire.\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "centreon-auth-token",
												"value": "{{token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"start_time\": \"{{start_time}}\",\n    \"end_time\": \"{{end_time}}\",\n    \"is_fixed\": true,\n    \"duration\": 3600,\n    \"author_id\": {{current_user_id}},\n    \"comment\": \"{{downtime_comment}}\",\n    \"with_services\": true\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/monitoring/hosts/{{downtime_host_id}}/downtimes",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"monitoring",
												"hosts",
												"{{downtime_host_id}}",
												"downtimes"
											]
										}
									},
									"response": []
								},
								{
									"name": "Show active host downtimes",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const responseJson = pm.response.json();",
													"",
													"try {",
													"    var i = 0;",
													"    while (i < responseJson.result.length) {",
													"        if (pm.collectionVariables.get(\"start_time\") == responseJson.result[i].start_time)",
													"        {",
													"            if (pm.test(\"Features of the set downtime have been successfully implemented.\", function() {",
													"                pm.expect(pm.collectionVariables.get(\"start_time\")).to.eql(responseJson.result[i].start_time);",
													"                pm.expect(pm.collectionVariables.get(\"end_time\")).to.eql(responseJson.result[i].end_time);",
													"                pm.expect(pm.collectionVariables.get(\"downtime_comment\")).to.eql(responseJson.result[i].comment.replace(/[\\'\"]+/g, ''));",
													"            })) ",
													"            {",
													"                pm.collectionVariables.set(\"downtime_id\", responseJson.result[i].id);",
													"                pm.collectionVariables.unset(start_time);",
													"                pm.collectionVariables.unset(end_time);",
													"                pm.collectionVariables.unset(downtime_comment);",
													"            }",
													"            break;",
													"        }",
													"        i++;",
													"    }",
													"    if (i == responseJson.result.length) {",
													"        pm.test(\"Added realtime downtime was found\", function() {",
													"            false;",
													"        });",
													"    }",
													"} ",
													"catch (e) {}"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "centreon-auth-token",
												"value": "{{token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{baseUrl}}/monitoring/hosts/{{downtime_host_id}}/downtimes",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"monitoring",
												"hosts",
												"{{downtime_host_id}}",
												"downtimes"
											]
										}
									},
									"response": []
								},
								{
									"name": "Cancel host downtime",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "centreon-auth-token",
												"value": "{{token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{baseUrl}}/monitoring/downtimes/{{downtime_id}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"monitoring",
												"downtimes",
												"{{downtime_id}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Edge Cases",
							"item": []
						}
					]
				},
				{
					"name": "Service Downtime Management",
					"item": [
						{
							"name": "Critical Path",
							"item": [
								{
									"name": "List all services and select a random page",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"const responseJson = pm.response.json();\r",
													"var number_of_pages = Math.floor(responseJson.meta.total / responseJson.meta.limit) + 1;\r",
													"console.log(number_of_pages);\r",
													"var random_page = Math.floor(Math.random() * number_of_pages) + 1;\r",
													"console.log(random_page);\r",
													"pm.collectionVariables.set(\"random_page\", random_page);\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/monitoring/services",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"monitoring",
												"services"
											],
											"query": [
												{
													"key": "search",
													"value": "",
													"description": "Retrieve only data matching the defined search value.\nSimple search can be done like the following example: ``` search={\"host.name\":\"Central\"} ```\nComplex search can be done with aggregators and operators.\nAvailable search aggregators are:\n  * `$or`\n  * `$and`\n\nAvailable search operators are:\n  * `$eq` → equal\n  * `$neq` → not equal\n  * `$lt` → less than\n  * `$le` → less or equal than\n  * `$gt` → greater than\n  * `$ge` → greater or equal than\n  * `$lk` → like\n  * `$nk` → not like\n  * `$in` → in\n  * `$ni` → not in\n\nExamples without nested aggregators:\n  ```\n  search={\n    \"$or\":[\n      {\"host.name\":{\"$eq\":\"name_1\"}},\n      {\"host.name\":{\"$eq\":\"name_2\"}}\n    ]\n  }\n  ```\n  ```\n  search={\n    \"$and\":[\n      {\"host.address\":{\"$rg\":\"^10\\.0\\.0\\.\\d+$\"}},\n      {\"host.name\":{\"$lk\":\"fr%\"}}\n    ]\n  }\n  ```\n\nExample with nested aggregators:\n  ```\n  search={\n    \"$or\":[\n      {\n        \"$and\":[\n          {\"host.address\":{\"$rg\":\"^10\\.0\\.0\\.\\d+$\"}},\n          {\"host.name\":{\"$lk\":\"fr%\"}}\n        ]\n      },\n      {\n        \"$and\":[\n          {\"host.address\":{\"$rg\":\"^192\\.168\\.0\\.\\d+$\"}},\n          {\"host.name\":{\"$lk\":\"us%\"}}\n        ]\n      }\n    ]\n  }\n  ```\n",
													"disabled": true
												}
											]
										},
										"description": "List all the hosts in real-time monitoring.\n\nThe available parameters to **search** / **sort_by** are:\n\n* host.id\n* host.name\n* host.alias\n* host.address\n* host.state\n* poller.id\n* service.display_name\n* host_group.id\n* host.is_acknowledged\n* host.downtime\n* host.criticality\n"
									},
									"response": [
										{
											"name": "OK",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "X-AUTH-TOKEN",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/monitoring/hosts?show_service=true&search=cillum quis commodo&limit=20&page=4",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"monitoring",
														"hosts"
													],
													"query": [
														{
															"key": "show_service",
															"value": "true"
														},
														{
															"key": "search",
															"value": "cillum quis commodo"
														},
														{
															"key": "limit",
															"value": "20"
														},
														{
															"key": "page",
															"value": "4"
														}
													],
													"variable": [
														{
															"key": "protocol",
															"value": "{{protocol}}",
															"description": "HTTP schema (This can only be one of http,https)"
														},
														{
															"key": "server",
															"value": "{{server}}",
															"description": "IP address or hostname of Centreon server"
														},
														{
															"key": "port",
															"value": "{{port}}",
															"description": "Port used by HTTP server"
														},
														{
															"key": "version",
															"value": "{{version}}",
															"description": "Version of the API"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"result\": [\n    {\n      \"id\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"alias\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"display_name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"state\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"services\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"poller_id\": 1,\n      \"acknowledged\": false,\n      \"address_ip\": \"127.0.0.1\",\n      \"check_attempt\": 1,\n      \"checked\": true,\n      \"execution_time\": 0.070906,\n      \"icon_image\": \"ppm/operatingsystems-linux-snmp-linux-128.png\",\n      \"icon_image_alt\": \"\",\n      \"last_check\": \"1980-02-02T05:43:34.625Z\",\n      \"last_hard_state_change\": \"2022-08-05T10:43:02.077Z\",\n      \"last_state_change\": \"1948-11-25T13:12:41.089Z\",\n      \"last_time_down\": \"1945-06-23T19:43:00.867Z\",\n      \"last_time_unreachable\": \"2022-07-05T17:47:46.217Z\",\n      \"last_time_up\": \"1952-11-26T09:19:35.799Z\",\n      \"last_update\": \"2002-02-11T22:28:18.621Z\",\n      \"max_check_attempts\": 3,\n      \"output\": \"OK - 127.0.0.1 rta 0.100ms lost 0%\\n\",\n      \"passive_checks\": false,\n      \"state_type\": 0,\n      \"timezone\": \":Europe/Paris\",\n      \"scheduled_downtime_depth\": 0,\n      \"criticality\": 10\n    },\n    {\n      \"id\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"alias\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"display_name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"state\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"services\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"poller_id\": 1,\n      \"acknowledged\": false,\n      \"address_ip\": \"127.0.0.1\",\n      \"check_attempt\": 1,\n      \"checked\": true,\n      \"execution_time\": 0.070906,\n      \"icon_image\": \"ppm/operatingsystems-linux-snmp-linux-128.png\",\n      \"icon_image_alt\": \"\",\n      \"last_check\": \"2014-11-11T02:07:25.915Z\",\n      \"last_hard_state_change\": \"1966-04-15T04:04:02.849Z\",\n      \"last_state_change\": \"1962-12-26T10:26:12.593Z\",\n      \"last_time_down\": \"2004-09-19T21:36:42.944Z\",\n      \"last_time_unreachable\": \"1951-05-24T08:52:34.057Z\",\n      \"last_time_up\": \"1990-04-26T07:43:26.231Z\",\n      \"last_update\": \"1971-01-30T15:22:21.380Z\",\n      \"max_check_attempts\": 3,\n      \"output\": \"OK - 127.0.0.1 rta 0.100ms lost 0%\\n\",\n      \"passive_checks\": false,\n      \"state_type\": 0,\n      \"timezone\": \":Europe/Paris\",\n      \"scheduled_downtime_depth\": 0,\n      \"criticality\": 10\n    }\n  ],\n  \"meta\": {\n    \"page\": 1,\n    \"limit\": 10,\n    \"search\": {},\n    \"sort_by\": {},\n    \"total\": 1\n  }\n}"
										},
										{
											"name": "Forbidden",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "X-AUTH-TOKEN",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/monitoring/hosts?show_service=true&search=cillum quis commodo&limit=20&page=4",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"monitoring",
														"hosts"
													],
													"query": [
														{
															"key": "show_service",
															"value": "true"
														},
														{
															"key": "search",
															"value": "cillum quis commodo"
														},
														{
															"key": "limit",
															"value": "20"
														},
														{
															"key": "page",
															"value": "4"
														}
													],
													"variable": [
														{
															"key": "protocol",
															"value": "{{protocol}}",
															"description": "HTTP schema (This can only be one of http,https)"
														},
														{
															"key": "server",
															"value": "{{server}}",
															"description": "IP address or hostname of Centreon server"
														},
														{
															"key": "port",
															"value": "{{port}}",
															"description": "Port used by HTTP server"
														},
														{
															"key": "version",
															"value": "{{version}}",
															"description": "Version of the API"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"code\": 403,\n  \"message\": \"You are not authorized to access this resource\"\n}"
										},
										{
											"name": "Internal Server Error",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "X-AUTH-TOKEN",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/monitoring/hosts?show_service=true&search=cillum quis commodo&limit=20&page=4",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"monitoring",
														"hosts"
													],
													"query": [
														{
															"key": "show_service",
															"value": "true"
														},
														{
															"key": "search",
															"value": "cillum quis commodo"
														},
														{
															"key": "limit",
															"value": "20"
														},
														{
															"key": "page",
															"value": "4"
														}
													],
													"variable": [
														{
															"key": "protocol",
															"value": "{{protocol}}",
															"description": "HTTP schema (This can only be one of http,https)"
														},
														{
															"key": "server",
															"value": "{{server}}",
															"description": "IP address or hostname of Centreon server"
														},
														{
															"key": "port",
															"value": "{{port}}",
															"description": "Port used by HTTP server"
														},
														{
															"key": "version",
															"value": "{{version}}",
															"description": "Version of the API"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"code\": 500,\n  \"message\": \"Internal Server Error\"\n}"
										}
									]
								},
								{
									"name": "List the randomly selected page and select a random service",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"const responseJson = pm.response.json();\r",
													"var random_service = Math.floor(Math.random() * responseJson.meta.limit);\r",
													"pm.collectionVariables.set(\"downtime_service_id\", responseJson.result[random_service].id);\r",
													"pm.collectionVariables.set(\"host_of_down_service\", responseJson.result[random_service].host.id);\r",
													"pm.collectionVariables.set(\"service_description\", responseJson.result[random_service].description);\r",
													"pm.collectionVariables.unset(\"random_page\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/monitoring/services?page={{random_page}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"monitoring",
												"services"
											],
											"query": [
												{
													"key": "page",
													"value": "{{random_page}}"
												},
												{
													"key": "search",
													"value": "",
													"description": "Retrieve only data matching the defined search value.\nSimple search can be done like the following example: ``` search={\"host.name\":\"Central\"} ```\nComplex search can be done with aggregators and operators.\nAvailable search aggregators are:\n  * `$or`\n  * `$and`\n\nAvailable search operators are:\n  * `$eq` → equal\n  * `$neq` → not equal\n  * `$lt` → less than\n  * `$le` → less or equal than\n  * `$gt` → greater than\n  * `$ge` → greater or equal than\n  * `$lk` → like\n  * `$nk` → not like\n  * `$in` → in\n  * `$ni` → not in\n\nExamples without nested aggregators:\n  ```\n  search={\n    \"$or\":[\n      {\"host.name\":{\"$eq\":\"name_1\"}},\n      {\"host.name\":{\"$eq\":\"name_2\"}}\n    ]\n  }\n  ```\n  ```\n  search={\n    \"$and\":[\n      {\"host.address\":{\"$rg\":\"^10\\.0\\.0\\.\\d+$\"}},\n      {\"host.name\":{\"$lk\":\"fr%\"}}\n    ]\n  }\n  ```\n\nExample with nested aggregators:\n  ```\n  search={\n    \"$or\":[\n      {\n        \"$and\":[\n          {\"host.address\":{\"$rg\":\"^10\\.0\\.0\\.\\d+$\"}},\n          {\"host.name\":{\"$lk\":\"fr%\"}}\n        ]\n      },\n      {\n        \"$and\":[\n          {\"host.address\":{\"$rg\":\"^192\\.168\\.0\\.\\d+$\"}},\n          {\"host.name\":{\"$lk\":\"us%\"}}\n        ]\n      }\n    ]\n  }\n  ```\n",
													"disabled": true
												}
											]
										},
										"description": "List all the hosts in real-time monitoring.\n\nThe available parameters to **search** / **sort_by** are:\n\n* host.id\n* host.name\n* host.alias\n* host.address\n* host.state\n* poller.id\n* service.display_name\n* host_group.id\n* host.is_acknowledged\n* host.downtime\n* host.criticality\n"
									},
									"response": [
										{
											"name": "OK",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "X-AUTH-TOKEN",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/monitoring/hosts?show_service=true&search=cillum quis commodo&limit=20&page=4",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"monitoring",
														"hosts"
													],
													"query": [
														{
															"key": "show_service",
															"value": "true"
														},
														{
															"key": "search",
															"value": "cillum quis commodo"
														},
														{
															"key": "limit",
															"value": "20"
														},
														{
															"key": "page",
															"value": "4"
														}
													],
													"variable": [
														{
															"key": "protocol",
															"value": "{{protocol}}",
															"description": "HTTP schema (This can only be one of http,https)"
														},
														{
															"key": "server",
															"value": "{{server}}",
															"description": "IP address or hostname of Centreon server"
														},
														{
															"key": "port",
															"value": "{{port}}",
															"description": "Port used by HTTP server"
														},
														{
															"key": "version",
															"value": "{{version}}",
															"description": "Version of the API"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"result\": [\n    {\n      \"id\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"alias\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"display_name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"state\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"services\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"poller_id\": 1,\n      \"acknowledged\": false,\n      \"address_ip\": \"127.0.0.1\",\n      \"check_attempt\": 1,\n      \"checked\": true,\n      \"execution_time\": 0.070906,\n      \"icon_image\": \"ppm/operatingsystems-linux-snmp-linux-128.png\",\n      \"icon_image_alt\": \"\",\n      \"last_check\": \"1980-02-02T05:43:34.625Z\",\n      \"last_hard_state_change\": \"2022-08-05T10:43:02.077Z\",\n      \"last_state_change\": \"1948-11-25T13:12:41.089Z\",\n      \"last_time_down\": \"1945-06-23T19:43:00.867Z\",\n      \"last_time_unreachable\": \"2022-07-05T17:47:46.217Z\",\n      \"last_time_up\": \"1952-11-26T09:19:35.799Z\",\n      \"last_update\": \"2002-02-11T22:28:18.621Z\",\n      \"max_check_attempts\": 3,\n      \"output\": \"OK - 127.0.0.1 rta 0.100ms lost 0%\\n\",\n      \"passive_checks\": false,\n      \"state_type\": 0,\n      \"timezone\": \":Europe/Paris\",\n      \"scheduled_downtime_depth\": 0,\n      \"criticality\": 10\n    },\n    {\n      \"id\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"alias\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"display_name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"state\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"services\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"poller_id\": 1,\n      \"acknowledged\": false,\n      \"address_ip\": \"127.0.0.1\",\n      \"check_attempt\": 1,\n      \"checked\": true,\n      \"execution_time\": 0.070906,\n      \"icon_image\": \"ppm/operatingsystems-linux-snmp-linux-128.png\",\n      \"icon_image_alt\": \"\",\n      \"last_check\": \"2014-11-11T02:07:25.915Z\",\n      \"last_hard_state_change\": \"1966-04-15T04:04:02.849Z\",\n      \"last_state_change\": \"1962-12-26T10:26:12.593Z\",\n      \"last_time_down\": \"2004-09-19T21:36:42.944Z\",\n      \"last_time_unreachable\": \"1951-05-24T08:52:34.057Z\",\n      \"last_time_up\": \"1990-04-26T07:43:26.231Z\",\n      \"last_update\": \"1971-01-30T15:22:21.380Z\",\n      \"max_check_attempts\": 3,\n      \"output\": \"OK - 127.0.0.1 rta 0.100ms lost 0%\\n\",\n      \"passive_checks\": false,\n      \"state_type\": 0,\n      \"timezone\": \":Europe/Paris\",\n      \"scheduled_downtime_depth\": 0,\n      \"criticality\": 10\n    }\n  ],\n  \"meta\": {\n    \"page\": 1,\n    \"limit\": 10,\n    \"search\": {},\n    \"sort_by\": {},\n    \"total\": 1\n  }\n}"
										},
										{
											"name": "Forbidden",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "X-AUTH-TOKEN",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/monitoring/hosts?show_service=true&search=cillum quis commodo&limit=20&page=4",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"monitoring",
														"hosts"
													],
													"query": [
														{
															"key": "show_service",
															"value": "true"
														},
														{
															"key": "search",
															"value": "cillum quis commodo"
														},
														{
															"key": "limit",
															"value": "20"
														},
														{
															"key": "page",
															"value": "4"
														}
													],
													"variable": [
														{
															"key": "protocol",
															"value": "{{protocol}}",
															"description": "HTTP schema (This can only be one of http,https)"
														},
														{
															"key": "server",
															"value": "{{server}}",
															"description": "IP address or hostname of Centreon server"
														},
														{
															"key": "port",
															"value": "{{port}}",
															"description": "Port used by HTTP server"
														},
														{
															"key": "version",
															"value": "{{version}}",
															"description": "Version of the API"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"code\": 403,\n  \"message\": \"You are not authorized to access this resource\"\n}"
										},
										{
											"name": "Internal Server Error",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "X-AUTH-TOKEN",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/monitoring/hosts?show_service=true&search=cillum quis commodo&limit=20&page=4",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"monitoring",
														"hosts"
													],
													"query": [
														{
															"key": "show_service",
															"value": "true"
														},
														{
															"key": "search",
															"value": "cillum quis commodo"
														},
														{
															"key": "limit",
															"value": "20"
														},
														{
															"key": "page",
															"value": "4"
														}
													],
													"variable": [
														{
															"key": "protocol",
															"value": "{{protocol}}",
															"description": "HTTP schema (This can only be one of http,https)"
														},
														{
															"key": "server",
															"value": "{{server}}",
															"description": "IP address or hostname of Centreon server"
														},
														{
															"key": "port",
															"value": "{{port}}",
															"description": "Port used by HTTP server"
														},
														{
															"key": "version",
															"value": "{{version}}",
															"description": "Version of the API"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"code\": 500,\n  \"message\": \"Internal Server Error\"\n}"
										}
									]
								},
								{
									"name": "Add downtime on selected service",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var moment = require('moment');",
													"datetime_start = moment().format(\"YYYY-MM-DDTHH:mm:ssZ\");",
													"pm.collectionVariables.set(\"start_time\", datetime_start);",
													"datetime_end = moment().add(2, 'hours').format(\"YYYY-MM-DDTHH:mm:ssZ\");",
													"pm.collectionVariables.set(\"end_time\", datetime_end);",
													"",
													"pm.collectionVariables.set(\"downtime_comment\", \"Ceci est un commentaire.\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "centreon-auth-token",
												"value": "{{token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"start_time\": \"{{start_time}}\",\n    \"end_time\": \"{{end_time}}\",\n    \"is_fixed\": true,\n    \"duration\": 3600,\n    \"author_id\": {{current_user_id}},\n    \"comment\": \"{{downtime_comment}}\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/monitoring/hosts/{{host_of_down_service}}/services/{{downtime_service_id}}/downtimes",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"monitoring",
												"hosts",
												"{{host_of_down_service}}",
												"services",
												"{{downtime_service_id}}",
												"downtimes"
											]
										}
									},
									"response": []
								},
								{
									"name": "Show active service downtimes",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const responseJson = pm.response.json();",
													"try {",
													"    var i = 0;",
													"    while (i < responseJson.result.length) {",
													"        if (pm.collectionVariables.get(\"start_time\") == responseJson.result[i].start_time)",
													"        {",
													"            pm.collectionVariables.set(\"service_downtime_id\", responseJson.result[i].id);",
													"            pm.test(\"Features of the set downtime have been successfully implemented.\", function() {",
													"                pm.expect(pm.collectionVariables.get(\"start_time\")).to.eql(responseJson.result[i].start_time);",
													"                pm.expect(pm.collectionVariables.get(\"end_time\")).to.eql(responseJson.result[i].end_time);",
													"                pm.expect(pm.collectionVariables.get(\"downtime_comment\")).to.eql(responseJson.result[i].comment.replace(/[\\'\"]+/g, ''));",
													"            });",
													"            break;",
													"        }",
													"        i++;",
													"    }",
													"    if (i == responseJson.result.length) {",
													"        pm.test(\"Added realtime downtime was found\", function() {",
													"            false;",
													"        });",
													"    }",
													"} ",
													"catch (e) {}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "centreon-auth-token",
												"value": "{{token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{baseUrl}}/monitoring/hosts/{{host_of_down_service}}/services/{{downtime_service_id}}/downtimes",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"monitoring",
												"hosts",
												"{{host_of_down_service}}",
												"services",
												"{{downtime_service_id}}",
												"downtimes"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get down service",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/centreon/api/{{version}}/monitoring/hosts/{{host_of_down_service}}/services/{{downtime_service_id}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"centreon",
												"api",
												"{{version}}",
												"monitoring",
												"hosts",
												"{{host_of_down_service}}",
												"services",
												"{{downtime_service_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Cancel service downtime",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "centreon-auth-token",
												"value": "{{token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{baseUrl}}/monitoring/downtimes/{{downtime_service_id}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"monitoring",
												"downtimes",
												"{{downtime_service_id}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Edge Cases",
							"item": []
						}
					]
				}
			]
		},
		{
			"name": "Acknowledgement Management",
			"item": [
				{
					"name": "Host Acknowedgement Management",
					"item": [
						{
							"name": "Critical Path",
							"item": [
								{
									"name": "List all hosts before acknowledgement",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"const responseJson = pm.response.json();\r",
													"\r",
													"var i = 0;\r",
													"while (i < responseJson.result.length) {\r",
													"    if((responseJson.result[i].acknowledged == false) && ((responseJson.result[i].state == 1) ||(responseJson.result[i].state == 2))) {\r",
													"        pm.collectionVariables.set(\"acknowledged_host_id\", responseJson.result[i].id);\r",
													"        break;\r",
													"    }\r",
													"    i++;\r",
													"}\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/monitoring/hosts?limit=20",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"monitoring",
												"hosts"
											],
											"query": [
												{
													"key": "limit",
													"value": "20",
													"description": "Number of displayed items per page"
												},
												{
													"key": "page",
													"value": "",
													"description": "Number of the requested page",
													"disabled": true
												},
												{
													"key": "search",
													"value": "",
													"description": "Retrieve only data matching the defined search value.\nSimple search can be done like the following example: ``` search={\"host.name\":\"Central\"} ```\nComplex search can be done with aggregators and operators.\nAvailable search aggregators are:\n  * `$or`\n  * `$and`\n\nAvailable search operators are:\n  * `$eq` → equal\n  * `$neq` → not equal\n  * `$lt` → less than\n  * `$le` → less or equal than\n  * `$gt` → greater than\n  * `$ge` → greater or equal than\n  * `$lk` → like\n  * `$nk` → not like\n  * `$in` → in\n  * `$ni` → not in\n\nExamples without nested aggregators:\n  ```\n  search={\n    \"$or\":[\n      {\"host.name\":{\"$eq\":\"name_1\"}},\n      {\"host.name\":{\"$eq\":\"name_2\"}}\n    ]\n  }\n  ```\n  ```\n  search={\n    \"$and\":[\n      {\"host.address\":{\"$rg\":\"^10\\.0\\.0\\.\\d+$\"}},\n      {\"host.name\":{\"$lk\":\"fr%\"}}\n    ]\n  }\n  ```\n\nExample with nested aggregators:\n  ```\n  search={\n    \"$or\":[\n      {\n        \"$and\":[\n          {\"host.address\":{\"$rg\":\"^10\\.0\\.0\\.\\d+$\"}},\n          {\"host.name\":{\"$lk\":\"fr%\"}}\n        ]\n      },\n      {\n        \"$and\":[\n          {\"host.address\":{\"$rg\":\"^192\\.168\\.0\\.\\d+$\"}},\n          {\"host.name\":{\"$lk\":\"us%\"}}\n        ]\n      }\n    ]\n  }\n  ```\n",
													"disabled": true
												}
											]
										},
										"description": "List all the hosts in real-time monitoring.\n\nThe available parameters to **search** / **sort_by** are:\n\n* host.id\n* host.name\n* host.alias\n* host.address\n* host.state\n* poller.id\n* service.display_name\n* host_group.id\n* host.is_acknowledged\n* host.downtime\n* host.criticality\n"
									},
									"response": [
										{
											"name": "OK",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "X-AUTH-TOKEN",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/monitoring/hosts?show_service=true&search=cillum quis commodo&limit=20&page=4",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"monitoring",
														"hosts"
													],
													"query": [
														{
															"key": "show_service",
															"value": "true"
														},
														{
															"key": "search",
															"value": "cillum quis commodo"
														},
														{
															"key": "limit",
															"value": "20"
														},
														{
															"key": "page",
															"value": "4"
														}
													],
													"variable": [
														{
															"key": "protocol",
															"value": "{{protocol}}",
															"description": "HTTP schema (This can only be one of http,https)"
														},
														{
															"key": "server",
															"value": "{{server}}",
															"description": "IP address or hostname of Centreon server"
														},
														{
															"key": "port",
															"value": "{{port}}",
															"description": "Port used by HTTP server"
														},
														{
															"key": "version",
															"value": "{{version}}",
															"description": "Version of the API"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"result\": [\n    {\n      \"id\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"alias\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"display_name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"state\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"services\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"poller_id\": 1,\n      \"acknowledged\": false,\n      \"address_ip\": \"127.0.0.1\",\n      \"check_attempt\": 1,\n      \"checked\": true,\n      \"execution_time\": 0.070906,\n      \"icon_image\": \"ppm/operatingsystems-linux-snmp-linux-128.png\",\n      \"icon_image_alt\": \"\",\n      \"last_check\": \"1980-02-02T05:43:34.625Z\",\n      \"last_hard_state_change\": \"2022-08-05T10:43:02.077Z\",\n      \"last_state_change\": \"1948-11-25T13:12:41.089Z\",\n      \"last_time_down\": \"1945-06-23T19:43:00.867Z\",\n      \"last_time_unreachable\": \"2022-07-05T17:47:46.217Z\",\n      \"last_time_up\": \"1952-11-26T09:19:35.799Z\",\n      \"last_update\": \"2002-02-11T22:28:18.621Z\",\n      \"max_check_attempts\": 3,\n      \"output\": \"OK - 127.0.0.1 rta 0.100ms lost 0%\\n\",\n      \"passive_checks\": false,\n      \"state_type\": 0,\n      \"timezone\": \":Europe/Paris\",\n      \"scheduled_downtime_depth\": 0,\n      \"criticality\": 10\n    },\n    {\n      \"id\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"alias\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"display_name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"state\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"services\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"poller_id\": 1,\n      \"acknowledged\": false,\n      \"address_ip\": \"127.0.0.1\",\n      \"check_attempt\": 1,\n      \"checked\": true,\n      \"execution_time\": 0.070906,\n      \"icon_image\": \"ppm/operatingsystems-linux-snmp-linux-128.png\",\n      \"icon_image_alt\": \"\",\n      \"last_check\": \"2014-11-11T02:07:25.915Z\",\n      \"last_hard_state_change\": \"1966-04-15T04:04:02.849Z\",\n      \"last_state_change\": \"1962-12-26T10:26:12.593Z\",\n      \"last_time_down\": \"2004-09-19T21:36:42.944Z\",\n      \"last_time_unreachable\": \"1951-05-24T08:52:34.057Z\",\n      \"last_time_up\": \"1990-04-26T07:43:26.231Z\",\n      \"last_update\": \"1971-01-30T15:22:21.380Z\",\n      \"max_check_attempts\": 3,\n      \"output\": \"OK - 127.0.0.1 rta 0.100ms lost 0%\\n\",\n      \"passive_checks\": false,\n      \"state_type\": 0,\n      \"timezone\": \":Europe/Paris\",\n      \"scheduled_downtime_depth\": 0,\n      \"criticality\": 10\n    }\n  ],\n  \"meta\": {\n    \"page\": 1,\n    \"limit\": 10,\n    \"search\": {},\n    \"sort_by\": {},\n    \"total\": 1\n  }\n}"
										},
										{
											"name": "Forbidden",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "X-AUTH-TOKEN",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/monitoring/hosts?show_service=true&search=cillum quis commodo&limit=20&page=4",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"monitoring",
														"hosts"
													],
													"query": [
														{
															"key": "show_service",
															"value": "true"
														},
														{
															"key": "search",
															"value": "cillum quis commodo"
														},
														{
															"key": "limit",
															"value": "20"
														},
														{
															"key": "page",
															"value": "4"
														}
													],
													"variable": [
														{
															"key": "protocol",
															"value": "{{protocol}}",
															"description": "HTTP schema (This can only be one of http,https)"
														},
														{
															"key": "server",
															"value": "{{server}}",
															"description": "IP address or hostname of Centreon server"
														},
														{
															"key": "port",
															"value": "{{port}}",
															"description": "Port used by HTTP server"
														},
														{
															"key": "version",
															"value": "{{version}}",
															"description": "Version of the API"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"code\": 403,\n  \"message\": \"You are not authorized to access this resource\"\n}"
										},
										{
											"name": "Internal Server Error",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "X-AUTH-TOKEN",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/monitoring/hosts?show_service=true&search=cillum quis commodo&limit=20&page=4",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"monitoring",
														"hosts"
													],
													"query": [
														{
															"key": "show_service",
															"value": "true"
														},
														{
															"key": "search",
															"value": "cillum quis commodo"
														},
														{
															"key": "limit",
															"value": "20"
														},
														{
															"key": "page",
															"value": "4"
														}
													],
													"variable": [
														{
															"key": "protocol",
															"value": "{{protocol}}",
															"description": "HTTP schema (This can only be one of http,https)"
														},
														{
															"key": "server",
															"value": "{{server}}",
															"description": "IP address or hostname of Centreon server"
														},
														{
															"key": "port",
															"value": "{{port}}",
															"description": "Port used by HTTP server"
														},
														{
															"key": "version",
															"value": "{{version}}",
															"description": "Version of the API"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"code\": 500,\n  \"message\": \"Internal Server Error\"\n}"
										}
									]
								},
								{
									"name": "Get the future acknowledged host",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/monitoring/hosts/{{acknowledged_host_id}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"monitoring",
												"hosts",
												"{{acknowledged_host_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Add an acknowledgement on down host",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.collectionVariables.set(\"acknowledgement_comment\", \"Acknowledged by admin.\");\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"comment\": \"{{acknowledgement_comment}}\",\r\n    \"is_notify_contacts\": false,\r\n    \"is_persistent_comment\": true,\r\n    \"is_sticky\": true,\r\n    \"with_services\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/monitoring/hosts/{{acknowledged_host_id}}/acknowledgements",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"monitoring",
												"hosts",
												"{{acknowledged_host_id}}",
												"acknowledgements"
											]
										}
									},
									"response": []
								},
								{
									"name": "List all acknowledgements",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"const responseJson = pm.response.json();\r",
													"\r",
													"var i = 0;\r",
													"while (i < responseJson.result.length) {\r",
													"    if (responseJson.result[i].host_id == pm.collectionVariables.get(\"acknowledged_host_id\")) {\r",
													"            if (pm.test(\"Features of the set acknowledgement have been successfully implemented.\", function() {\r",
													"                pm.expect(pm.collectionVariables.get(\"acknowledgement_comment\")).to.eql(responseJson.result[i].comment.replace(/[\\'\"]+/g, ''));\r",
													"            })) \r",
													"        {\r",
													"            pm.collectionVariables.set(\"acknowledgement_id\", responseJson.result[i].id);\r",
													"            pm.collectionVariables.unset(\"acknowledgement_comment\");\r",
													"        }\r",
													"        break;\r",
													"        }\r",
													"    i++;\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/monitoring/acknowledgements?limit=20",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"monitoring",
												"acknowledgements"
											],
											"query": [
												{
													"key": "search",
													"value": "cillum quis commodo",
													"description": "Retrieve only data matching the defined search value.\nSimple search can be done like the following example: ``` search={\"host.name\":\"Central\"} ```\nComplex search can be done with aggregators and operators.\nAvailable search aggregators are:\n  * `$or`\n  * `$and`\n\nAvailable search operators are:\n  * `$eq` → equal\n  * `$neq` → not equal\n  * `$lt` → less than\n  * `$le` → less or equal than\n  * `$gt` → greater than\n  * `$ge` → greater or equal than\n  * `$lk` → like\n  * `$nk` → not like\n  * `$in` → in\n  * `$ni` → not in\n\nExamples without nested aggregators:\n  ```\n  search={\n    \"$or\":[\n      {\"host.name\":{\"$eq\":\"name_1\"}},\n      {\"host.name\":{\"$eq\":\"name_2\"}}\n    ]\n  }\n  ```\n  ```\n  search={\n    \"$and\":[\n      {\"host.address\":{\"$rg\":\"^10\\.0\\.0\\.\\d+$\"}},\n      {\"host.name\":{\"$lk\":\"fr%\"}}\n    ]\n  }\n  ```\n\nExample with nested aggregators:\n  ```\n  search={\n    \"$or\":[\n      {\n        \"$and\":[\n          {\"host.address\":{\"$rg\":\"^10\\.0\\.0\\.\\d+$\"}},\n          {\"host.name\":{\"$lk\":\"fr%\"}}\n        ]\n      },\n      {\n        \"$and\":[\n          {\"host.address\":{\"$rg\":\"^192\\.168\\.0\\.\\d+$\"}},\n          {\"host.name\":{\"$lk\":\"us%\"}}\n        ]\n      }\n    ]\n  }\n  ```\n",
													"disabled": true
												},
												{
													"key": "limit",
													"value": "20",
													"description": "Number of items per pages"
												},
												{
													"key": "page",
													"value": "4",
													"description": "Number of the requested page",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"response": [
										{
											"name": "OK",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "X-AUTH-TOKEN",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/monitoring/acknowledgements?search=cillum quis commodo&limit=20&page=4",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"monitoring",
														"acknowledgements"
													],
													"query": [
														{
															"key": "search",
															"value": "cillum quis commodo"
														},
														{
															"key": "limit",
															"value": "20"
														},
														{
															"key": "page",
															"value": "4"
														}
													],
													"variable": [
														{
															"key": "protocol",
															"value": "{{protocol}}",
															"description": "HTTP schema (This can only be one of http,https)"
														},
														{
															"key": "server",
															"value": "{{server}}",
															"description": "IP address or hostname of Centreon server"
														},
														{
															"key": "port",
															"value": "{{port}}",
															"description": "Port used by HTTP server"
														},
														{
															"key": "version",
															"value": "{{version}}",
															"description": "Version of the API"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"result\": [\n    {\n      \"id\": 34,\n      \"author_id\": 3,\n      \"author_name\": \"admin\",\n      \"comment\": \"Acknowledged by admin\",\n      \"deletion_time\": \"2018-11-11T18:30:11.478Z\",\n      \"entry_time\": \"1972-10-24T21:08:14.231Z\",\n      \"host_id\": 12,\n      \"poller_id\": 1,\n      \"is_notify_contacts\": false,\n      \"is_persistent_comment\": true,\n      \"is_sticky\": true,\n      \"state\": 1,\n      \"service_id\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    {\n      \"id\": 34,\n      \"author_id\": 3,\n      \"author_name\": \"admin\",\n      \"comment\": \"Acknowledged by admin\",\n      \"deletion_time\": \"1980-07-14T18:43:06.037Z\",\n      \"entry_time\": \"2019-06-04T15:34:06.223Z\",\n      \"host_id\": 12,\n      \"poller_id\": 1,\n      \"is_notify_contacts\": false,\n      \"is_persistent_comment\": true,\n      \"is_sticky\": true,\n      \"state\": 1,\n      \"service_id\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    }\n  ],\n  \"meta\": {\n    \"page\": 1,\n    \"limit\": 10,\n    \"search\": {},\n    \"sort_by\": {},\n    \"total\": 1\n  }\n}"
										},
										{
											"name": "Forbidden",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "X-AUTH-TOKEN",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/monitoring/acknowledgements?search=cillum quis commodo&limit=20&page=4",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"monitoring",
														"acknowledgements"
													],
													"query": [
														{
															"key": "search",
															"value": "cillum quis commodo"
														},
														{
															"key": "limit",
															"value": "20"
														},
														{
															"key": "page",
															"value": "4"
														}
													],
													"variable": [
														{
															"key": "protocol",
															"value": "{{protocol}}",
															"description": "HTTP schema (This can only be one of http,https)"
														},
														{
															"key": "server",
															"value": "{{server}}",
															"description": "IP address or hostname of Centreon server"
														},
														{
															"key": "port",
															"value": "{{port}}",
															"description": "Port used by HTTP server"
														},
														{
															"key": "version",
															"value": "{{version}}",
															"description": "Version of the API"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"code\": 403,\n  \"message\": \"You are not authorized to access this resource\"\n}"
										},
										{
											"name": "Internal Server Error",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "X-AUTH-TOKEN",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/monitoring/acknowledgements?search=cillum quis commodo&limit=20&page=4",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"monitoring",
														"acknowledgements"
													],
													"query": [
														{
															"key": "search",
															"value": "cillum quis commodo"
														},
														{
															"key": "limit",
															"value": "20"
														},
														{
															"key": "page",
															"value": "4"
														}
													],
													"variable": [
														{
															"key": "protocol",
															"value": "{{protocol}}",
															"description": "HTTP schema (This can only be one of http,https)"
														},
														{
															"key": "server",
															"value": "{{server}}",
															"description": "IP address or hostname of Centreon server"
														},
														{
															"key": "port",
															"value": "{{port}}",
															"description": "Port used by HTTP server"
														},
														{
															"key": "version",
															"value": "{{version}}",
															"description": "Version of the API"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"code\": 500,\n  \"message\": \"Internal Server Error\"\n}"
										}
									]
								},
								{
									"name": "Disacknowledge host",
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/monitoring/hosts/{{acknowledged_host_id}}/acknowledgements",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"monitoring",
												"hosts",
												"{{acknowledged_host_id}}",
												"acknowledgements"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Edge Cases",
							"item": []
						}
					]
				},
				{
					"name": "Service Acknowedgement Management",
					"item": [
						{
							"name": "Critical Path",
							"item": [
								{
									"name": "List all services before acknowledgement",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"const responseJson = pm.response.json();\r",
													"\r",
													"var i = 0;\r",
													"while (i < responseJson.result.length) {\r",
													"    if((responseJson.result[i].acknowledged == false) && ((responseJson.result[i].state == 1) ||(responseJson.result[i].state == 2))) {\r",
													"        pm.collectionVariables.set(\"acknowledged_service_id\", responseJson.result[i].id);\r",
													"        break;\r",
													"    }\r",
													"    i++;\r",
													"}\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/monitoring/services?limit=20&service.state=2",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"monitoring",
												"services"
											],
											"query": [
												{
													"key": "limit",
													"value": "20"
												},
												{
													"key": "page",
													"value": "",
													"description": "Number of the requested page",
													"disabled": true
												},
												{
													"key": "service.state",
													"value": "2"
												}
											]
										},
										"description": "List all the hosts in real-time monitoring.\n\nThe available parameters to **search** / **sort_by** are:\n\n* host.id\n* host.name\n* host.alias\n* host.address\n* host.state\n* poller.id\n* service.display_name\n* host_group.id\n* host.is_acknowledged\n* host.downtime\n* host.criticality\n"
									},
									"response": [
										{
											"name": "OK",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "X-AUTH-TOKEN",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/monitoring/hosts?show_service=true&search=cillum quis commodo&limit=20&page=4",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"monitoring",
														"hosts"
													],
													"query": [
														{
															"key": "show_service",
															"value": "true"
														},
														{
															"key": "search",
															"value": "cillum quis commodo"
														},
														{
															"key": "limit",
															"value": "20"
														},
														{
															"key": "page",
															"value": "4"
														}
													],
													"variable": [
														{
															"key": "protocol",
															"value": "{{protocol}}",
															"description": "HTTP schema (This can only be one of http,https)"
														},
														{
															"key": "server",
															"value": "{{server}}",
															"description": "IP address or hostname of Centreon server"
														},
														{
															"key": "port",
															"value": "{{port}}",
															"description": "Port used by HTTP server"
														},
														{
															"key": "version",
															"value": "{{version}}",
															"description": "Version of the API"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"result\": [\n    {\n      \"id\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"alias\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"display_name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"state\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"services\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"poller_id\": 1,\n      \"acknowledged\": false,\n      \"address_ip\": \"127.0.0.1\",\n      \"check_attempt\": 1,\n      \"checked\": true,\n      \"execution_time\": 0.070906,\n      \"icon_image\": \"ppm/operatingsystems-linux-snmp-linux-128.png\",\n      \"icon_image_alt\": \"\",\n      \"last_check\": \"1980-02-02T05:43:34.625Z\",\n      \"last_hard_state_change\": \"2022-08-05T10:43:02.077Z\",\n      \"last_state_change\": \"1948-11-25T13:12:41.089Z\",\n      \"last_time_down\": \"1945-06-23T19:43:00.867Z\",\n      \"last_time_unreachable\": \"2022-07-05T17:47:46.217Z\",\n      \"last_time_up\": \"1952-11-26T09:19:35.799Z\",\n      \"last_update\": \"2002-02-11T22:28:18.621Z\",\n      \"max_check_attempts\": 3,\n      \"output\": \"OK - 127.0.0.1 rta 0.100ms lost 0%\\n\",\n      \"passive_checks\": false,\n      \"state_type\": 0,\n      \"timezone\": \":Europe/Paris\",\n      \"scheduled_downtime_depth\": 0,\n      \"criticality\": 10\n    },\n    {\n      \"id\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"alias\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"display_name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"state\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"services\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"poller_id\": 1,\n      \"acknowledged\": false,\n      \"address_ip\": \"127.0.0.1\",\n      \"check_attempt\": 1,\n      \"checked\": true,\n      \"execution_time\": 0.070906,\n      \"icon_image\": \"ppm/operatingsystems-linux-snmp-linux-128.png\",\n      \"icon_image_alt\": \"\",\n      \"last_check\": \"2014-11-11T02:07:25.915Z\",\n      \"last_hard_state_change\": \"1966-04-15T04:04:02.849Z\",\n      \"last_state_change\": \"1962-12-26T10:26:12.593Z\",\n      \"last_time_down\": \"2004-09-19T21:36:42.944Z\",\n      \"last_time_unreachable\": \"1951-05-24T08:52:34.057Z\",\n      \"last_time_up\": \"1990-04-26T07:43:26.231Z\",\n      \"last_update\": \"1971-01-30T15:22:21.380Z\",\n      \"max_check_attempts\": 3,\n      \"output\": \"OK - 127.0.0.1 rta 0.100ms lost 0%\\n\",\n      \"passive_checks\": false,\n      \"state_type\": 0,\n      \"timezone\": \":Europe/Paris\",\n      \"scheduled_downtime_depth\": 0,\n      \"criticality\": 10\n    }\n  ],\n  \"meta\": {\n    \"page\": 1,\n    \"limit\": 10,\n    \"search\": {},\n    \"sort_by\": {},\n    \"total\": 1\n  }\n}"
										},
										{
											"name": "Forbidden",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "X-AUTH-TOKEN",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/monitoring/hosts?show_service=true&search=cillum quis commodo&limit=20&page=4",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"monitoring",
														"hosts"
													],
													"query": [
														{
															"key": "show_service",
															"value": "true"
														},
														{
															"key": "search",
															"value": "cillum quis commodo"
														},
														{
															"key": "limit",
															"value": "20"
														},
														{
															"key": "page",
															"value": "4"
														}
													],
													"variable": [
														{
															"key": "protocol",
															"value": "{{protocol}}",
															"description": "HTTP schema (This can only be one of http,https)"
														},
														{
															"key": "server",
															"value": "{{server}}",
															"description": "IP address or hostname of Centreon server"
														},
														{
															"key": "port",
															"value": "{{port}}",
															"description": "Port used by HTTP server"
														},
														{
															"key": "version",
															"value": "{{version}}",
															"description": "Version of the API"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"code\": 403,\n  \"message\": \"You are not authorized to access this resource\"\n}"
										},
										{
											"name": "Internal Server Error",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "X-AUTH-TOKEN",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/monitoring/hosts?show_service=true&search=cillum quis commodo&limit=20&page=4",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"monitoring",
														"hosts"
													],
													"query": [
														{
															"key": "show_service",
															"value": "true"
														},
														{
															"key": "search",
															"value": "cillum quis commodo"
														},
														{
															"key": "limit",
															"value": "20"
														},
														{
															"key": "page",
															"value": "4"
														}
													],
													"variable": [
														{
															"key": "protocol",
															"value": "{{protocol}}",
															"description": "HTTP schema (This can only be one of http,https)"
														},
														{
															"key": "server",
															"value": "{{server}}",
															"description": "IP address or hostname of Centreon server"
														},
														{
															"key": "port",
															"value": "{{port}}",
															"description": "Port used by HTTP server"
														},
														{
															"key": "version",
															"value": "{{version}}",
															"description": "Version of the API"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"code\": 500,\n  \"message\": \"Internal Server Error\"\n}"
										}
									]
								},
								{
									"name": "Get the future acknowledged service",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/monitoring/services/{{acknowledged_service_id}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"monitoring",
												"services",
												"{{acknowledged_service_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Add an acknowledgement on down service",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.collectionVariables.set(\"acknowledgement_comment\", \"Acknowledged by admin.\");\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"comment\": \"{{acknowledgement_comment}}\",\r\n    \"is_notify_contacts\": false,\r\n    \"is_persistent_comment\": true,\r\n    \"is_sticky\": true,\r\n    \"with_services\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/monitoring/hosts/{{acknowledged_host_id}}/acknowledgements",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"monitoring",
												"hosts",
												"{{acknowledged_host_id}}",
												"acknowledgements"
											]
										}
									},
									"response": []
								},
								{
									"name": "List all acknowledgements",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"const responseJson = pm.response.json();\r",
													"\r",
													"var i = 0;\r",
													"while (i < responseJson.result.length) {\r",
													"    if (responseJson.result[i].host_id == pm.collectionVariables.get(\"acknowledged_host_id\")) {\r",
													"            if (pm.test(\"Features of the set acknowledgement have been successfully implemented.\", function() {\r",
													"                pm.expect(pm.collectionVariables.get(\"acknowledgement_comment\")).to.eql(responseJson.result[i].comment.replace(/[\\'\"]+/g, ''));\r",
													"            })) \r",
													"        {\r",
													"            pm.collectionVariables.set(\"acknowledgement_id\", responseJson.result[i].id);\r",
													"            pm.collectionVariables.unset(\"acknowledgement_comment\");\r",
													"        }\r",
													"        break;\r",
													"        }\r",
													"    i++;\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/monitoring/acknowledgements?limit=20",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"monitoring",
												"acknowledgements"
											],
											"query": [
												{
													"key": "search",
													"value": "cillum quis commodo",
													"description": "Retrieve only data matching the defined search value.\nSimple search can be done like the following example: ``` search={\"host.name\":\"Central\"} ```\nComplex search can be done with aggregators and operators.\nAvailable search aggregators are:\n  * `$or`\n  * `$and`\n\nAvailable search operators are:\n  * `$eq` → equal\n  * `$neq` → not equal\n  * `$lt` → less than\n  * `$le` → less or equal than\n  * `$gt` → greater than\n  * `$ge` → greater or equal than\n  * `$lk` → like\n  * `$nk` → not like\n  * `$in` → in\n  * `$ni` → not in\n\nExamples without nested aggregators:\n  ```\n  search={\n    \"$or\":[\n      {\"host.name\":{\"$eq\":\"name_1\"}},\n      {\"host.name\":{\"$eq\":\"name_2\"}}\n    ]\n  }\n  ```\n  ```\n  search={\n    \"$and\":[\n      {\"host.address\":{\"$rg\":\"^10\\.0\\.0\\.\\d+$\"}},\n      {\"host.name\":{\"$lk\":\"fr%\"}}\n    ]\n  }\n  ```\n\nExample with nested aggregators:\n  ```\n  search={\n    \"$or\":[\n      {\n        \"$and\":[\n          {\"host.address\":{\"$rg\":\"^10\\.0\\.0\\.\\d+$\"}},\n          {\"host.name\":{\"$lk\":\"fr%\"}}\n        ]\n      },\n      {\n        \"$and\":[\n          {\"host.address\":{\"$rg\":\"^192\\.168\\.0\\.\\d+$\"}},\n          {\"host.name\":{\"$lk\":\"us%\"}}\n        ]\n      }\n    ]\n  }\n  ```\n",
													"disabled": true
												},
												{
													"key": "limit",
													"value": "20",
													"description": "Number of items per pages"
												},
												{
													"key": "page",
													"value": "4",
													"description": "Number of the requested page",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"response": [
										{
											"name": "OK",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "X-AUTH-TOKEN",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/monitoring/acknowledgements?search=cillum quis commodo&limit=20&page=4",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"monitoring",
														"acknowledgements"
													],
													"query": [
														{
															"key": "search",
															"value": "cillum quis commodo"
														},
														{
															"key": "limit",
															"value": "20"
														},
														{
															"key": "page",
															"value": "4"
														}
													],
													"variable": [
														{
															"key": "protocol",
															"value": "{{protocol}}",
															"description": "HTTP schema (This can only be one of http,https)"
														},
														{
															"key": "server",
															"value": "{{server}}",
															"description": "IP address or hostname of Centreon server"
														},
														{
															"key": "port",
															"value": "{{port}}",
															"description": "Port used by HTTP server"
														},
														{
															"key": "version",
															"value": "{{version}}",
															"description": "Version of the API"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"result\": [\n    {\n      \"id\": 34,\n      \"author_id\": 3,\n      \"author_name\": \"admin\",\n      \"comment\": \"Acknowledged by admin\",\n      \"deletion_time\": \"2018-11-11T18:30:11.478Z\",\n      \"entry_time\": \"1972-10-24T21:08:14.231Z\",\n      \"host_id\": 12,\n      \"poller_id\": 1,\n      \"is_notify_contacts\": false,\n      \"is_persistent_comment\": true,\n      \"is_sticky\": true,\n      \"state\": 1,\n      \"service_id\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    },\n    {\n      \"id\": 34,\n      \"author_id\": 3,\n      \"author_name\": \"admin\",\n      \"comment\": \"Acknowledged by admin\",\n      \"deletion_time\": \"1980-07-14T18:43:06.037Z\",\n      \"entry_time\": \"2019-06-04T15:34:06.223Z\",\n      \"host_id\": 12,\n      \"poller_id\": 1,\n      \"is_notify_contacts\": false,\n      \"is_persistent_comment\": true,\n      \"is_sticky\": true,\n      \"state\": 1,\n      \"service_id\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      }\n    }\n  ],\n  \"meta\": {\n    \"page\": 1,\n    \"limit\": 10,\n    \"search\": {},\n    \"sort_by\": {},\n    \"total\": 1\n  }\n}"
										},
										{
											"name": "Forbidden",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "X-AUTH-TOKEN",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/monitoring/acknowledgements?search=cillum quis commodo&limit=20&page=4",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"monitoring",
														"acknowledgements"
													],
													"query": [
														{
															"key": "search",
															"value": "cillum quis commodo"
														},
														{
															"key": "limit",
															"value": "20"
														},
														{
															"key": "page",
															"value": "4"
														}
													],
													"variable": [
														{
															"key": "protocol",
															"value": "{{protocol}}",
															"description": "HTTP schema (This can only be one of http,https)"
														},
														{
															"key": "server",
															"value": "{{server}}",
															"description": "IP address or hostname of Centreon server"
														},
														{
															"key": "port",
															"value": "{{port}}",
															"description": "Port used by HTTP server"
														},
														{
															"key": "version",
															"value": "{{version}}",
															"description": "Version of the API"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"code\": 403,\n  \"message\": \"You are not authorized to access this resource\"\n}"
										},
										{
											"name": "Internal Server Error",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "X-AUTH-TOKEN",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/monitoring/acknowledgements?search=cillum quis commodo&limit=20&page=4",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"monitoring",
														"acknowledgements"
													],
													"query": [
														{
															"key": "search",
															"value": "cillum quis commodo"
														},
														{
															"key": "limit",
															"value": "20"
														},
														{
															"key": "page",
															"value": "4"
														}
													],
													"variable": [
														{
															"key": "protocol",
															"value": "{{protocol}}",
															"description": "HTTP schema (This can only be one of http,https)"
														},
														{
															"key": "server",
															"value": "{{server}}",
															"description": "IP address or hostname of Centreon server"
														},
														{
															"key": "port",
															"value": "{{port}}",
															"description": "Port used by HTTP server"
														},
														{
															"key": "version",
															"value": "{{version}}",
															"description": "Version of the API"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"code\": 500,\n  \"message\": \"Internal Server Error\"\n}"
										}
									]
								},
								{
									"name": "Disacknowledge host",
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/monitoring/hosts/{{acknowledged_host_id}}/acknowledgements",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"monitoring",
												"hosts",
												"{{acknowledged_host_id}}",
												"acknowledgements"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Edge Cases",
							"item": []
						}
					]
				}
			]
		},
		{
			"name": "WIPs, projects and tidbits",
			"item": [
				{
					"name": "Select a random host or service on a random page",
					"item": [
						{
							"name": "List all services and select a random page",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"var number_of_pages = Math.floor(responseJson.meta.total / responseJson.meta.limit) + 1;\r",
											"var random_page = Math.floor(Math.random() * number_of_pages);\r",
											"pm.collectionVariables.set(\"random_page\", random_page);\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/monitoring/services",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"monitoring",
										"services"
									],
									"query": [
										{
											"key": "search",
											"value": "",
											"description": "Retrieve only data matching the defined search value.\nSimple search can be done like the following example: ``` search={\"host.name\":\"Central\"} ```\nComplex search can be done with aggregators and operators.\nAvailable search aggregators are:\n  * `$or`\n  * `$and`\n\nAvailable search operators are:\n  * `$eq` → equal\n  * `$neq` → not equal\n  * `$lt` → less than\n  * `$le` → less or equal than\n  * `$gt` → greater than\n  * `$ge` → greater or equal than\n  * `$lk` → like\n  * `$nk` → not like\n  * `$in` → in\n  * `$ni` → not in\n\nExamples without nested aggregators:\n  ```\n  search={\n    \"$or\":[\n      {\"host.name\":{\"$eq\":\"name_1\"}},\n      {\"host.name\":{\"$eq\":\"name_2\"}}\n    ]\n  }\n  ```\n  ```\n  search={\n    \"$and\":[\n      {\"host.address\":{\"$rg\":\"^10\\.0\\.0\\.\\d+$\"}},\n      {\"host.name\":{\"$lk\":\"fr%\"}}\n    ]\n  }\n  ```\n\nExample with nested aggregators:\n  ```\n  search={\n    \"$or\":[\n      {\n        \"$and\":[\n          {\"host.address\":{\"$rg\":\"^10\\.0\\.0\\.\\d+$\"}},\n          {\"host.name\":{\"$lk\":\"fr%\"}}\n        ]\n      },\n      {\n        \"$and\":[\n          {\"host.address\":{\"$rg\":\"^192\\.168\\.0\\.\\d+$\"}},\n          {\"host.name\":{\"$lk\":\"us%\"}}\n        ]\n      }\n    ]\n  }\n  ```\n",
											"disabled": true
										}
									]
								},
								"description": "List all the hosts in real-time monitoring.\n\nThe available parameters to **search** / **sort_by** are:\n\n* host.id\n* host.name\n* host.alias\n* host.address\n* host.state\n* poller.id\n* service.display_name\n* host_group.id\n* host.is_acknowledged\n* host.downtime\n* host.criticality\n"
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/monitoring/hosts?show_service=true&search=cillum quis commodo&limit=20&page=4",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"monitoring",
												"hosts"
											],
											"query": [
												{
													"key": "show_service",
													"value": "true"
												},
												{
													"key": "search",
													"value": "cillum quis commodo"
												},
												{
													"key": "limit",
													"value": "20"
												},
												{
													"key": "page",
													"value": "4"
												}
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"result\": [\n    {\n      \"id\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"alias\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"display_name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"state\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"services\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"poller_id\": 1,\n      \"acknowledged\": false,\n      \"address_ip\": \"127.0.0.1\",\n      \"check_attempt\": 1,\n      \"checked\": true,\n      \"execution_time\": 0.070906,\n      \"icon_image\": \"ppm/operatingsystems-linux-snmp-linux-128.png\",\n      \"icon_image_alt\": \"\",\n      \"last_check\": \"1980-02-02T05:43:34.625Z\",\n      \"last_hard_state_change\": \"2022-08-05T10:43:02.077Z\",\n      \"last_state_change\": \"1948-11-25T13:12:41.089Z\",\n      \"last_time_down\": \"1945-06-23T19:43:00.867Z\",\n      \"last_time_unreachable\": \"2022-07-05T17:47:46.217Z\",\n      \"last_time_up\": \"1952-11-26T09:19:35.799Z\",\n      \"last_update\": \"2002-02-11T22:28:18.621Z\",\n      \"max_check_attempts\": 3,\n      \"output\": \"OK - 127.0.0.1 rta 0.100ms lost 0%\\n\",\n      \"passive_checks\": false,\n      \"state_type\": 0,\n      \"timezone\": \":Europe/Paris\",\n      \"scheduled_downtime_depth\": 0,\n      \"criticality\": 10\n    },\n    {\n      \"id\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"alias\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"display_name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"state\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"services\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"poller_id\": 1,\n      \"acknowledged\": false,\n      \"address_ip\": \"127.0.0.1\",\n      \"check_attempt\": 1,\n      \"checked\": true,\n      \"execution_time\": 0.070906,\n      \"icon_image\": \"ppm/operatingsystems-linux-snmp-linux-128.png\",\n      \"icon_image_alt\": \"\",\n      \"last_check\": \"2014-11-11T02:07:25.915Z\",\n      \"last_hard_state_change\": \"1966-04-15T04:04:02.849Z\",\n      \"last_state_change\": \"1962-12-26T10:26:12.593Z\",\n      \"last_time_down\": \"2004-09-19T21:36:42.944Z\",\n      \"last_time_unreachable\": \"1951-05-24T08:52:34.057Z\",\n      \"last_time_up\": \"1990-04-26T07:43:26.231Z\",\n      \"last_update\": \"1971-01-30T15:22:21.380Z\",\n      \"max_check_attempts\": 3,\n      \"output\": \"OK - 127.0.0.1 rta 0.100ms lost 0%\\n\",\n      \"passive_checks\": false,\n      \"state_type\": 0,\n      \"timezone\": \":Europe/Paris\",\n      \"scheduled_downtime_depth\": 0,\n      \"criticality\": 10\n    }\n  ],\n  \"meta\": {\n    \"page\": 1,\n    \"limit\": 10,\n    \"search\": {},\n    \"sort_by\": {},\n    \"total\": 1\n  }\n}"
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/monitoring/hosts?show_service=true&search=cillum quis commodo&limit=20&page=4",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"monitoring",
												"hosts"
											],
											"query": [
												{
													"key": "show_service",
													"value": "true"
												},
												{
													"key": "search",
													"value": "cillum quis commodo"
												},
												{
													"key": "limit",
													"value": "20"
												},
												{
													"key": "page",
													"value": "4"
												}
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 403,\n  \"message\": \"You are not authorized to access this resource\"\n}"
								},
								{
									"name": "Internal Server Error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/monitoring/hosts?show_service=true&search=cillum quis commodo&limit=20&page=4",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"monitoring",
												"hosts"
											],
											"query": [
												{
													"key": "show_service",
													"value": "true"
												},
												{
													"key": "search",
													"value": "cillum quis commodo"
												},
												{
													"key": "limit",
													"value": "20"
												},
												{
													"key": "page",
													"value": "4"
												}
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 500,\n  \"message\": \"Internal Server Error\"\n}"
								}
							]
						},
						{
							"name": "List the randomly selected page and select a random service",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"var random_service = Math.floor(Math.random() * responseJson.meta.limit);\r",
											"pm.collectionVariables.set(\"service_to_add_downtime_on\", responseJson.result[random_service].id);\r",
											"pm.collectionVariables.set(\"host_of_down_service\", responseJson.result[random_service].host.id);\r",
											"pm.collectionVariables.set(\"service_description\", responseJson.result[random_service].description);\r",
											"pm.collectionVariables.unset(\"random_page\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/monitoring/services?page={{random_page}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"monitoring",
										"services"
									],
									"query": [
										{
											"key": "page",
											"value": "{{random_page}}"
										},
										{
											"key": "search",
											"value": "",
											"description": "Retrieve only data matching the defined search value.\nSimple search can be done like the following example: ``` search={\"host.name\":\"Central\"} ```\nComplex search can be done with aggregators and operators.\nAvailable search aggregators are:\n  * `$or`\n  * `$and`\n\nAvailable search operators are:\n  * `$eq` → equal\n  * `$neq` → not equal\n  * `$lt` → less than\n  * `$le` → less or equal than\n  * `$gt` → greater than\n  * `$ge` → greater or equal than\n  * `$lk` → like\n  * `$nk` → not like\n  * `$in` → in\n  * `$ni` → not in\n\nExamples without nested aggregators:\n  ```\n  search={\n    \"$or\":[\n      {\"host.name\":{\"$eq\":\"name_1\"}},\n      {\"host.name\":{\"$eq\":\"name_2\"}}\n    ]\n  }\n  ```\n  ```\n  search={\n    \"$and\":[\n      {\"host.address\":{\"$rg\":\"^10\\.0\\.0\\.\\d+$\"}},\n      {\"host.name\":{\"$lk\":\"fr%\"}}\n    ]\n  }\n  ```\n\nExample with nested aggregators:\n  ```\n  search={\n    \"$or\":[\n      {\n        \"$and\":[\n          {\"host.address\":{\"$rg\":\"^10\\.0\\.0\\.\\d+$\"}},\n          {\"host.name\":{\"$lk\":\"fr%\"}}\n        ]\n      },\n      {\n        \"$and\":[\n          {\"host.address\":{\"$rg\":\"^192\\.168\\.0\\.\\d+$\"}},\n          {\"host.name\":{\"$lk\":\"us%\"}}\n        ]\n      }\n    ]\n  }\n  ```\n",
											"disabled": true
										}
									]
								},
								"description": "List all the hosts in real-time monitoring.\n\nThe available parameters to **search** / **sort_by** are:\n\n* host.id\n* host.name\n* host.alias\n* host.address\n* host.state\n* poller.id\n* service.display_name\n* host_group.id\n* host.is_acknowledged\n* host.downtime\n* host.criticality\n"
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/monitoring/hosts?show_service=true&search=cillum quis commodo&limit=20&page=4",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"monitoring",
												"hosts"
											],
											"query": [
												{
													"key": "show_service",
													"value": "true"
												},
												{
													"key": "search",
													"value": "cillum quis commodo"
												},
												{
													"key": "limit",
													"value": "20"
												},
												{
													"key": "page",
													"value": "4"
												}
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"result\": [\n    {\n      \"id\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"alias\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"display_name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"state\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"services\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"poller_id\": 1,\n      \"acknowledged\": false,\n      \"address_ip\": \"127.0.0.1\",\n      \"check_attempt\": 1,\n      \"checked\": true,\n      \"execution_time\": 0.070906,\n      \"icon_image\": \"ppm/operatingsystems-linux-snmp-linux-128.png\",\n      \"icon_image_alt\": \"\",\n      \"last_check\": \"1980-02-02T05:43:34.625Z\",\n      \"last_hard_state_change\": \"2022-08-05T10:43:02.077Z\",\n      \"last_state_change\": \"1948-11-25T13:12:41.089Z\",\n      \"last_time_down\": \"1945-06-23T19:43:00.867Z\",\n      \"last_time_unreachable\": \"2022-07-05T17:47:46.217Z\",\n      \"last_time_up\": \"1952-11-26T09:19:35.799Z\",\n      \"last_update\": \"2002-02-11T22:28:18.621Z\",\n      \"max_check_attempts\": 3,\n      \"output\": \"OK - 127.0.0.1 rta 0.100ms lost 0%\\n\",\n      \"passive_checks\": false,\n      \"state_type\": 0,\n      \"timezone\": \":Europe/Paris\",\n      \"scheduled_downtime_depth\": 0,\n      \"criticality\": 10\n    },\n    {\n      \"id\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"alias\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"display_name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"state\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"services\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"poller_id\": 1,\n      \"acknowledged\": false,\n      \"address_ip\": \"127.0.0.1\",\n      \"check_attempt\": 1,\n      \"checked\": true,\n      \"execution_time\": 0.070906,\n      \"icon_image\": \"ppm/operatingsystems-linux-snmp-linux-128.png\",\n      \"icon_image_alt\": \"\",\n      \"last_check\": \"2014-11-11T02:07:25.915Z\",\n      \"last_hard_state_change\": \"1966-04-15T04:04:02.849Z\",\n      \"last_state_change\": \"1962-12-26T10:26:12.593Z\",\n      \"last_time_down\": \"2004-09-19T21:36:42.944Z\",\n      \"last_time_unreachable\": \"1951-05-24T08:52:34.057Z\",\n      \"last_time_up\": \"1990-04-26T07:43:26.231Z\",\n      \"last_update\": \"1971-01-30T15:22:21.380Z\",\n      \"max_check_attempts\": 3,\n      \"output\": \"OK - 127.0.0.1 rta 0.100ms lost 0%\\n\",\n      \"passive_checks\": false,\n      \"state_type\": 0,\n      \"timezone\": \":Europe/Paris\",\n      \"scheduled_downtime_depth\": 0,\n      \"criticality\": 10\n    }\n  ],\n  \"meta\": {\n    \"page\": 1,\n    \"limit\": 10,\n    \"search\": {},\n    \"sort_by\": {},\n    \"total\": 1\n  }\n}"
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/monitoring/hosts?show_service=true&search=cillum quis commodo&limit=20&page=4",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"monitoring",
												"hosts"
											],
											"query": [
												{
													"key": "show_service",
													"value": "true"
												},
												{
													"key": "search",
													"value": "cillum quis commodo"
												},
												{
													"key": "limit",
													"value": "20"
												},
												{
													"key": "page",
													"value": "4"
												}
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 403,\n  \"message\": \"You are not authorized to access this resource\"\n}"
								},
								{
									"name": "Internal Server Error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/monitoring/hosts?show_service=true&search=cillum quis commodo&limit=20&page=4",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"monitoring",
												"hosts"
											],
											"query": [
												{
													"key": "show_service",
													"value": "true"
												},
												{
													"key": "search",
													"value": "cillum quis commodo"
												},
												{
													"key": "limit",
													"value": "20"
												},
												{
													"key": "page",
													"value": "4"
												}
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 500,\n  \"message\": \"Internal Server Error\"\n}"
								}
							]
						},
						{
							"name": "List randomly selected service",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/monitoring/hosts/{{host_of_down_service}}/services/{{service_to_add_downtime_on}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"monitoring",
										"hosts",
										"{{host_of_down_service}}",
										"services",
										"{{service_to_add_downtime_on}}"
									]
								},
								"description": "List all the hosts in real-time monitoring.\n\nThe available parameters to **search** / **sort_by** are:\n\n* host.id\n* host.name\n* host.alias\n* host.address\n* host.state\n* poller.id\n* service.display_name\n* host_group.id\n* host.is_acknowledged\n* host.downtime\n* host.criticality\n"
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/monitoring/hosts?show_service=true&search=cillum quis commodo&limit=20&page=4",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"monitoring",
												"hosts"
											],
											"query": [
												{
													"key": "show_service",
													"value": "true"
												},
												{
													"key": "search",
													"value": "cillum quis commodo"
												},
												{
													"key": "limit",
													"value": "20"
												},
												{
													"key": "page",
													"value": "4"
												}
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"result\": [\n    {\n      \"id\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"alias\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"display_name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"state\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"services\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"poller_id\": 1,\n      \"acknowledged\": false,\n      \"address_ip\": \"127.0.0.1\",\n      \"check_attempt\": 1,\n      \"checked\": true,\n      \"execution_time\": 0.070906,\n      \"icon_image\": \"ppm/operatingsystems-linux-snmp-linux-128.png\",\n      \"icon_image_alt\": \"\",\n      \"last_check\": \"1980-02-02T05:43:34.625Z\",\n      \"last_hard_state_change\": \"2022-08-05T10:43:02.077Z\",\n      \"last_state_change\": \"1948-11-25T13:12:41.089Z\",\n      \"last_time_down\": \"1945-06-23T19:43:00.867Z\",\n      \"last_time_unreachable\": \"2022-07-05T17:47:46.217Z\",\n      \"last_time_up\": \"1952-11-26T09:19:35.799Z\",\n      \"last_update\": \"2002-02-11T22:28:18.621Z\",\n      \"max_check_attempts\": 3,\n      \"output\": \"OK - 127.0.0.1 rta 0.100ms lost 0%\\n\",\n      \"passive_checks\": false,\n      \"state_type\": 0,\n      \"timezone\": \":Europe/Paris\",\n      \"scheduled_downtime_depth\": 0,\n      \"criticality\": 10\n    },\n    {\n      \"id\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"alias\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"display_name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"state\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"services\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"poller_id\": 1,\n      \"acknowledged\": false,\n      \"address_ip\": \"127.0.0.1\",\n      \"check_attempt\": 1,\n      \"checked\": true,\n      \"execution_time\": 0.070906,\n      \"icon_image\": \"ppm/operatingsystems-linux-snmp-linux-128.png\",\n      \"icon_image_alt\": \"\",\n      \"last_check\": \"2014-11-11T02:07:25.915Z\",\n      \"last_hard_state_change\": \"1966-04-15T04:04:02.849Z\",\n      \"last_state_change\": \"1962-12-26T10:26:12.593Z\",\n      \"last_time_down\": \"2004-09-19T21:36:42.944Z\",\n      \"last_time_unreachable\": \"1951-05-24T08:52:34.057Z\",\n      \"last_time_up\": \"1990-04-26T07:43:26.231Z\",\n      \"last_update\": \"1971-01-30T15:22:21.380Z\",\n      \"max_check_attempts\": 3,\n      \"output\": \"OK - 127.0.0.1 rta 0.100ms lost 0%\\n\",\n      \"passive_checks\": false,\n      \"state_type\": 0,\n      \"timezone\": \":Europe/Paris\",\n      \"scheduled_downtime_depth\": 0,\n      \"criticality\": 10\n    }\n  ],\n  \"meta\": {\n    \"page\": 1,\n    \"limit\": 10,\n    \"search\": {},\n    \"sort_by\": {},\n    \"total\": 1\n  }\n}"
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/monitoring/hosts?show_service=true&search=cillum quis commodo&limit=20&page=4",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"monitoring",
												"hosts"
											],
											"query": [
												{
													"key": "show_service",
													"value": "true"
												},
												{
													"key": "search",
													"value": "cillum quis commodo"
												},
												{
													"key": "limit",
													"value": "20"
												},
												{
													"key": "page",
													"value": "4"
												}
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 403,\n  \"message\": \"You are not authorized to access this resource\"\n}"
								},
								{
									"name": "Internal Server Error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/monitoring/hosts?show_service=true&search=cillum quis commodo&limit=20&page=4",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"monitoring",
												"hosts"
											],
											"query": [
												{
													"key": "show_service",
													"value": "true"
												},
												{
													"key": "search",
													"value": "cillum quis commodo"
												},
												{
													"key": "limit",
													"value": "20"
												},
												{
													"key": "page",
													"value": "4"
												}
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 500,\n  \"message\": \"Internal Server Error\"\n}"
								}
							]
						}
					],
					"description": "NB: Is only relevant on a multi-page selection."
				},
				{
					"name": "Factorize the process of parameter/value manipulation in GET requests when updates have been made on resources",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"var updated_parameters_found = 0;\r",
									"\r",
									"try {\r",
									"    var i = 0;\r",
									"        while (i < responseJson.result.length) {\r",
									"        if (pm.collectionVariables.get(\"time_period_name\") == responseJson.result[i].name) {\r",
									"            var j = 0;            \r",
									"            while (j < pm.collectionVariables.get(\"total_number_of_parameters\")) {\r",
									"                var current_parameter_string = \"parameter_number_\" + j;\r",
									"                var current_parameter = pm.collectionVariables.get(current_parameter_string);\r",
									"                var parameter_in_query = \"responseJson.result[i].\" + current_parameter;\r",
									"                console.log(parameter_in_query);\r",
									"                var current_value_string = \"value_number_\" + j;\r",
									"                var current_value = pm.collectionVariables.get(current_value_string);                \r",
									"                j++;\r",
									"                pm.test(\"works\", function() {\r",
									"                    pm.expect(parameter_in_query).to.eql(current_value);\r",
									"                });\r",
									"            }\r",
									"        }\r",
									"        i++;\r",
									"    }\r",
									"    if (i == responseJson.result.length) {\r",
									"        pm.test(\"Newly created time period was found\", function() {\r",
									"            false;\r",
									"        });\r",
									"    }\r",
									"}\r",
									"catch (e) {}\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "centreon-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"action\": \"show\",\r\n  \"object\": \"tp\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
							"protocol": "{{protocol}}",
							"host": [
								"{{server}}"
							],
							"path": [
								"centreon",
								"api",
								"index.php"
							],
							"query": [
								{
									"key": "action",
									"value": "action"
								},
								{
									"key": "object",
									"value": "centreon_clapi"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Global clean",
			"item": [
				{
					"name": "Downtime clean",
					"item": [
						{
							"name": "List all downtimes",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"var i = 0;\r",
											"while (i < responseJson.result.length) {\r",
											"    if(responseJson.result[i].is_cancelled == false) {\r",
											"            pm.collectionVariables.set(\"downtime_id_to_delete\", responseJson.result[i].id);\r",
											"            postman.setNextRequest(\"Cancel Downtime\");\r",
											"            break;\r",
											"    }\r",
											"    i++;\r",
											"}\r",
											"\r",
											"if (i == responseJson.result.length) {\r",
											"    pm.collectionVariables.unset(\"downtime_id_to_delete\");\r",
											"    postman.setNextRequest(null);\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/monitoring/downtimes",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"monitoring",
										"downtimes"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cancel Downtime",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											"\r",
											"postman.setNextRequest(\"List all downtimes\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/monitoring/downtimes/{{downtime_id_to_delete}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"monitoring",
										"downtimes",
										"{{downtime_id_to_delete}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Host group clean",
					"item": [
						{
							"name": "List all host groups before host group deletion",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"if (!responseJson.result.length) {\r",
											"    pm.collectionVariables.unset(\"host_group_to_delete\");\r",
											"    postman.setNextRequest(null);\r",
											"} else {\r",
											"    pm.collectionVariables.set(\"host_group_to_delete\", responseJson.result[0].name);\r",
											"    postman.setNextRequest(\"Delete host group\");\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/configuration/hosts/groups",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configuration",
										"hosts",
										"groups"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete host group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"postman.setNextRequest(\"List all host groups before host group deletion\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"del\",\n  \"object\": \"hg\",\n  \"values\": \"{{host_group_to_delete}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Host clean",
					"item": [
						{
							"name": "List all hosts before global host deletion",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"pm.collectionVariables.set(\"host_to_delete\", responseJson.result[0].name);\r",
											"postman.setNextRequest(\"Host deletion\");\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/monitoring/hosts?limit=20",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"monitoring",
										"hosts"
									],
									"query": [
										{
											"key": "page",
											"value": "",
											"description": "Number of the requested page",
											"disabled": true
										},
										{
											"key": "search",
											"value": "",
											"description": "Retrieve only data matching the defined search value.\nSimple search can be done like the following example: ``` search={\"host.name\":\"Central\"} ```\nComplex search can be done with aggregators and operators.\nAvailable search aggregators are:\n  * `$or`\n  * `$and`\n\nAvailable search operators are:\n  * `$eq` → equal\n  * `$neq` → not equal\n  * `$lt` → less than\n  * `$le` → less or equal than\n  * `$gt` → greater than\n  * `$ge` → greater or equal than\n  * `$lk` → like\n  * `$nk` → not like\n  * `$in` → in\n  * `$ni` → not in\n\nExamples without nested aggregators:\n  ```\n  search={\n    \"$or\":[\n      {\"host.name\":{\"$eq\":\"name_1\"}},\n      {\"host.name\":{\"$eq\":\"name_2\"}}\n    ]\n  }\n  ```\n  ```\n  search={\n    \"$and\":[\n      {\"host.address\":{\"$rg\":\"^10\\.0\\.0\\.\\d+$\"}},\n      {\"host.name\":{\"$lk\":\"fr%\"}}\n    ]\n  }\n  ```\n\nExample with nested aggregators:\n  ```\n  search={\n    \"$or\":[\n      {\n        \"$and\":[\n          {\"host.address\":{\"$rg\":\"^10\\.0\\.0\\.\\d+$\"}},\n          {\"host.name\":{\"$lk\":\"fr%\"}}\n        ]\n      },\n      {\n        \"$and\":[\n          {\"host.address\":{\"$rg\":\"^192\\.168\\.0\\.\\d+$\"}},\n          {\"host.name\":{\"$lk\":\"us%\"}}\n        ]\n      }\n    ]\n  }\n  ```\n",
											"disabled": true
										},
										{
											"key": "limit",
											"value": "20"
										}
									]
								},
								"description": "List all the hosts in real-time monitoring.\n\nThe available parameters to **search** / **sort_by** are:\n\n* host.id\n* host.name\n* host.alias\n* host.address\n* host.state\n* poller.id\n* service.display_name\n* host_group.id\n* host.is_acknowledged\n* host.downtime\n* host.criticality\n"
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/monitoring/hosts?show_service=true&search=cillum quis commodo&limit=20&page=4",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"monitoring",
												"hosts"
											],
											"query": [
												{
													"key": "show_service",
													"value": "true"
												},
												{
													"key": "search",
													"value": "cillum quis commodo"
												},
												{
													"key": "limit",
													"value": "20"
												},
												{
													"key": "page",
													"value": "4"
												}
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"result\": [\n    {\n      \"id\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"alias\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"display_name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"state\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"services\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"poller_id\": 1,\n      \"acknowledged\": false,\n      \"address_ip\": \"127.0.0.1\",\n      \"check_attempt\": 1,\n      \"checked\": true,\n      \"execution_time\": 0.070906,\n      \"icon_image\": \"ppm/operatingsystems-linux-snmp-linux-128.png\",\n      \"icon_image_alt\": \"\",\n      \"last_check\": \"1980-02-02T05:43:34.625Z\",\n      \"last_hard_state_change\": \"2022-08-05T10:43:02.077Z\",\n      \"last_state_change\": \"1948-11-25T13:12:41.089Z\",\n      \"last_time_down\": \"1945-06-23T19:43:00.867Z\",\n      \"last_time_unreachable\": \"2022-07-05T17:47:46.217Z\",\n      \"last_time_up\": \"1952-11-26T09:19:35.799Z\",\n      \"last_update\": \"2002-02-11T22:28:18.621Z\",\n      \"max_check_attempts\": 3,\n      \"output\": \"OK - 127.0.0.1 rta 0.100ms lost 0%\\n\",\n      \"passive_checks\": false,\n      \"state_type\": 0,\n      \"timezone\": \":Europe/Paris\",\n      \"scheduled_downtime_depth\": 0,\n      \"criticality\": 10\n    },\n    {\n      \"id\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"alias\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"display_name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"name\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"state\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"services\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"poller_id\": 1,\n      \"acknowledged\": false,\n      \"address_ip\": \"127.0.0.1\",\n      \"check_attempt\": 1,\n      \"checked\": true,\n      \"execution_time\": 0.070906,\n      \"icon_image\": \"ppm/operatingsystems-linux-snmp-linux-128.png\",\n      \"icon_image_alt\": \"\",\n      \"last_check\": \"2014-11-11T02:07:25.915Z\",\n      \"last_hard_state_change\": \"1966-04-15T04:04:02.849Z\",\n      \"last_state_change\": \"1962-12-26T10:26:12.593Z\",\n      \"last_time_down\": \"2004-09-19T21:36:42.944Z\",\n      \"last_time_unreachable\": \"1951-05-24T08:52:34.057Z\",\n      \"last_time_up\": \"1990-04-26T07:43:26.231Z\",\n      \"last_update\": \"1971-01-30T15:22:21.380Z\",\n      \"max_check_attempts\": 3,\n      \"output\": \"OK - 127.0.0.1 rta 0.100ms lost 0%\\n\",\n      \"passive_checks\": false,\n      \"state_type\": 0,\n      \"timezone\": \":Europe/Paris\",\n      \"scheduled_downtime_depth\": 0,\n      \"criticality\": 10\n    }\n  ],\n  \"meta\": {\n    \"page\": 1,\n    \"limit\": 10,\n    \"search\": {},\n    \"sort_by\": {},\n    \"total\": 1\n  }\n}"
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/monitoring/hosts?show_service=true&search=cillum quis commodo&limit=20&page=4",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"monitoring",
												"hosts"
											],
											"query": [
												{
													"key": "show_service",
													"value": "true"
												},
												{
													"key": "search",
													"value": "cillum quis commodo"
												},
												{
													"key": "limit",
													"value": "20"
												},
												{
													"key": "page",
													"value": "4"
												}
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 403,\n  \"message\": \"You are not authorized to access this resource\"\n}"
								},
								{
									"name": "Internal Server Error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "X-AUTH-TOKEN",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/monitoring/hosts?show_service=true&search=cillum quis commodo&limit=20&page=4",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"monitoring",
												"hosts"
											],
											"query": [
												{
													"key": "show_service",
													"value": "true"
												},
												{
													"key": "search",
													"value": "cillum quis commodo"
												},
												{
													"key": "limit",
													"value": "20"
												},
												{
													"key": "page",
													"value": "4"
												}
											],
											"variable": [
												{
													"key": "protocol",
													"value": "{{protocol}}",
													"description": "HTTP schema (This can only be one of http,https)"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"description": "IP address or hostname of Centreon server"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"description": "Port used by HTTP server"
												},
												{
													"key": "version",
													"value": "{{version}}",
													"description": "Version of the API"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": 500,\n  \"message\": \"Internal Server Error\"\n}"
								}
							]
						},
						{
							"name": "Host deletion",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"postman.setNextRequest(\"Export configuration after global host deletion\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "centreon-auth-token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"action\": \"del\",\r\n  \"object\": \"host\",\r\n  \"values\": \"{{host_to_delete}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Export configuration after global host deletion",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"setTimeout(function(){}, [2000]);\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"if (!responseJson.result.length) {\r",
											"    pm.collectionVariables.unset(\"host_to_delete\");\r",
											"    postman.setNextRequest(null);\r",
											"} else {\r",
											"    postman.setNextRequest(\"List all hosts before global host deletion\");\r",
											"}\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"APPLYCFG\",\n  \"values\": \"Central\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Time period clean",
					"item": [
						{
							"name": "Show available time periods before time period deletion",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"\r",
											"var i = 0;\r",
											"var default_time_periods = [\"24x7\", \"nonworkhours\", \"workhours\", \"none\"];\r",
											"while (i < responseJson.result.length) {\r",
											"    var j = default_time_periods.indexOf(responseJson.result[i].name);\r",
											"    if(j == -1) {\r",
											"        pm.collectionVariables.set(\"time_period_to_delete\", responseJson.result[i].name);\r",
											"        postman.setNextRequest(\"Delete selected time period\");\r",
											"    } \r",
											"    i++;\r",
											"}\r",
											"\r",
											"if(i == default_time_periods.length) {\r",
											"    pm.collectionVariables.unset(\"time_period_to_delete\");\r",
											"    postman.setNextRequest(null);\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "centreon-auth-token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"action\": \"show\",\r\n  \"object\": \"tp\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete selected time period",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"postman.setNextRequest(\"Show available time periods before time period deletion\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"del\",\n  \"object\": \"tp\",\n  \"values\": \"{{time_period_to_delete}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "User clean",
					"item": [
						{
							"name": "Show users before user deletion",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"\r",
											"var i = 0;\r",
											"var default_users = [\"admin\", \"centreon-gorgone\", \"guest\", \"user\"];\r",
											"while (i < responseJson.result.length) {\r",
											"    var j = default_users.indexOf(responseJson.result[i].alias);\r",
											"    if(j == -1) {\r",
											"        pm.collectionVariables.set(\"user_to_delete\", responseJson.result[i].alias);\r",
											"        postman.setNextRequest(\"Delete selected user\");\r",
											"    } \r",
											"    i++;\r",
											"}\r",
											"\r",
											"if(i == default_users.length) {\r",
											"    pm.collectionVariables.unset(\"user_to_delete\");\r",
											"    postman.setNextRequest(null);\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "centreon-auth-token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/configuration/users",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configuration",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete selected user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"User has been succesfully deleted.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"postman.setNextRequest(\"Show users before user deletion\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "centreon-auth-token",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"del\",\n  \"object\": \"contact\",\n  \"values\": \"{{user_to_delete}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{server}}/centreon/api/index.php?action=action&object=centreon_clapi",
									"protocol": "{{protocol}}",
									"host": [
										"{{server}}"
									],
									"path": [
										"centreon",
										"api",
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "action"
										},
										{
											"key": "object",
											"value": "centreon_clapi"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	],
	"auth": {
		"type": "apikey",
		"apikey": [
			{
				"key": "key",
				"value": "X-auth-token",
				"type": "string"
			},
			{
				"key": "in",
				"value": "header",
				"type": "string"
			},
			{
				"key": "value",
				"value": "{{token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "protocol",
			"value": "http",
			"type": "any"
		},
		{
			"key": "server",
			"value": "",
			"type": "any"
		},
		{
			"key": "port",
			"value": "80",
			"type": "any"
		},
		{
			"key": "version",
			"value": "latest",
			"type": "any"
		},
		{
			"key": "api_login",
			"value": "admin",
			"type": "string"
		},
		{
			"key": "api_password",
			"value": "Centreon!2021",
			"type": "string"
		},
		{
			"key": "baseUrl",
			"value": "{{protocol}}://{{server}}:{{port}}/centreon/api/{{version}}",
			"type": "string"
		},
		{
			"key": "token",
			"value": "",
			"type": "string"
		}
	]
}